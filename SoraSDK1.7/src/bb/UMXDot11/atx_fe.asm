; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?ConvEncodeReset@@YAXAEAE@Z			; ConvEncodeReset
PUBLIC	?UpsampleTailAndCopyNT@@YAXPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@@Z ; UpsampleTailAndCopyNT
PUBLIC	?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z ; CopyPreamble16_NT
PUBLIC	?ConvEncode_1_2@@YAXPEAD0IAEAE@Z		; ConvEncode_1_2
PUBLIC	?MapBPSK_11a@@YAXPEADPEAU_COMPLEX16@@@Z		; MapBPSK_11a
PUBLIC	?InterleaveBPSK@@YAXPEBDPEAD@Z			; InterleaveBPSK
PUBLIC	?AddPilot@@YAXPEAU_COMPLEX16@@0E@Z		; AddPilot
PUBLIC	??$FFTLUTMapTable@$0IA@@@YAFH@Z			; FFTLUTMapTable<128>
PUBLIC	??$FFT_GetTwiddleConst@$0IA@$00@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<128,1>
PUBLIC	??$FFT_GetTwiddleConst@$0IA@$01@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<128,2>
PUBLIC	??$FFT_GetTwiddleConst@$0IA@$02@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<128,3>
PUBLIC	??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z		; IFFTSSE<128>
PUBLIC	??$FFT_GetTwiddleConst@$07$00@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<8,1>
PUBLIC	??$__0xFFFFFFFFFFFFFFFF0000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ; vector128_consts::__0xFFFFFFFFFFFFFFFF0000000000000000<vcs>
PUBLIC	??0vq@@QEAA@XZ					; vq::vq
PUBLIC	??0vq@@QEAA@T__m128i@@@Z			; vq::vq
PUBLIC	??4vq@@QEAAAEAU0@AEBU0@@Z			; vq::operator=
PUBLIC	??Bvq@@QEAAAEAT__m128i@@XZ			; vq::operator __m128i & __ptr64
PUBLIC	??$set_all_bits@Uvq@@@@YAXAEAUvq@@PEAT__m128i@@@Z ; set_all_bits<vq>
PUBLIC	??Bvq@@QEBAAEBT__m128i@@XZ			; vq::operator __m128i const & __ptr64
PUBLIC	??$?0Uvq@@@vcs@@QEAA@AEBUvq@@@Z			; vcs::vcs<vq>
PUBLIC	??$__0xFFFF0000000000000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ; vector128_consts::__0xFFFF0000000000000000000000000000<vcs>
PUBLIC	??$permutate_high@$0LE@@@YA?AUvcs@@AEBU0@@Z	; permutate_high<180>
PUBLIC	??Bvi@@QEAAAEAT__m128i@@XZ			; vi::operator __m128i & __ptr64
PUBLIC	??$?0Uvi@@@vcs@@QEAA@AEBUvi@@@Z			; vcs::vcs<vi>
PUBLIC	??$set_all_bits@Uvi@@@@YAXAEAUvi@@PEAT__m128i@@@Z ; set_all_bits<vi>
PUBLIC	??$__0xFFFF0000FFFF00000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ; vector128_consts::__0xFFFF0000FFFF00000000000000000000<vcs>
PUBLIC	??$permutate@$0MI@@@YA?AUvcs@@AEBU0@@Z		; permutate<200>
PUBLIC	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z		; IFFTSSEEx<8>
PUBLIC	?saturated_sub@@YA?AUvcs@@AEBU1@0@Z		; saturated_sub
PUBLIC	??$?0Uvi@@@vs@@QEAA@AEBUvi@@@Z			; vs::vs<vi>
PUBLIC	?shift_left@@YA?AUvi@@AEBU1@H@Z			; shift_left
PUBLIC	??$?0Uvub@@@vi@@QEAA@AEBUvub@@@Z		; vi::vi<vub>
PUBLIC	??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ ; vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vi>
PUBLIC	??$and@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z	; and<vi>
PUBLIC	??$or@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z	; or<vi>
PUBLIC	?pack@@YA?AUvs@@AEBUvi@@0@Z			; pack
PUBLIC	?sign@@YA?AUvcs@@AEBU1@0@Z			; sign
PUBLIC	?conjre@@YA?AUvcs@@AEBU1@@Z			; conjre
PUBLIC	?conj_mul_shift@@YA?AUvcs@@AEBU1@0H@Z		; conj_mul_shift
PUBLIC	??$permutate_low@$0LB@@@YA?AUvcs@@AEBU0@@Z	; permutate_low<177>
PUBLIC	??$permutate_high@$0LB@@@YA?AUvcs@@AEBU0@@Z	; permutate_high<177>
PUBLIC	?flip@@YA?AUvcs@@AEBU1@@Z			; flip
PUBLIC	??0vub@@QEAA@AEAY0BA@$$CBE@Z			; vub::vub
PUBLIC	??Bvub@@QEBAAEBT__m128i@@XZ			; vub::operator __m128i const & __ptr64
PUBLIC	??$?0Uvub@@@vcs@@QEAA@AEBUvub@@@Z		; vcs::vcs<vub>
PUBLIC	??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ; vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vcs>
PUBLIC	?mul_j@@YA?AUvcs@@AEBU1@@Z			; mul_j
PUBLIC	??$FFT_GetTwiddleConst@$0CA@$00@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<32,1>
PUBLIC	??$FFT_GetTwiddleConst@$0CA@$01@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<32,2>
PUBLIC	??$FFT_GetTwiddleConst@$0CA@$02@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<32,3>
PUBLIC	??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z		; IFFTSSE<32>
PUBLIC	??$IFFTSSEEx@$0CA@@@YAXPEAUvcs@@@Z		; IFFTSSEEx<32>
PUBLIC	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z		; IFFTSSEEx<128>
PUBLIC	?IFFT64x@@YAXPEAUvcs@@0@Z			; IFFT64x
PUBLIC	?IFFT64x@@YAXPEAU_COMPLEX16@@0@Z		; IFFT64x
PUBLIC	?CopyGI@@YAXPEAU_COMPLEX16@@0@Z			; CopyGI
PUBLIC	?saturated_add@@YA?AUvcs@@AEBU1@0@Z		; saturated_add
PUBLIC	?Window@@YAXPEAU_COMPLEX16@@0@Z			; Window
PUBLIC	??$store_nt@Uvb@@@@YAXPEAUvb@@AEBU0@@Z		; store_nt<vb>
PUBLIC	?Pack_NT@@YAXPEAUvb@@AEBUvs@@1H@Z		; Pack_NT
PUBLIC	?Copy_NT@@YAXPEAU_COMPLEX8@@PEBU_COMPLEX16@@IH@Z ; Copy_NT
PUBLIC	??$mul_shift@$0P@@@YA?AUvs@@AEBU0@0@Z		; mul_shift<15>
PUBLIC	??$and@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z	; and<vcs>
PUBLIC	??$concat_extract@$0M@Uvcs@@@@YA?AUvcs@@AEBU0@0@Z ; concat_extract<12,vcs>
PUBLIC	??$permutate@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z	; permutate<1,0,3,2>
PUBLIC	??$or@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z	; or<vcs>
PUBLIC	??$store@Uvcs@@@@YAXPEAXAEBUvcs@@@Z		; store<vcs>
PUBLIC	??$concat_extract@$07Uvs@@@@YA?AUvs@@AEBU0@0@Z	; concat_extract<8,vs>
PUBLIC	?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z ; UpsampleAndCopyNT
PUBLIC	?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ; Generate6MSymbol
PUBLIC	?GetSignal@@YAIEG@Z				; GetSignal
PUBLIC	?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z ; GenerateSignal
PUBLIC	?GetSignalBytes@@YAKPEAU_BB11A_TX_VECTOR@@I@Z	; GetSignalBytes
PUBLIC	?Scramble11aBuffer@@YAXPEAEIPEADIK@Z		; Scramble11aBuffer
PUBLIC	?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB	; `conjre'::`2'::value
PUBLIC	?g_coff1_row0@@3QAY07$$CBFA			; g_coff1_row0
PUBLIC	?g_coff1_row1@@3QAY07$$CBFA			; g_coff1_row1
PUBLIC	?_ODD_MASK@@3QBU_COMPLEX16@@B			; _ODD_MASK
PUBLIC	?_EVEN_MASK@@3QBU_COMPLEX16@@B			; _EVEN_MASK
PUBLIC	?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB ; `vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vi>'::`2'::value
PUBLIC	?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB ; `vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vcs>'::`2'::value
EXTRN	__imp_rand:PROC
;	COMDAT ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB
CONST	SEGMENT
?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB DB 0ffH ; `vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vcs>'::`2'::value
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
CONST	SEGMENT
?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB DB 0ffH ; `vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vi>'::`2'::value
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?_EVEN_MASK@@3QBU_COMPLEX16@@B
CONST	SEGMENT
?_EVEN_MASK@@3QBU_COMPLEX16@@B DW 00H			; _EVEN_MASK
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
CONST	ENDS
;	COMDAT ?_ODD_MASK@@3QBU_COMPLEX16@@B
CONST	SEGMENT
?_ODD_MASK@@3QBU_COMPLEX16@@B DW 0ffffH			; _ODD_MASK
	DW	0ffffH
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?g_coff1_row1@@3QAY07$$CBFA
CONST	SEGMENT
?g_coff1_row1@@3QAY07$$CBFA DW 0ba2H			; g_coff1_row1
	DW	0ba2H
	DW	0745cH
	DW	0745cH
	DW	022e8H
	DW	022e8H
	DW	05d16H
	DW	05d16H
	DW	03a2eH
	DW	03a2eH
	DW	045d0H
	DW	045d0H
	DW	05173H
	DW	05173H
	DW	02e8bH
	DW	02e8bH
	DW	068b9H
	DW	068b9H
	DW	01745H
	DW	01745H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?g_coff1_row0@@3QAY07$$CBFA
CONST	SEGMENT
?g_coff1_row0@@3QAY07$$CBFA DW 07fffH			; g_coff1_row0
	DW	07fffH
	DW	01745H
	DW	01745H
	DW	068b9H
	DW	068b9H
	DW	02e8bH
	DW	02e8bH
	DW	05173H
	DW	05173H
	DW	045d0H
	DW	045d0H
	DW	03a2eH
	DW	03a2eH
	DW	05d16H
	DW	05d16H
	DW	022e8H
	DW	022e8H
	DW	0745cH
	DW	0745cH
	DW	0ba2H
	DW	0ba2H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
CONST	SEGMENT
?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB DB 00H	; `conjre'::`2'::value
	DB	080H
	DB	01H
	DB	00H
	DB	00H
	DB	080H
	DB	01H
	DB	00H
	DB	00H
	DB	080H
	DB	01H
	DB	00H
	DB	00H
	DB	080H
	DB	01H
	DB	00H
	ORG $+12
rgbLongPrePositive DB 00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
gAGCLut	DD	0fffffff9H
	DD	0fffffffaH
	DD	0fffffffbH
	DD	0fffffffcH
	DD	0fffffffdH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$??$set_all_bits@Uvq@@@@YAXAEAUvq@@PEAT__m128i@@@Z DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$??$set_all_bits@Uvq@@@@YAXAEAUvq@@PEAT__m128i@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$set_all_bits@Uvq@@@@YAXAEAUvq@@PEAT__m128i@@@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$set_all_bits@Uvq@@@@YAXAEAUvq@@PEAT__m128i@@@Z
_TEXT	SEGMENT
t$ = 0
a$ = 32
__formal$ = 40
??$set_all_bits@Uvq@@@@YAXAEAUvq@@PEAT__m128i@@@Z PROC	; set_all_bits<vq>, COMDAT

; 393  : {

$LN3:
	sub	rsp, 24

; 394  :     __m128i t;
; 395  : #ifndef NDEBUG
; 396  :     // Note: prevent runtime error in debug mode: variable is used without initialization
; 397  :     *reinterpret_cast<__m128*>(&t) = _mm_setzero_ps();
; 398  : #endif
; 399  :     t = _mm_cmpeq_epi32(t, t);

	movdqa	xmm0, XMMWORD PTR t$[rsp]
	pcmpeqd	xmm0, xmm0

; 400  :     reinterpret_cast<__m128i&>(a) = t;

	movdqa	XMMWORD PTR [rcx], xmm0

; 401  : }

	add	rsp, 24
	ret	0
??$set_all_bits@Uvq@@@@YAXAEAUvq@@PEAT__m128i@@@Z ENDP	; set_all_bits<vq>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$set_all_bits@Uvi@@@@YAXAEAUvi@@PEAT__m128i@@@Z DD imagerel $LN3
	DD	imagerel $LN3+22
	DD	imagerel $unwind$??$set_all_bits@Uvi@@@@YAXAEAUvi@@PEAT__m128i@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$set_all_bits@Uvi@@@@YAXAEAUvi@@PEAT__m128i@@@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$set_all_bits@Uvi@@@@YAXAEAUvi@@PEAT__m128i@@@Z
_TEXT	SEGMENT
t$ = 0
a$ = 32
__formal$ = 40
??$set_all_bits@Uvi@@@@YAXAEAUvi@@PEAT__m128i@@@Z PROC	; set_all_bits<vi>, COMDAT

; 393  : {

$LN3:
	sub	rsp, 24

; 394  :     __m128i t;
; 395  : #ifndef NDEBUG
; 396  :     // Note: prevent runtime error in debug mode: variable is used without initialization
; 397  :     *reinterpret_cast<__m128*>(&t) = _mm_setzero_ps();
; 398  : #endif
; 399  :     t = _mm_cmpeq_epi32(t, t);

	movdqa	xmm0, XMMWORD PTR t$[rsp]
	pcmpeqd	xmm0, xmm0

; 400  :     reinterpret_cast<__m128i&>(a) = t;

	movdqa	XMMWORD PTR [rcx], xmm0

; 401  : }

	add	rsp, 24
	ret	0
??$set_all_bits@Uvi@@@@YAXAEAUvi@@PEAT__m128i@@@Z ENDP	; set_all_bits<vi>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx_tpl.h
_TEXT	ENDS
;	COMDAT ?GetSignalBytes@@YAKPEAU_BB11A_TX_VECTOR@@I@Z
_TEXT	SEGMENT
info$ = 8
uiSymbolCountData$ = 16
?GetSignalBytes@@YAKPEAU_BB11A_TX_VECTOR@@I@Z PROC	; GetSignalBytes, COMDAT

; 72   :     unsigned int uiOutputSize = COMPLEX_COUNT_PREAMBLE + COMPLEX_COUNT_SIGNAL + uiSymbolCountData * COMPLEX_PER_SYMBOL;

	lea	ecx, DWORD PTR [rdx+rdx*4+25]
	shl	ecx, 5

; 73   : 
; 74   :     if (info->SampleRate == 44)

	cmp	DWORD PTR TxVector, 44			; 0000002cH
	jne	SHORT $LN4@GetSignalB

; 75   :     {
; 76   :         ASSERT(uiOutputSize % 10 == 0);
; 77   :         uiOutputSize = uiOutputSize / 10 * 11;

	mov	eax, -858993459				; cccccccdH
	mul	ecx
	shr	edx, 3
	imul	edx, 11

; 78   :     }
; 79   : 
; 80   :     uiOutputSize += 8; // last window, 16 align
; 81   :     ULONG SignalBytes = uiOutputSize * sizeof(COMPLEX8);
; 82   :     return SignalBytes;

	lea	eax, DWORD PTR [rdx+rdx+16]

; 83   : }

	ret	0
$LN4@GetSignalB:

; 78   :     }
; 79   : 
; 80   :     uiOutputSize += 8; // last window, 16 align
; 81   :     ULONG SignalBytes = uiOutputSize * sizeof(COMPLEX8);
; 82   :     return SignalBytes;

	lea	eax, DWORD PTR [rcx+rcx+16]

; 83   : }

	ret	0
?GetSignalBytes@@YAKPEAU_BB11A_TX_VECTOR@@I@Z ENDP	; GetSignalBytes
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx.h
_TEXT	ENDS
;	COMDAT ?GetSignal@@YAIEG@Z
_TEXT	SEGMENT
bRateCode$ = 8
usLength$ = 16
?GetSignal@@YAIEG@Z PROC				; GetSignal, COMDAT

; 81   :     unsigned int uiRet;
; 82   :     unsigned int uiParity;
; 83   : 
; 84   :     uiRet = bRateCode;
; 85   :     uiRet |= ((unsigned int)(usLength)) << 5;

	movzx	eax, cl
	movzx	r8d, dx
	shl	r8d, 5
	or	r8d, eax

; 86   : 
; 87   :     uiParity = uiRet ^ (uiRet >> 16);

	mov	ecx, r8d
	shr	ecx, 16
	xor	ecx, r8d

; 88   :     uiParity ^= uiParity >> 8;

	mov	eax, ecx
	shr	eax, 8
	xor	ecx, eax

; 89   :     uiParity ^= uiParity >> 4;

	mov	eax, ecx
	shr	eax, 4
	xor	ecx, eax

; 90   :     uiParity ^= uiParity >> 2;

	mov	eax, ecx
	shr	eax, 2
	xor	ecx, eax

; 91   :     uiParity ^= uiParity >> 1;
; 92   :     uiParity &= 0x1;
; 93   : 
; 94   :     uiRet |= uiParity << 17;
; 95   : 
; 96   :     return uiRet;

	lea	eax, DWORD PTR [rcx+rcx]
	xor	eax, ecx
	and	eax, 2
	shl	eax, 16
	or	eax, r8d

; 97   : }

	ret	0
?GetSignal@@YAIEG@Z ENDP				; GetSignal
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
_TEXT	ENDS
;	COMDAT ?CopyGI@@YAXPEAU_COMPLEX16@@0@Z
_TEXT	SEGMENT
pcTo$ = 8
pcFrom$ = 16
?CopyGI@@YAXPEAU_COMPLEX16@@0@Z PROC			; CopyGI, COMDAT

; 16   :     // Copy 8 vcs
; 17   :     memcpy(pcTo, pcFrom, sizeof(vcs) * 8);

	mov	r8d, 128				; 00000080H

; 18   : }

	jmp	memcpy
?CopyGI@@YAXPEAU_COMPLEX16@@0@Z ENDP			; CopyGI
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\addpilot.h
_TEXT	ENDS
;	COMDAT ?AddPilot@@YAXPEAU_COMPLEX16@@0E@Z
_TEXT	SEGMENT
pcInput$ = 8
pcOutput$ = 16
bPilotSgn$ = 24
?AddPilot@@YAXPEAU_COMPLEX16@@0E@Z PROC			; AddPilot, COMDAT

; 8    : {

	mov	r10, rcx
	mov	r11, rdx

; 9    :     unsigned int i;
; 10   :     for (i = 64 - 26; i < 64; i++)

	mov	r9d, 38					; 00000026H
	lea	rcx, QWORD PTR [rdx+152]
$LL12@AddPilot:

; 11   :     {
; 12   :         if (i == 64 - 7 || i == 64 - 21)

	cmp	r9d, 57					; 00000039H
	je	SHORT $LN11@AddPilot
	cmp	r9d, 43					; 0000002bH
	je	SHORT $LN11@AddPilot

; 13   :             continue;
; 14   :         pcOutput[i] = *pcInput;

	mov	eax, DWORD PTR [r10]

; 15   :         pcInput++;

	add	r10, 4
	mov	DWORD PTR [rcx], eax
$LN11@AddPilot:
	inc	r9d
	add	rcx, 4
	cmp	r9d, 64					; 00000040H
	jb	SHORT $LL12@AddPilot

; 16   :     }
; 17   : 
; 18   :     for (i = 1; i <= 26; i++)

	mov	ecx, 1
	add	rdx, 4
	npad	2
$LL7@AddPilot:

; 19   :     {
; 20   :         if (i == 7 || i == 21)

	cmp	ecx, 7
	je	SHORT $LN6@AddPilot
	cmp	ecx, 21
	je	SHORT $LN6@AddPilot

; 21   :             continue;
; 22   :         pcOutput[i] = *pcInput;

	mov	eax, DWORD PTR [r10]

; 23   :         pcInput++;

	add	r10, 4
	mov	DWORD PTR [rdx], eax
$LN6@AddPilot:
	inc	ecx
	add	rdx, 4
	cmp	ecx, 26
	jbe	SHORT $LL7@AddPilot

; 24   :     }
; 25   : 
; 26   :     if (!bPilotSgn)
; 27   :     {
; 28   :         pcOutput[7].re = OFDM_ONE;
; 29   :         pcOutput[7].im = 0;

	xor	eax, eax
	mov	ecx, 10720				; 000029e0H

; 30   :         pcOutput[21].re = -OFDM_ONE;

	mov	edx, -10720				; ffffffffffffd620H
	mov	WORD PTR [r11+30], ax

; 31   :         pcOutput[21].im = 0;

	mov	WORD PTR [r11+86], ax

; 32   :         pcOutput[64 - 7].re = OFDM_ONE;
; 33   :         pcOutput[64 - 7].im = 0;

	mov	WORD PTR [r11+230], ax

; 34   :         pcOutput[64 - 21].re = OFDM_ONE;
; 35   :         pcOutput[64 - 21].im = 0;

	mov	WORD PTR [r11+174], ax
	test	r8b, r8b
	jne	SHORT $LN2@AddPilot
	mov	WORD PTR [r11+28], cx
	mov	WORD PTR [r11+84], dx
	mov	WORD PTR [r11+228], cx
	mov	WORD PTR [r11+172], cx

; 46   :         pcOutput[64 - 21].im = 0;
; 47   :     }
; 48   : }

	ret	0
$LN2@AddPilot:

; 36   :     }
; 37   :     else
; 38   :     {        
; 39   :         pcOutput[7].re = -OFDM_ONE;

	mov	WORD PTR [r11+28], dx

; 40   :         pcOutput[7].im = 0;
; 41   :         pcOutput[21].re = OFDM_ONE;

	mov	WORD PTR [r11+84], cx

; 42   :         pcOutput[21].im = 0;
; 43   :         pcOutput[64 - 7].re = -OFDM_ONE;

	mov	WORD PTR [r11+228], dx

; 44   :         pcOutput[64 - 7].im = 0;
; 45   :         pcOutput[64 - 21].re = -OFDM_ONE;

	mov	WORD PTR [r11+172], dx

; 46   :         pcOutput[64 - 21].im = 0;
; 47   :     }
; 48   : }

	ret	0
?AddPilot@@YAXPEAU_COMPLEX16@@0E@Z ENDP			; AddPilot
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ainterleave.h
_TEXT	ENDS
;	COMDAT ?InterleaveBPSK@@YAXPEBDPEAD@Z
_TEXT	SEGMENT
pbInput$ = 8
pbOutput$ = 16
?InterleaveBPSK@@YAXPEBDPEAD@Z PROC			; InterleaveBPSK, COMDAT

; 9    :     const unsigned short * pusInterleaveMask
; 10   :         = INTERLEAVE_6M((unsigned char)(pbInput[0]));

	movzx	eax, BYTE PTR [rcx]
	mov	r10, rcx
	lea	r8d, DWORD PTR [rax+rax*2]
	add	r8d, r8d
	movsxd	r9, r8d
	lea	r8, OFFSET FLAT:INTERLEAVE_6M_LUT

; 11   :     unsigned int j;
; 12   : 
; 13   :     *(unsigned short *)(pbOutput) = pusInterleaveMask[0];

	movzx	eax, WORD PTR [r8+r9*2]
	mov	WORD PTR [rdx], ax

; 14   :     *(unsigned short *)(pbOutput + 2) = pusInterleaveMask[1];

	movzx	eax, WORD PTR [r8+r9*2+2]
	mov	WORD PTR [rdx+2], ax

; 15   :     *(unsigned short *)(pbOutput + 4) = pusInterleaveMask[2];

	movzx	eax, WORD PTR [r8+r9*2+4]
	mov	WORD PTR [rdx+4], ax

; 16   : 
; 17   :     for (j = 1; j < 6; j++)
; 18   :     {
; 19   :         pusInterleaveMask 
; 20   :             = INTERLEAVE_6M((j << 8) + (unsigned char)(pbInput[j]));

	movzx	eax, BYTE PTR [rcx+1]
	lea	eax, DWORD PTR [rax+rax*2+768]
	add	eax, eax
	mov	ecx, eax

; 21   : 
; 22   :         *(unsigned short *)(pbOutput) |= pusInterleaveMask[0];

	movzx	eax, WORD PTR [r8+rax*2]
	or	WORD PTR [rdx], ax

; 23   :         *(unsigned short *)(pbOutput + 2) |= pusInterleaveMask[1];

	movzx	eax, WORD PTR [r8+rcx*2+2]
	or	WORD PTR [rdx+2], ax

; 24   :         *(unsigned short *)(pbOutput + 4) |= pusInterleaveMask[2];

	movzx	eax, WORD PTR [r8+rcx*2+4]
	or	WORD PTR [rdx+4], ax
	movzx	eax, BYTE PTR [r10+2]
	lea	eax, DWORD PTR [rax+rax*2+1536]
	add	eax, eax
	mov	ecx, eax
	movzx	eax, WORD PTR [r8+rax*2]
	or	WORD PTR [rdx], ax
	movzx	eax, WORD PTR [r8+rcx*2+2]
	or	WORD PTR [rdx+2], ax
	movzx	eax, WORD PTR [r8+rcx*2+4]
	or	WORD PTR [rdx+4], ax
	movzx	eax, BYTE PTR [r10+3]
	lea	eax, DWORD PTR [rax+rax*2+2304]
	add	eax, eax
	mov	ecx, eax
	movzx	eax, WORD PTR [r8+rax*2]
	or	WORD PTR [rdx], ax
	movzx	eax, WORD PTR [r8+rcx*2+2]
	or	WORD PTR [rdx+2], ax
	movzx	eax, WORD PTR [r8+rcx*2+4]
	or	WORD PTR [rdx+4], ax
	movzx	eax, BYTE PTR [r10+4]
	lea	eax, DWORD PTR [rax+rax*2+3072]
	add	eax, eax
	mov	ecx, eax
	movzx	eax, WORD PTR [r8+rax*2]
	or	WORD PTR [rdx], ax
	movzx	eax, WORD PTR [r8+rcx*2+2]
	or	WORD PTR [rdx+2], ax
	movzx	eax, WORD PTR [r8+rcx*2+4]
	or	WORD PTR [rdx+4], ax
	movzx	eax, BYTE PTR [r10+5]
	lea	eax, DWORD PTR [rax+rax*2+3840]
	add	eax, eax
	mov	ecx, eax
	movzx	eax, WORD PTR [r8+rax*2]
	or	WORD PTR [rdx], ax
	movzx	eax, WORD PTR [r8+rcx*2+2]
	or	WORD PTR [rdx+2], ax
	movzx	eax, WORD PTR [r8+rcx*2+4]
	or	WORD PTR [rdx+4], ax

; 25   :     }
; 26   : }

	ret	0
?InterleaveBPSK@@YAXPEBDPEAD@Z ENDP			; InterleaveBPSK
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\amap.h
_TEXT	ENDS
;	COMDAT ?MapBPSK_11a@@YAXPEADPEAU_COMPLEX16@@@Z
_TEXT	SEGMENT
pbInput$ = 8
pcOutput$ = 16
?MapBPSK_11a@@YAXPEADPEAU_COMPLEX16@@@Z PROC		; MapBPSK_11a, COMDAT

; 10   :     unsigned int i;
; 11   :     const COMPLEX16 * pvLUT;
; 12   : 
; 13   :     for (i = 0; i < 6; i++)
; 14   :     {
; 15   :         pvLUT = MAPA_BPSK((unsigned char)(pbInput[i]));

	movzx	eax, BYTE PTR [rcx]
	lea	r10, OFFSET FLAT:MAPA_BPSK_LUT
	mov	r9, rcx
	shl	eax, 3
	movsxd	r8, eax

; 16   :         memcpy(pcOutput, pvLUT, sizeof(COMPLEX16) * 8);

	mov	rax, QWORD PTR [r10+r8*4]
	mov	QWORD PTR [rdx], rax
	mov	rax, QWORD PTR [r10+r8*4+8]
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR [r10+r8*4+16]
	mov	QWORD PTR [rdx+16], rax
	mov	rax, QWORD PTR [r10+r8*4+24]
	mov	QWORD PTR [rdx+24], rax
	movzx	eax, BYTE PTR [rcx+1]
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR [rdx+32], rax
	mov	rax, QWORD PTR [r10+rcx*4+8]
	mov	QWORD PTR [rdx+40], rax
	mov	rax, QWORD PTR [r10+rcx*4+16]
	mov	QWORD PTR [rdx+48], rax
	mov	rax, QWORD PTR [r10+rcx*4+24]
	mov	QWORD PTR [rdx+56], rax
	movzx	eax, BYTE PTR [r9+2]
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR [rdx+64], rax
	mov	rax, QWORD PTR [r10+rcx*4+8]
	mov	QWORD PTR [rdx+72], rax
	mov	rax, QWORD PTR [r10+rcx*4+16]
	mov	QWORD PTR [rdx+80], rax
	mov	rax, QWORD PTR [r10+rcx*4+24]
	mov	QWORD PTR [rdx+88], rax
	movzx	eax, BYTE PTR [r9+3]
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR [rdx+96], rax
	mov	rax, QWORD PTR [r10+rcx*4+8]
	mov	QWORD PTR [rdx+104], rax
	mov	rax, QWORD PTR [r10+rcx*4+16]
	mov	QWORD PTR [rdx+112], rax
	mov	rax, QWORD PTR [r10+rcx*4+24]
	mov	QWORD PTR [rdx+120], rax
	movzx	eax, BYTE PTR [r9+4]
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR [rdx+128], rax
	mov	rax, QWORD PTR [r10+rcx*4+8]
	mov	QWORD PTR [rdx+136], rax
	mov	rax, QWORD PTR [r10+rcx*4+16]
	mov	QWORD PTR [rdx+144], rax
	mov	rax, QWORD PTR [r10+rcx*4+24]
	mov	QWORD PTR [rdx+152], rax
	movzx	eax, BYTE PTR [r9+5]
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR [r10+rcx*4]
	mov	QWORD PTR [rdx+160], rax
	mov	rax, QWORD PTR [r10+rcx*4+8]
	mov	QWORD PTR [rdx+168], rax
	mov	rax, QWORD PTR [r10+rcx*4+16]
	mov	QWORD PTR [rdx+176], rax
	mov	rax, QWORD PTR [r10+rcx*4+24]
	mov	QWORD PTR [rdx+184], rax

; 17   :         pcOutput += 8;
; 18   :     }
; 19   : }

	ret	0
?MapBPSK_11a@@YAXPEADPEAU_COMPLEX16@@@Z ENDP		; MapBPSK_11a
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_lut_twiddle.h
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0IA@$02@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0IA@$02@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<128,3>, COMDAT

; 61599: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<128, 3>() { return (vcs*)wFFTLUT128_3; }

	lea	rax, OFFSET FLAT:?wFFTLUT128_3@@3QBU_COMPLEX16@@B ; wFFTLUT128_3
	ret	0
??$FFT_GetTwiddleConst@$0IA@$02@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<128,3>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0IA@$01@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0IA@$01@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<128,2>, COMDAT

; 61598: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<128, 2>() { return (vcs*)wFFTLUT128_2; }

	lea	rax, OFFSET FLAT:?wFFTLUT128_2@@3QBU_COMPLEX16@@B ; wFFTLUT128_2
	ret	0
??$FFT_GetTwiddleConst@$0IA@$01@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<128,2>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0IA@$00@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0IA@$00@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<128,1>, COMDAT

; 61597: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<128, 1>() { return (vcs*)wFFTLUT128_1; }

	lea	rax, OFFSET FLAT:?wFFTLUT128_1@@3QBU_COMPLEX16@@B ; wFFTLUT128_1
	ret	0
??$FFT_GetTwiddleConst@$0IA@$00@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<128,1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0CA@$02@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0CA@$02@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<32,3>, COMDAT

; 61593: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<32, 3>() { return (vcs*)wFFTLUT32_3; }

	lea	rax, OFFSET FLAT:?wFFTLUT32_3@@3QBU_COMPLEX16@@B ; wFFTLUT32_3
	ret	0
??$FFT_GetTwiddleConst@$0CA@$02@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<32,3>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0CA@$01@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0CA@$01@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<32,2>, COMDAT

; 61592: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<32, 2>() { return (vcs*)wFFTLUT32_2; }

	lea	rax, OFFSET FLAT:?wFFTLUT32_2@@3QBU_COMPLEX16@@B ; wFFTLUT32_2
	ret	0
??$FFT_GetTwiddleConst@$0CA@$01@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<32,2>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0CA@$00@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0CA@$00@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<32,1>, COMDAT

; 61591: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<32, 1>() { return (vcs*)wFFTLUT32_1; }

	lea	rax, OFFSET FLAT:?wFFTLUT32_1@@3QBU_COMPLEX16@@B ; wFFTLUT32_1
	ret	0
??$FFT_GetTwiddleConst@$0CA@$00@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<32,1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$07$00@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$07$00@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<8,1>, COMDAT

; 61587: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<8, 1>() { return (vcs*)wFFTLUT8; }

	lea	rax, OFFSET FLAT:?wFFTLUT8@@3QBU_COMPLEX16@@B ; wFFTLUT8
	ret	0
??$FFT_GetTwiddleConst@$07$00@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<8,1>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_lut_bitreversal.h
_TEXT	ENDS
;	COMDAT ??$FFTLUTMapTable@$0IA@@@YAFH@Z
_TEXT	SEGMENT
i$ = 8
??$FFTLUTMapTable@$0IA@@@YAFH@Z PROC			; FFTLUTMapTable<128>, COMDAT

; 65585: template<> DSP_INLINE short FFTLUTMapTable<128>(int i) { return FFT128LUTMap[i]; }

	movsxd	rax, ecx
	lea	rcx, OFFSET FLAT:?FFT128LUTMap@@3QBFB	; FFT128LUTMap
	mov	ax, WORD PTR [rcx+rax*2]
	ret	0
??$FFTLUTMapTable@$0IA@@@YAFH@Z ENDP			; FFTLUTMapTable<128>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ??Bvq@@QEBAAEBT__m128i@@XZ
_TEXT	SEGMENT
this$ = 8
??Bvq@@QEBAAEBT__m128i@@XZ PROC				; vq::operator __m128i const & __ptr64, COMDAT

; 121  : PVECTOR_STRUCT(vq,   __m128i, __int64,          16);

	mov	rax, rcx
	ret	0
??Bvq@@QEBAAEBT__m128i@@XZ ENDP				; vq::operator __m128i const & __ptr64
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Bvq@@QEAAAEAT__m128i@@XZ
_TEXT	SEGMENT
this$ = 8
??Bvq@@QEAAAEAT__m128i@@XZ PROC				; vq::operator __m128i & __ptr64, COMDAT

; 121  : PVECTOR_STRUCT(vq,   __m128i, __int64,          16);

	mov	rax, rcx
	ret	0
??Bvq@@QEAAAEAT__m128i@@XZ ENDP				; vq::operator __m128i & __ptr64
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4vq@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??4vq@@QEAAAEAU0@AEBU0@@Z PROC				; vq::operator=, COMDAT

; 121  : PVECTOR_STRUCT(vq,   __m128i, __int64,          16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??4vq@@QEAAAEAU0@AEBU0@@Z ENDP				; vq::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0vq@@QEAA@T__m128i@@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0vq@@QEAA@T__m128i@@@Z PROC				; vq::vq, COMDAT

; 121  : PVECTOR_STRUCT(vq,   __m128i, __int64,          16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??0vq@@QEAA@T__m128i@@@Z ENDP				; vq::vq
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0vq@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0vq@@QEAA@XZ PROC					; vq::vq, COMDAT

; 121  : PVECTOR_STRUCT(vq,   __m128i, __int64,          16);

	mov	rax, rcx
	ret	0
??0vq@@QEAA@XZ ENDP					; vq::vq
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Bvi@@QEAAAEAT__m128i@@XZ
_TEXT	SEGMENT
this$ = 8
??Bvi@@QEAAAEAT__m128i@@XZ PROC				; vi::operator __m128i & __ptr64, COMDAT

; 119  : PVECTOR_STRUCT(vi,   __m128i, __int32,          16);

	mov	rax, rcx
	ret	0
??Bvi@@QEAAAEAT__m128i@@XZ ENDP				; vi::operator __m128i & __ptr64
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??Bvub@@QEBAAEBT__m128i@@XZ
_TEXT	SEGMENT
this$ = 8
??Bvub@@QEBAAEBT__m128i@@XZ PROC			; vub::operator __m128i const & __ptr64, COMDAT

; 116  : PVECTOR_STRUCT(vub,  __m128i, unsigned __int8,  16);

	mov	rax, rcx
	ret	0
??Bvub@@QEBAAEBT__m128i@@XZ ENDP			; vub::operator __m128i const & __ptr64
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0vub@@QEAA@AEAY0BA@$$CBE@Z
_TEXT	SEGMENT
this$ = 8
pa$ = 16
??0vub@@QEAA@AEAY0BA@$$CBE@Z PROC			; vub::vub, COMDAT

; 116  : PVECTOR_STRUCT(vub,  __m128i, unsigned __int8,  16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??0vub@@QEAA@AEAY0BA@$$CBE@Z ENDP			; vub::vub
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\convenc.h
_TEXT	ENDS
;	COMDAT ?ConvEncodeReset@@YAXAEAE@Z
_TEXT	SEGMENT
bConvEncoderReg$ = 8
?ConvEncodeReset@@YAXAEAE@Z PROC			; ConvEncodeReset, COMDAT

; 149  :     bConvEncoderReg = 0;

	mov	BYTE PTR [rcx], 0

; 150  : }

	ret	0
?ConvEncodeReset@@YAXAEAE@Z ENDP			; ConvEncodeReset
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z DD imagerel $LN8
	DD	imagerel $LN8+12
	DD	imagerel $unwind$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z DD imagerel $LN8+12
	DD	imagerel $LN8+82
	DD	imagerel $chain$0$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z DD imagerel $LN8+82
	DD	imagerel $LN8+87
	DD	imagerel $chain$1$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+12
	DD	imagerel $unwind$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z DD 020421H
	DD	03404H
	DD	imagerel $LN8
	DD	imagerel $LN8+12
	DD	imagerel $unwind$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ConvEncode_1_2@@YAXPEAD0IAEAE@Z DD 010401H
	DD	0204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?ConvEncode_1_2@@YAXPEAD0IAEAE@Z
_TEXT	SEGMENT
pbInput$ = 16
pbOutput$ = 24
uiSize$ = 32
bConvEncoderReg$ = 40
?ConvEncode_1_2@@YAXPEAD0IAEAE@Z PROC			; ConvEncode_1_2, COMDAT

; 8    : {

$LN8:
	sub	rsp, 8
	mov	r10, rdx

; 9    :     unsigned int i;
; 10   :     unsigned char c;
; 11   :     for (i = 0; i < uiSize; i++)

	test	r8d, r8d
	je	SHORT $LN1@ConvEncode@3
	mov	QWORD PTR [rsp], rbx
	mov	r11d, r8d
	lea	rbx, OFFSET FLAT:CONV_ENCODER_1_2_LUT
	npad	6
$LL3@ConvEncode@3:

; 12   :     {
; 13   :         c = (unsigned char)(pbInput[i]);

	movzx	r8d, BYTE PTR [rcx]

; 14   : 
; 15   :         *(unsigned short *)(pbOutput) = 
; 16   :             *(CONV_ENCODER_1_2( (bConvEncoderReg << 8) | c ));

	movzx	eax, BYTE PTR [r9]

; 17   : 
; 18   :         /*
; 19   :         KdPrint(("%02x %02x : %02x %02x \n", 
; 20   :         bConvEncoderReg,
; 21   :         c,
; 22   :         (unsigned char)(pbOutput[0]), 
; 23   :         (unsigned char)(pbOutput[1])));
; 24   :         */
; 25   : 
; 26   :         bConvEncoderReg = c >> 2;
; 27   :         pbOutput += 2;

	add	r10, 2
	shl	eax, 8
	inc	rcx
	movsxd	rdx, eax
	or	rdx, r8
	shr	r8b, 2
	sub	r11, 1
	movzx	eax, WORD PTR [rbx+rdx*2]
	mov	WORD PTR [r10-2], ax
	mov	BYTE PTR [r9], r8b
	jne	SHORT $LL3@ConvEncode@3
	mov	rbx, QWORD PTR [rsp]
$LN1@ConvEncode@3:

; 28   :     }
; 29   : }

	add	rsp, 8
	ret	0
?ConvEncode_1_2@@YAXPEAD0IAEAE@Z ENDP			; ConvEncode_1_2
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
;	COMDAT ??$?0Uvq@@@vcs@@QEAA@AEBUvq@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvq@@@vcs@@QEAA@AEBUvq@@@Z PROC			; vcs::vcs<vq>, COMDAT

; 125  : PVECTOR_STRUCT(vcs,  __m128i, COMPLEX16,        16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvq@@@vcs@@QEAA@AEBUvq@@@Z ENDP			; vcs::vcs<vq>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvi@@@vcs@@QEAA@AEBUvi@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvi@@@vcs@@QEAA@AEBUvi@@@Z PROC			; vcs::vcs<vi>, COMDAT

; 125  : PVECTOR_STRUCT(vcs,  __m128i, COMPLEX16,        16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvi@@@vcs@@QEAA@AEBUvi@@@Z ENDP			; vcs::vcs<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvub@@@vi@@QEAA@AEBUvub@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvub@@@vi@@QEAA@AEBUvub@@@Z PROC			; vi::vi<vub>, COMDAT

; 119  : PVECTOR_STRUCT(vi,   __m128i, __int32,          16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvub@@@vi@@QEAA@AEBUvub@@@Z ENDP			; vi::vi<vub>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$concat_extract@$07Uvs@@@@YA?AUvs@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
??$concat_extract@$07Uvs@@@@YA?AUvs@@AEBU0@0@Z PROC	; concat_extract<8,vs>, COMDAT

; 481  : DSP_INLINE T concat_extract(const T& a, const T& b) { return (T)_mm_alignr_epi8(a, b, nbytes); }

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	palignr	xmm0, XMMWORD PTR [r8], 8
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$concat_extract@$07Uvs@@@@YA?AUvs@@AEBU0@0@Z ENDP	; concat_extract<8,vs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$store@Uvcs@@@@YAXPEAXAEBUvcs@@@Z
_TEXT	SEGMENT
p$ = 8
a$ = 16
??$store@Uvcs@@@@YAXPEAXAEBUvcs@@@Z PROC		; store<vcs>, COMDAT

; 1042 : template <typename T> void DSP_INLINE store(void *p, const T& a) { _mm_storeu_si128((__m128i *)p, a); }

	movdqa	xmm0, XMMWORD PTR [rdx]
	movdqu	XMMWORD PTR [rcx], xmm0
	ret	0
??$store@Uvcs@@@@YAXPEAXAEBUvcs@@@Z ENDP		; store<vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$or@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$or@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z PROC	; or<vcs>, COMDAT

; 484  : DEFINE_TEMPLATE_OP_ARITHMETIC2(or, _mm_or_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	por	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$or@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z ENDP	; or<vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z PROC	; permutate<1,0,3,2>, COMDAT

; 592  : DEFINE_OP_PERMUTATION4(permutate, vcs, _mm_shuffle_epi32);

	pshufd	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z ENDP	; permutate<1,0,3,2>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$concat_extract@$0M@Uvcs@@@@YA?AUvcs@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
??$concat_extract@$0M@Uvcs@@@@YA?AUvcs@@AEBU0@0@Z PROC	; concat_extract<12,vcs>, COMDAT

; 481  : DSP_INLINE T concat_extract(const T& a, const T& b) { return (T)_mm_alignr_epi8(a, b, nbytes); }

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	palignr	xmm0, XMMWORD PTR [r8], 12
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$concat_extract@$0M@Uvcs@@@@YA?AUvcs@@AEBU0@0@Z ENDP	; concat_extract<12,vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$store_nt@Uvb@@@@YAXPEAUvb@@AEBU0@@Z
_TEXT	SEGMENT
p$ = 8
a$ = 16
??$store_nt@Uvb@@@@YAXPEAUvb@@AEBU0@@Z PROC		; store_nt<vb>, COMDAT

; 1039 : template <typename T> void DSP_INLINE store_nt(T *p, const T& a) { _mm_stream_si128((__m128i *)p, a); }

	movdqa	xmm0, XMMWORD PTR [rdx]
	movntdq	XMMWORD PTR [rcx], xmm0
	ret	0
??$store_nt@Uvb@@@@YAXPEAUvb@@AEBU0@@Z ENDP		; store_nt<vb>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$and@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$and@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z PROC	; and<vcs>, COMDAT

; 488  : DEFINE_TEMPLATE_OP_ARITHMETIC2(and, _mm_and_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pand	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$and@Uvcs@@@@YA?AUvcs@@AEBU0@0PEAT__m128i@@@Z ENDP	; and<vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate@$0MI@@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate@$0MI@@@YA?AUvcs@@AEBU0@@Z PROC		; permutate<200>, COMDAT

; 592  : DEFINE_OP_PERMUTATION4(permutate, vcs, _mm_shuffle_epi32);

	pshufd	xmm0, XMMWORD PTR [rdx], 200		; 000000c8H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate@$0MI@@@YA?AUvcs@@AEBU0@@Z ENDP		; permutate<200>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate_high@$0LE@@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate_high@$0LE@@@YA?AUvcs@@AEBU0@@Z PROC	; permutate_high<180>, COMDAT

; 587  : DEFINE_OP_PERMUTATION4(permutate_high, vcs, _mm_shufflehi_epi16);

	pshufhw	xmm0, XMMWORD PTR [rdx], 180		; 000000b4H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate_high@$0LE@@@YA?AUvcs@@AEBU0@@Z ENDP	; permutate_high<180>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__0xFFFF0000000000000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD imagerel $LN17
	DD	imagerel $LN17+30
	DD	imagerel $unwind$??$__0xFFFF0000000000000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__0xFFFF0000000000000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$__0xFFFF0000000000000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
_TEXT	SEGMENT
t$134776 = 0
__$ReturnUdt$ = 32
??$__0xFFFF0000000000000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ PROC ; vector128_consts::__0xFFFF0000000000000000000000000000<vcs>, COMDAT

; 222  :     {

$LN17:
	sub	rsp, 24

; 223  :         vq t;
; 224  :         set_all_bits(t);

	movdqa	xmm0, XMMWORD PTR t$134776[rsp]

; 225  :         // Shift left by 15 bytes
; 226  :         t = (vq)_mm_slli_si128(t, 14);
; 227  :         return (T)t;

	mov	rax, rcx
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 14
	movdqa	XMMWORD PTR [rcx], xmm0

; 228  :     }

	add	rsp, 24
	ret	0
??$__0xFFFF0000000000000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ENDP ; vector128_consts::__0xFFFF0000000000000000000000000000<vcs>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__0xFFFFFFFFFFFFFFFF0000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD imagerel $LN17
	DD	imagerel $LN17+30
	DD	imagerel $unwind$??$__0xFFFFFFFFFFFFFFFF0000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__0xFFFFFFFFFFFFFFFF0000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$__0xFFFFFFFFFFFFFFFF0000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
_TEXT	SEGMENT
t$134821 = 0
__$ReturnUdt$ = 32
??$__0xFFFFFFFFFFFFFFFF0000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ PROC ; vector128_consts::__0xFFFFFFFFFFFFFFFF0000000000000000<vcs>, COMDAT

; 201  :     {

$LN17:
	sub	rsp, 24

; 202  :         vq t;
; 203  :         set_all_bits(t);

	movdqa	xmm0, XMMWORD PTR t$134821[rsp]

; 204  :         // Shift left by 8 bytes
; 205  :         t = (vq)_mm_slli_si128(t, 8);
; 206  :         return (T)t;

	mov	rax, rcx
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 8
	movdqa	XMMWORD PTR [rcx], xmm0

; 207  :     }

	add	rsp, 24
	ret	0
??$__0xFFFFFFFFFFFFFFFF0000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ENDP ; vector128_consts::__0xFFFFFFFFFFFFFFFF0000000000000000<vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvub@@@vcs@@QEAA@AEBUvub@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvub@@@vcs@@QEAA@AEBUvub@@@Z PROC			; vcs::vcs<vub>, COMDAT

; 125  : PVECTOR_STRUCT(vcs,  __m128i, COMPLEX16,        16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvub@@@vcs@@QEAA@AEBUvub@@@Z ENDP			; vcs::vcs<vub>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
_TEXT	SEGMENT
__$ReturnUdt$ = 8
??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ PROC ; vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vcs>, COMDAT

; 171  :         const static vub::data_type value =
; 172  :         {
; 173  :             0xFF, 0xFF, 0x00, 0x00,
; 174  :             0xFF, 0xFF, 0x00, 0x00,
; 175  :             0xFF, 0xFF, 0x00, 0x00,
; 176  :             0xFF, 0xFF, 0x00, 0x00
; 177  :         };
; 178  :         return T(vub(value));

	movdqa	xmm0, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0

; 179  :     }

	ret	0
??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ENDP ; vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate_high@$0LB@@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate_high@$0LB@@@YA?AUvcs@@AEBU0@@Z PROC	; permutate_high<177>, COMDAT

; 587  : DEFINE_OP_PERMUTATION4(permutate_high, vcs, _mm_shufflehi_epi16);

	pshufhw	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate_high@$0LB@@@YA?AUvcs@@AEBU0@@Z ENDP	; permutate_high<177>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate_low@$0LB@@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate_low@$0LB@@@YA?AUvcs@@AEBU0@@Z PROC		; permutate_low<177>, COMDAT

; 581  : DEFINE_OP_PERMUTATION4(permutate_low, vcs, _mm_shufflelo_epi16);

	pshuflw	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate_low@$0LB@@@YA?AUvcs@@AEBU0@@Z ENDP		; permutate_low<177>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvi@@@vs@@QEAA@AEBUvi@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvi@@@vs@@QEAA@AEBUvi@@@Z PROC			; vs::vs<vi>, COMDAT

; 117  : PVECTOR_STRUCT(vs,   __m128i, __int16,          16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvi@@@vs@@QEAA@AEBUvi@@@Z ENDP			; vs::vs<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$or@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$or@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z PROC	; or<vi>, COMDAT

; 484  : DEFINE_TEMPLATE_OP_ARITHMETIC2(or, _mm_or_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	por	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$or@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z ENDP	; or<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$and@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$and@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z PROC	; and<vi>, COMDAT

; 488  : DEFINE_TEMPLATE_OP_ARITHMETIC2(and, _mm_and_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pand	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$and@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z ENDP	; and<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ
_TEXT	SEGMENT
__$ReturnUdt$ = 8
??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ PROC ; vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vi>, COMDAT

; 171  :         const static vub::data_type value =
; 172  :         {
; 173  :             0xFF, 0xFF, 0x00, 0x00,
; 174  :             0xFF, 0xFF, 0x00, 0x00,
; 175  :             0xFF, 0xFF, 0x00, 0x00,
; 176  :             0xFF, 0xFF, 0x00, 0x00
; 177  :         };
; 178  :         return T(vub(value));

	movdqa	xmm0, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0

; 179  :     }

	ret	0
??$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ ENDP ; vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$mul_shift@$0P@@@YA?AUvs@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
??$mul_shift@$0P@@@YA?AUvs@@AEBU0@0@Z PROC		; mul_shift<15>, COMDAT

; 944  :     return (vs)_mm_mulhrs_epi16(a, b);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pmulhrsw xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0

; 945  : }

	ret	0
??$mul_shift@$0P@@@YA?AUvs@@AEBU0@0@Z ENDP		; mul_shift<15>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?flip@@YA?AUvcs@@AEBU1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
?flip@@YA?AUvcs@@AEBU1@@Z PROC				; flip, COMDAT

; 849  :     vcs b = permutate_low<0xb1>(a);

	pshuflw	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H

; 850  :     return permutate_high<0xb1>(b);

	mov	rax, rcx
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	movdqa	XMMWORD PTR [rcx], xmm1

; 851  : }

	ret	0
?flip@@YA?AUvcs@@AEBU1@@Z ENDP				; flip
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?shift_left@@YA?AUvi@@AEBU1@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
nbits$ = 24
?shift_left@@YA?AUvi@@AEBU1@H@Z PROC			; shift_left, COMDAT

; 692  : DEFINE_OP_SHIFT_LEFT(shift_left, vi, _mm_slli_epi32);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pslld	xmm0, 16
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?shift_left@@YA?AUvi@@AEBU1@H@Z ENDP			; shift_left
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?saturated_sub@@YA?AUvcs@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?saturated_sub@@YA?AUvcs@@AEBU1@0@Z PROC		; saturated_sub, COMDAT

; 559  : DEFINE_OP_ARITHMETIC2(saturated_sub, vcs, _mm_subs_epi16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	psubsw	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?saturated_sub@@YA?AUvcs@@AEBU1@0@Z ENDP		; saturated_sub
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?saturated_add@@YA?AUvcs@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?saturated_add@@YA?AUvcs@@AEBU1@0@Z PROC		; saturated_add, COMDAT

; 549  : DEFINE_OP_ARITHMETIC2(saturated_add, vcs, _mm_adds_epi16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	paddsw	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?saturated_add@@YA?AUvcs@@AEBU1@0@Z ENDP		; saturated_add
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sign@@YA?AUvcs@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?sign@@YA?AUvcs@@AEBU1@0@Z PROC				; sign, COMDAT

; 464  : DEFINE_OP_ARITHMETIC2(sign, vcs, _mm_sign_epi16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	psignw	xmm0, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?sign@@YA?AUvcs@@AEBU1@0@Z ENDP				; sign
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__0xFFFF0000FFFF00000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD imagerel $LN25
	DD	imagerel $LN25+35
	DD	imagerel $unwind$??$__0xFFFF0000FFFF00000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__0xFFFF0000FFFF00000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$__0xFFFF0000FFFF00000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
_TEXT	SEGMENT
t$164216 = 0
__$ReturnUdt$ = 32
??$__0xFFFF0000FFFF00000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ PROC ; vector128_consts::__0xFFFF0000FFFF00000000000000000000<vcs>, COMDAT

; 211  :     {

$LN25:
	sub	rsp, 24

; 212  :         vi t;
; 213  :         set_all_bits(t);

	movdqa	xmm0, XMMWORD PTR t$164216[rsp]

; 214  :         // Shift left by 8 bytes
; 215  :         t = (vi)_mm_slli_si128(t, 8);
; 216  :         t = shift_left(t, 16);
; 217  :         return (T)t;

	mov	rax, rcx
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 8
	pslld	xmm0, 16
	movdqa	XMMWORD PTR [rcx], xmm0

; 218  :     }

	add	rsp, 24
	ret	0
??$__0xFFFF0000FFFF00000000000000000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ENDP ; vector128_consts::__0xFFFF0000FFFF00000000000000000000<vcs>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
_TEXT	ENDS
;	COMDAT ?Window@@YAXPEAU_COMPLEX16@@0@Z
_TEXT	SEGMENT
pcSymbol$ = 8
pcLast$ = 16
?Window@@YAXPEAU_COMPLEX16@@0@Z PROC			; Window, COMDAT

; 23   :     pcSymbol[0].re >>= 2;

	sar	WORD PTR [rcx], 2

; 24   :     pcSymbol[0].im >>= 2;

	sar	WORD PTR [rcx+2], 2

; 25   :     pcSymbol[1].re >>= 1;

	sar	WORD PTR [rcx+4], 1

; 26   :     pcSymbol[1].im >>= 1;

	sar	WORD PTR [rcx+6], 1

; 27   :     pcSymbol[2].re -= pcSymbol[2].re >> 2;

	movzx	r8d, WORD PTR [rcx+8]
	mov	r9, rcx
	movzx	eax, r8w
	sar	ax, 2
	sub	r8w, ax
	mov	WORD PTR [rcx+8], r8w

; 28   :     pcSymbol[2].im -= pcSymbol[2].im >> 2;

	movzx	ecx, WORD PTR [rcx+10]
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [r9+10], cx

; 29   : 
; 30   :     *(vcs*)pcSymbol = saturated_add(*(vcs*)pcSymbol, *(vcs*)pcLast);
; 31   : 
; 32   :     pcSymbol[0].re += pcLast->re;
; 33   :     pcSymbol[0].im += pcLast->im;
; 34   : 
; 35   :     pcLast[0].re = pcSymbol[32].re - (pcSymbol[32].re >> 2);

	movzx	ecx, WORD PTR [r9+128]
	movdqa	xmm0, XMMWORD PTR [r9]
	paddsw	xmm0, XMMWORD PTR [rdx]
	movdqa	XMMWORD PTR [r9], xmm0
	movzx	eax, WORD PTR [rdx]
	add	WORD PTR [r9], ax
	movzx	eax, WORD PTR [rdx+2]
	add	WORD PTR [r9+2], ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rdx], cx

; 36   :     pcLast[0].im = pcSymbol[32].im - (pcSymbol[32].im >> 2);

	movzx	ecx, WORD PTR [r9+130]
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rdx+2], cx

; 37   : 
; 38   :     pcLast[1].re = pcSymbol[33].re >> 1;

	movzx	eax, WORD PTR [r9+132]
	sar	ax, 1
	mov	WORD PTR [rdx+4], ax

; 39   :     pcLast[1].im = pcSymbol[33].im >> 1;

	movzx	eax, WORD PTR [r9+134]
	sar	ax, 1
	mov	WORD PTR [rdx+6], ax

; 40   : 
; 41   :     pcLast[2].re = pcSymbol[34].re >> 2;

	movzx	eax, WORD PTR [r9+136]
	sar	ax, 2
	mov	WORD PTR [rdx+8], ax

; 42   :     pcLast[2].im = pcSymbol[34].im >> 2;

	movzx	eax, WORD PTR [r9+138]
	sar	ax, 2
	mov	WORD PTR [rdx+10], ax

; 43   :     
; 44   :     pcLast[3].re = 0;

	xor	eax, eax
	mov	WORD PTR [rdx+12], ax

; 45   :     pcLast[3].im = 0;

	mov	WORD PTR [rdx+14], ax

; 46   : }

	ret	0
?Window@@YAXPEAU_COMPLEX16@@0@Z ENDP			; Window
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\upsample.h
_TEXT	ENDS
;	COMDAT ?compute_4@@YAXAEAUvcs@@AEAUvs@@0PEBU2@2H@Z
_TEXT	SEGMENT
r$ = 8
vin$ = 16
resi$ = 24
c_r0$ = 32
c_r1$ = 40
c_idx$ = 48
?compute_4@@YAXAEAUvcs@@AEAUvs@@0PEBU2@2H@Z PROC	; compute_4, COMDAT

; 48   : 	vcs xx1, xx2, xx3, yy1, yy2;
; 49   : 	
; 50   :     vs vins = vin;

	movaps	xmm2, XMMWORD PTR [rdx]

; 51   : 	xx1 = (vcs) mul_shift<15> ( vins, c_r0[c_idx] );
; 52   : 	xx3 = resi; resi = xx1;

	movdqa	xmm0, XMMWORD PTR [r8]
	movsxd	rax, DWORD PTR c_idx$[rsp]
	lea	rdx, OFFSET FLAT:__ImageBase
	add	rax, rax
	movdqa	xmm1, xmm2
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA[rdx+rax*8]
	movdqa	XMMWORD PTR [r8], xmm1

; 53   : 	xx1 = concat_extract<12> ( xx1, xx3 ); // aligned
; 54   : 	xx2 = permutate<1,0,3,2> (xx1);
; 55   : 	yy1 = add (xx1, xx2); // sample 0 and 2
; 56   : 	yy1 = and (yy1, (vcs) _ODD_MASK );	
; 57   : 	xx1 = (vcs) mul_shift<15> ( vins, c_r1[c_idx] );

	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA[rdx+rax*8]
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0

; 58   : 	xx2 = permutate<1,0,3,2> (xx1);

	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B

; 59   : 	yy2 = add (xx1, xx2); // sample 1 and 3

	paddw	xmm2, xmm0

; 60   : 	yy2 = and (yy2, (vcs) _EVEN_MASK );

	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B

; 61   : 	r = or (yy1, yy2);

	por	xmm1, xmm2
	movdqa	XMMWORD PTR [rcx], xmm1

; 62   : }

	ret	0
?compute_4@@YAXAEAUvcs@@AEAUvs@@0PEBU2@2H@Z ENDP	; compute_4
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\copynt.h
_TEXT	ENDS
;	COMDAT ?Pack_NT@@YAXPEAUvb@@AEBUvs@@1H@Z
_TEXT	SEGMENT
out$ = 8
a$ = 16
b$ = 24
nbits$ = 32
?Pack_NT@@YAXPEAUvb@@AEBUvs@@1H@Z PROC			; Pack_NT, COMDAT

; 8    :     if (nbits == 0)
; 9    :         // The branch is only to optimize compiler code generation, ie. remove shift_right instructions
; 10   :         store_nt(out, saturated_pack(a, b));
; 11   :     else
; 12   :         store_nt(out, saturated_pack(shift_right(a, nbits), shift_right(b, nbits)));

	movdqa	xmm1, XMMWORD PTR [rdx]
	movdqa	xmm0, XMMWORD PTR [r8]
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rcx], xmm1

; 13   : }

	ret	0
?Pack_NT@@YAXPEAUvb@@AEBUvs@@1H@Z ENDP			; Pack_NT
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ?mul_j@@YA?AUvcs@@AEBU1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
?mul_j@@YA?AUvcs@@AEBU1@@Z PROC				; mul_j, COMDAT

; 950  :     return xor(flip(a), vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vcs>());

	pshuflw	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H
	mov	rax, rcx
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pxor	xmm1, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB
	movdqa	XMMWORD PTR [rcx], xmm1

; 951  : }

	ret	0
?mul_j@@YA?AUvcs@@AEBU1@@Z ENDP				; mul_j
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?conjre@@YA?AUvcs@@AEBU1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
?conjre@@YA?AUvcs@@AEBU1@@Z PROC			; conjre, COMDAT

; 819  :     const static vub::data_type value =
; 820  :     {
; 821  :         0x00, 0x80, 0x01, 0x00,
; 822  :         0x00, 0x80, 0x01, 0x00,
; 823  :         0x00, 0x80, 0x01, 0x00,
; 824  :         0x00, 0x80, 0x01, 0x00,
; 825  :     };
; 826  :     return sign(a, (vcs&)value);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	psignw	xmm0, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	movdqa	XMMWORD PTR [rcx], xmm0

; 827  : }

	ret	0
?conjre@@YA?AUvcs@@AEBU1@@Z ENDP			; conjre
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?pack@@YA?AUvs@@AEBUvi@@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?pack@@YA?AUvs@@AEBUvi@@0@Z PROC			; pack, COMDAT

; 749  :     const vi xmm6 = vector128_consts::__0x0000FFFF0000FFFF0000FFFF0000FFFF<vi>();

	movdqa	xmm0, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB

; 750  :     vi ta = and(a, xmm6);
; 751  :     vi tb = and(b, xmm6);

	movdqa	xmm1, XMMWORD PTR [r8]
	movdqa	xmm2, XMMWORD PTR [rdx]

; 752  :     tb = shift_left(tb, 0x10);
; 753  :     return (vs)or(ta, tb);

	mov	rax, rcx
	pand	xmm1, xmm0
	pand	xmm2, xmm0
	pslld	xmm1, 16
	por	xmm2, xmm1
	movdqa	XMMWORD PTR [rcx], xmm2

; 754  : }

	ret	0
?pack@@YA?AUvs@@AEBUvi@@0@Z ENDP			; pack
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z DD imagerel ?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z
	DD	imagerel ?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z+1141
	DD	imagerel $unwind$?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z DD 031001H
	DD	016810H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\upsample.h
xdata	ENDS
;	COMDAT ?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z
_TEXT	SEGMENT
rr1$ = 0
pInput$ = 48
pOutput$ = 56
?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z PROC	; Upsample40MTo44M_160, COMDAT

; 86   : {

	sub	rsp, 40					; 00000028H

; 87   : 	const vs *  pvsi = (const vs*) pInput;
; 88   : 	COMPLEX16 * po = (COMPLEX16*) pOutput;
; 89   : 	
; 90   : 	const vs * pcoff1_r0 = (const vs*) g_coff1_row0;
; 91   : 	const vs * pcoff1_r1 = (const vs*) g_coff1_row1;
; 92   : 	
; 93   : 	// residule
; 94   : 	vcs resi;
; 95   :     set_zero (resi);
; 96   : 	
; 97   : 	vcs rr1;
; 98   : 	vs  vin, vin1;
; 99   : 
; 100  : 	int idx = 0;   // in vs
; 101  : 	int cnt = 160; // in samples
; 102  : 	while (true) {
; 103  : 		// compute 20 samples in a batch
; 104  : 		vin = pvsi[idx++];

	movdqa	xmm2, XMMWORD PTR [rcx]
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR [rsp+16], xmm6

; 105  : 		compute_4 ( rr1, vin, resi, pcoff1_r0, pcoff1_r1, 0 );
; 106  : 		store ( po, rr1 );
; 107  : 		po += 4;
; 108  : 
; 109  : 		vin = pvsi[idx++]; 
; 110  : 		compute_4 ( rr1, vin, resi, pcoff1_r0, pcoff1_r1, 1 );
; 111  : 		store ( po, rr1 );
; 112  : 		po += 4;
; 113  : 	
; 114  : 		vin = pvsi[idx++]; 
; 115  : 		compute_4 ( rr1, vin, resi, pcoff1_r0, pcoff1_r1, 2 );
; 116  : 		store ( po, rr1 );
; 117  : 		po += 3;
; 118  : 	
; 119  : 		vin1 = pvsi[idx++];
; 120  : 		vin  = concat_extract<8> (vin1, vin );
; 121  : 		compute_4 ( rr1, vin, resi, pcoff1_r0, pcoff1_r1, 0 );
; 122  : 		store ( po, rr1 );
; 123  : 		po += 4;
; 124  : 
; 125  : 		vin = vin1; vin1 = pvsi[idx++];
; 126  : 		vin  = concat_extract<8> (vin1, vin );
; 127  : 		compute_4 ( rr1, vin, resi, pcoff1_r0, pcoff1_r1, 1 );
; 128  : 		store ( po, rr1 );
; 129  : 		po += 4;
; 130  : 	
; 131  : 		vin = vin1; vin1 = pvsi[idx];

	lea	rax, QWORD PTR [rcx+80]
	add	rdx, 76					; 0000004cH
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm3, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx-76], xmm1
	movdqa	xmm2, XMMWORD PTR [rcx+16]
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	pmulhrsw xmm4, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx-60], xmm1
	movdqa	xmm3, XMMWORD PTR [rcx+32]
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pmulhrsw xmm5, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pand	xmm2, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm1, xmm0
	pand	xmm1, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rdx-44], xmm2
	movdqa	xmm4, XMMWORD PTR [rcx+48]
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm6, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx-32], xmm1
	movdqa	xmm3, XMMWORD PTR [rcx+64]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	pmulhrsw xmm4, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx-16], xmm1

; 132  : 		vin  = concat_extract<8> (vin1, vin );

	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8

; 133  : 		compute_4 ( rr1, vin, resi, pcoff1_r0, pcoff1_r1, 2 );

	movdqa	xmm5, xmm1
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	mov	r8d, 5
	pmulhrsw xmm5, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32

; 134  : 
; 135  : 		cnt -= 20;
; 136  :         if (cnt == 0) break;

	lea	r9d, QWORD PTR [r8+2]
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pand	xmm2, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm1, xmm0
	pand	xmm1, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm2, xmm1
	npad	11
$LL3@Upsample40:

; 137  :         store ( po, rr1 );

	movdqu	XMMWORD PTR [rdx], xmm2
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [r8+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm3, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rcx+rax*8]
	lea	rax, QWORD PTR [r8+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	pmulhrsw xmm4, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rcx+rax*8]
	lea	rax, QWORD PTR [r8+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pmulhrsw xmm5, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pand	xmm2, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm1, xmm0
	pand	xmm1, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rdx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rcx+rax*8]
	lea	rax, QWORD PTR [r8+4]
	add	rax, rax
	add	r8, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm6, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rcx+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	pmulhrsw xmm4, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	mov	rax, r8
	add	rdx, 88					; 00000058H
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	shl	rax, 4
	add	rax, rcx
	sub	r9, 1
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rdx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pmulhrsw xmm5, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pand	xmm2, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm1, xmm0
	pand	xmm1, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm2, xmm1
	jne	$LL3@Upsample40

; 138  : 		po += 3;
; 139  : 	}
; 140  : 
; 141  :     *po++ = rr1[0];
; 142  :     *po++ = rr1[1];
; 143  :     *po++ = rr1[2];
; 144  : }

	movaps	xmm6, XMMWORD PTR [rsp+16]
	movdqa	XMMWORD PTR rr1$[rsp], xmm2
	mov	eax, DWORD PTR rr1$[rsp]
	mov	DWORD PTR [rdx], eax
	mov	eax, DWORD PTR rr1$[rsp+4]
	mov	DWORD PTR [rdx+4], eax
	mov	eax, DWORD PTR rr1$[rsp+8]
	mov	DWORD PTR [rdx+8], eax
	add	rsp, 40					; 00000028H
	ret	0
?Upsample40MTo44M_160@@YAXPEBU_COMPLEX16@@PEAU1@@Z ENDP	; Upsample40MTo44M_160
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Upsample40MTo44M_3@@YAXPEBU_COMPLEX16@@PEAU1@@Z
_TEXT	SEGMENT
pInput$ = 8
pOutput$ = 16
?Upsample40MTo44M_3@@YAXPEBU_COMPLEX16@@PEAU1@@Z PROC	; Upsample40MTo44M_3, COMDAT

; 68   :     const vcs& in = *(vcs*)pInput;
; 69   :     vcs& out = *(vcs*)pOutput;
; 70   :     assert(in[3].re == 0 && in[3].im == 0);
; 71   : 
; 72   : 	const vs * pcoff1_r0 = (const vs*) g_coff1_row0;
; 73   : 	const vs * pcoff1_r1 = (const vs*) g_coff1_row1;
; 74   : 
; 75   :     vcs resi;
; 76   :     set_zero (resi);
; 77   : 
; 78   : 	vcs rr1;
; 79   : 	compute_4 ( rr1, (vs&)in, resi, pcoff1_r0, pcoff1_r1, 0 );

	movaps	xmm2, XMMWORD PTR [rcx]
	xorps	xmm0, xmm0
	movdqa	xmm1, xmm2
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm2, xmm0
	pand	xmm2, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm1, xmm2

; 80   :     out = rr1;

	movdqa	XMMWORD PTR [rdx], xmm1

; 81   : }

	ret	0
?Upsample40MTo44M_3@@YAXPEBU_COMPLEX16@@PEAU1@@Z ENDP	; Upsample40MTo44M_3
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\copynt.h
_TEXT	ENDS
;	COMDAT ?Copy_NT@@YAXPEAU_COMPLEX8@@PEBU_COMPLEX16@@IH@Z
_TEXT	SEGMENT
pcOutput$ = 8
pcInput$ = 16
uiCount$ = 24
nbits$ = 32
?Copy_NT@@YAXPEAU_COMPLEX8@@PEBU_COMPLEX16@@IH@Z PROC	; Copy_NT, COMDAT

; 18   :     const vs * pvInput = (vs*)pcInput;
; 19   :     vb * pvOutput = (vb*)pcOutput;
; 20   :     for (unsigned int i = 0; i < uiCount >> 3; i++)

	shr	r8d, 3
	test	r8d, r8d
	je	SHORT $LN1@Copy_NT
	mov	eax, r8d
	npad	4
$LL3@Copy_NT:

; 21   :     {
; 22   :         Pack_NT(&pvOutput[0], pvInput[0], pvInput[1], nbits);

	movdqa	xmm1, XMMWORD PTR [rdx]
	movdqa	xmm0, XMMWORD PTR [rdx+16]

; 23   :         pvInput += 2;
; 24   :         pvOutput++;

	add	rcx, 16
	add	rdx, 32					; 00000020H
	sub	rax, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rcx-16], xmm1
	jne	SHORT $LL3@Copy_NT
$LN1@Copy_NT:

; 25   :     }
; 26   : }

	fatret	0
?Copy_NT@@YAXPEAU_COMPLEX8@@PEBU_COMPLEX16@@IH@Z ENDP	; Copy_NT
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ?conj_mul_shift@@YA?AUvcs@@AEBU1@0H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
nbits_right$ = 32
?conj_mul_shift@@YA?AUvcs@@AEBU1@0H@Z PROC		; conj_mul_shift, COMDAT

; 907  :     // b = Q3 I3 Q2 I2 Q1 I1 Q0 I0
; 908  :     // vcs1 = -I3 Q3 -I2 Q2 -I1 Q1 -I0 Q0
; 909  :     vcs vcs1 = conjre(a);
; 910  :     vcs1 = flip(vcs1);
; 911  :     
; 912  :     vi vi0 = pairwise_muladd((vs&)a, (vs&)b);       // vi0 = I3 I2 I1 I0, where Ii=ac-bd (a+bj)*(c+dj)=(ac-bd)+(ad+bc)j

	movdqa	xmm0, XMMWORD PTR [rdx]
	movdqa	xmm2, XMMWORD PTR [r8]

; 913  :     vi vi1 = pairwise_muladd((vs&)vcs1, (vs&)b);    // vi1 = Q3 Q2 Q1 Q0
; 914  : 
; 915  :     // Shift right to normalize
; 916  :     vi0 = shift_right(vi0, nbits_right);
; 917  :     vi1 = shift_right(vi1, nbits_right);
; 918  : 
; 919  :     // Q3 I3 Q2 I2 Q1 I1 Q0 I0
; 920  :     return (vcs)pack(vi0, vi1);

	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	mov	rax, rcx
	movdqa	xmm4, xmm0
	psignw	xmm0, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pmaddwd	xmm4, xmm2
	psrad	xmm4, 15
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pand	xmm4, xmm3
	pmaddwd	xmm1, xmm2
	psrad	xmm1, 15
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm4, xmm1
	movdqa	XMMWORD PTR [rcx], xmm4

; 921  : }

	ret	0
?conj_mul_shift@@YA?AUvcs@@AEBU1@0H@Z ENDP		; conj_mul_shift
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z DD imagerel $LN472
	DD	imagerel $LN472+429
	DD	imagerel $unwind$??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z DD 072001H
	DD	08820H
	DD	017812H
	DD	026809H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\ifft_r4dif.h
xdata	ENDS
;	COMDAT ??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
pInput$ = 64
??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z PROC			; IFFTSSE<32>, COMDAT

; 13   : {

$LN472:
	sub	rsp, 56					; 00000038H
	movaps	XMMWORD PTR [rsp+32], xmm6

; 14   :     const int INPUT_SHIFT = 2;
; 15   :     const int OUTPUT_SHIFT = 15;
; 16   :     const int nArray = N / vcs::size;
; 17   : 
; 18   :     vcs *pi = pInput;
; 19   :     for (int n = 0; n < nArray/4; n++, pi++)

	add	rcx, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+16], xmm7
	xor	eax, eax
	lea	rdx, OFFSET FLAT:__ImageBase
	movaps	XMMWORD PTR [rsp], xmm8
$LL3@IFFTSSE:

; 20   :     {
; 21   :         vcs a = shift_right(pi[0], INPUT_SHIFT);

	movdqa	xmm8, XMMWORD PTR [rcx-64]

; 22   :         vcs b = shift_right(pi[nArray/4], INPUT_SHIFT);

	movdqa	xmm7, XMMWORD PTR [rcx-32]

; 23   :         vcs c = shift_right(pi[nArray/2], INPUT_SHIFT);

	movdqa	xmm0, XMMWORD PTR [rcx]
	add	rax, 16
	psraw	xmm0, 2
	psraw	xmm8, 2
	psraw	xmm7, 2

; 24   :         vcs d = shift_right(pi[nArray/4*3], INPUT_SHIFT);

	movdqa	xmm6, XMMWORD PTR [rcx+32]

; 25   : 
; 26   :         vcs ac = saturated_add(a, c);

	movdqa	xmm5, xmm8

; 27   :         vcs bd = saturated_add(b, d);

	movdqa	xmm1, xmm7
	paddsw	xmm5, xmm0

; 28   :         vcs a_c = saturated_sub(a, c);

	psubsw	xmm8, xmm0
	psraw	xmm6, 2
	add	rcx, 16
	cmp	rax, 32					; 00000020H

; 29   :         vcs b_d = saturated_sub(b, d);
; 30   : 
; 31   :         // Calc X(4k) Start
; 32   :         pi[0] = saturated_add(ac, bd);

	movdqa	xmm0, xmm5
	paddsw	xmm1, xmm6
	psubsw	xmm7, xmm6
	paddsw	xmm0, xmm1

; 33   : 
; 34   :         // Calc X(4k+2) Start
; 35   :         vcs x2 = saturated_sub(ac, bd);

	psubsw	xmm5, xmm1
	movdqa	XMMWORD PTR [rcx-80], xmm0

; 36   :         pi[nArray/4] = conj_mul_shift(x2, FFT_GetTwiddleConst<N, 2>()[n], OUTPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT32_2@@3QBU_COMPLEX16@@B[rax+rdx-16]
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm4, xmm5
	psignw	xmm5, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pshuflw	xmm0, xmm5, 177				; 000000b1H
	pmaddwd	xmm4, xmm2
	psrad	xmm4, 15
	pshufhw	xmm1, xmm0, 177				; 000000b1H

; 37   : 
; 38   :         // Calc X(4k+1) Start
; 39   :         vcs jb_d = mul_j(b_d);

	pshuflw	xmm0, xmm7, 177				; 000000b1H
	pmaddwd	xmm1, xmm2
	pand	xmm4, xmm3
	psrad	xmm1, 15
	pshufhw	xmm5, xmm0, 177				; 000000b1H

; 40   :         vcs x4 = saturated_add(a_c, jb_d);

	movdqa	xmm0, xmm8
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm4, xmm1
	movdqa	XMMWORD PTR [rcx-48], xmm4

; 41   :         pi[nArray/2] = conj_mul_shift(x4, FFT_GetTwiddleConst<N, 1>()[n], OUTPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT32_1@@3QBU_COMPLEX16@@B[rax+rdx-16]
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	pxor	xmm5, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB
	paddsw	xmm0, xmm5

; 42   : 
; 43   :         // Calc X(4k+3) Start
; 44   :         vcs x5 = saturated_sub(a_c, jb_d);

	psubsw	xmm8, xmm5
	movdqa	xmm4, xmm0
	psignw	xmm0, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pmaddwd	xmm4, xmm2
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	psrad	xmm4, 15
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pand	xmm4, xmm3
	pmaddwd	xmm1, xmm2
	psrad	xmm1, 15
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm4, xmm1
	movdqa	XMMWORD PTR [rcx-16], xmm4

; 45   :         pi[nArray/4*3] = conj_mul_shift(x5, FFT_GetTwiddleConst<N, 3>()[n], OUTPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT32_3@@3QBU_COMPLEX16@@B[rax+rdx-16]
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm4, xmm8
	psignw	xmm8, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pshuflw	xmm0, xmm8, 177				; 000000b1H
	pmaddwd	xmm4, xmm2
	psrad	xmm4, 15
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pand	xmm4, xmm3
	pmaddwd	xmm1, xmm2
	psrad	xmm1, 15
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm4, xmm1
	movdqa	XMMWORD PTR [rcx+16], xmm4
	jl	$LL3@IFFTSSE

; 46   :     }
; 47   : }

	movaps	xmm6, XMMWORD PTR [rsp+32]
	movaps	xmm7, XMMWORD PTR [rsp+16]
	movaps	xmm8, XMMWORD PTR [rsp]
	add	rsp, 56					; 00000038H
	ret	0
??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z ENDP			; IFFTSSE<32>
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z DD imagerel $LN472
	DD	imagerel $LN472+459
	DD	imagerel $unwind$??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z DD 072301H
	DD	08823H
	DD	017815H
	DD	026809H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\ifft_r4dif.h
xdata	ENDS
;	COMDAT ??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
pInput$ = 64
??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z PROC			; IFFTSSE<128>, COMDAT

; 13   : {

$LN472:
	sub	rsp, 56					; 00000038H
	movaps	XMMWORD PTR [rsp+32], xmm6

; 14   :     const int INPUT_SHIFT = 2;
; 15   :     const int OUTPUT_SHIFT = 15;
; 16   :     const int nArray = N / vcs::size;
; 17   : 
; 18   :     vcs *pi = pInput;
; 19   :     for (int n = 0; n < nArray/4; n++, pi++)

	add	rcx, 256				; 00000100H
	movaps	XMMWORD PTR [rsp+16], xmm7
	xor	eax, eax
	lea	rdx, OFFSET FLAT:__ImageBase
	movaps	XMMWORD PTR [rsp], xmm8
	npad	13
$LL3@IFFTSSE@2:

; 20   :     {
; 21   :         vcs a = shift_right(pi[0], INPUT_SHIFT);

	movdqa	xmm8, XMMWORD PTR [rcx-256]

; 22   :         vcs b = shift_right(pi[nArray/4], INPUT_SHIFT);

	movdqa	xmm7, XMMWORD PTR [rcx-128]

; 23   :         vcs c = shift_right(pi[nArray/2], INPUT_SHIFT);

	movdqa	xmm0, XMMWORD PTR [rcx]
	add	rax, 16
	psraw	xmm0, 2
	psraw	xmm8, 2
	psraw	xmm7, 2

; 24   :         vcs d = shift_right(pi[nArray/4*3], INPUT_SHIFT);

	movdqa	xmm6, XMMWORD PTR [rcx+128]

; 25   : 
; 26   :         vcs ac = saturated_add(a, c);

	movdqa	xmm5, xmm8

; 27   :         vcs bd = saturated_add(b, d);

	movdqa	xmm1, xmm7
	paddsw	xmm5, xmm0

; 28   :         vcs a_c = saturated_sub(a, c);

	psubsw	xmm8, xmm0
	psraw	xmm6, 2
	add	rcx, 16
	cmp	rax, 128				; 00000080H

; 29   :         vcs b_d = saturated_sub(b, d);
; 30   : 
; 31   :         // Calc X(4k) Start
; 32   :         pi[0] = saturated_add(ac, bd);

	movdqa	xmm0, xmm5
	paddsw	xmm1, xmm6
	psubsw	xmm7, xmm6
	paddsw	xmm0, xmm1

; 33   : 
; 34   :         // Calc X(4k+2) Start
; 35   :         vcs x2 = saturated_sub(ac, bd);

	psubsw	xmm5, xmm1
	movdqa	XMMWORD PTR [rcx-272], xmm0

; 36   :         pi[nArray/4] = conj_mul_shift(x2, FFT_GetTwiddleConst<N, 2>()[n], OUTPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT128_2@@3QBU_COMPLEX16@@B[rax+rdx-16]
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm4, xmm5
	psignw	xmm5, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pshuflw	xmm0, xmm5, 177				; 000000b1H
	pmaddwd	xmm4, xmm2
	psrad	xmm4, 15
	pshufhw	xmm1, xmm0, 177				; 000000b1H

; 37   : 
; 38   :         // Calc X(4k+1) Start
; 39   :         vcs jb_d = mul_j(b_d);

	pshuflw	xmm0, xmm7, 177				; 000000b1H
	pmaddwd	xmm1, xmm2
	pand	xmm4, xmm3
	psrad	xmm1, 15
	pshufhw	xmm5, xmm0, 177				; 000000b1H

; 40   :         vcs x4 = saturated_add(a_c, jb_d);

	movdqa	xmm0, xmm8
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm4, xmm1
	movdqa	XMMWORD PTR [rcx-144], xmm4

; 41   :         pi[nArray/2] = conj_mul_shift(x4, FFT_GetTwiddleConst<N, 1>()[n], OUTPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT128_1@@3QBU_COMPLEX16@@B[rax+rdx-16]
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	pxor	xmm5, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB
	paddsw	xmm0, xmm5

; 42   : 
; 43   :         // Calc X(4k+3) Start
; 44   :         vcs x5 = saturated_sub(a_c, jb_d);

	psubsw	xmm8, xmm5
	movdqa	xmm4, xmm0
	psignw	xmm0, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pmaddwd	xmm4, xmm2
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	psrad	xmm4, 15
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pand	xmm4, xmm3
	pmaddwd	xmm1, xmm2
	psrad	xmm1, 15
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm4, xmm1
	movdqa	XMMWORD PTR [rcx-16], xmm4

; 45   :         pi[nArray/4*3] = conj_mul_shift(x5, FFT_GetTwiddleConst<N, 3>()[n], OUTPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT128_3@@3QBU_COMPLEX16@@B[rax+rdx-16]
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm4, xmm8
	psignw	xmm8, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pshuflw	xmm0, xmm8, 177				; 000000b1H
	pmaddwd	xmm4, xmm2
	psrad	xmm4, 15
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pand	xmm4, xmm3
	pmaddwd	xmm1, xmm2
	psrad	xmm1, 15
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm4, xmm1
	movdqa	XMMWORD PTR [rcx+112], xmm4
	jl	$LL3@IFFTSSE@2

; 46   :     }
; 47   : }

	movaps	xmm6, XMMWORD PTR [rsp+32]
	movaps	xmm7, XMMWORD PTR [rsp+16]
	movaps	xmm8, XMMWORD PTR [rsp]
	add	rsp, 56					; 00000038H
	ret	0
??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z ENDP			; IFFTSSE<128>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
_TEXT	ENDS
;	COMDAT ?UpsampleTailAndCopyNT@@YAXPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@@Z
_TEXT	SEGMENT
info$ = 8
pcOutput$ = 16
?UpsampleTailAndCopyNT@@YAXPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@@Z PROC ; UpsampleTailAndCopyNT, COMDAT

; 80   :     if (info->SampleRate == 44)

	mov	eax, DWORD PTR TxVector
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN4@UpsampleTa

; 81   :     {
; 82   :         Upsample40MTo44M_3(info->cWindow, info->cSymbol44M);

	movdqa	xmm1, XMMWORD PTR TxVector+6912
	xorps	xmm3, xmm3
	movdqa	xmm2, xmm1

; 83   :         set_zero(((vcs*)info->cSymbol44M)[1]);

	movdqa	XMMWORD PTR TxVector+1216, xmm3
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	palignr	xmm2, xmm3, 12

; 84   :         Copy_NT(pcOutput, info->cSymbol44M, 8);

	psraw	xmm3, 6
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pand	xmm2, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm1, xmm0
	pand	xmm1, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm2, xmm1
	movdqa	XMMWORD PTR TxVector+1200, xmm2
	psraw	xmm2, 6
	packsswb xmm2, xmm3
	movntdq	XMMWORD PTR [rdx], xmm2

; 89   :     }
; 90   :     else
; 91   :     {
; 92   :         ASSERT(0);
; 93   :     }
; 94   : }

	ret	0
$LN4@UpsampleTa:

; 85   :     }
; 86   :     else if (info->SampleRate == 40)

	cmp	eax, 40					; 00000028H
	jne	SHORT $LN192@UpsampleTa

; 87   :     {
; 88   :         Copy_NT(pcOutput, info->cWindow, 8);

	movdqa	xmm1, XMMWORD PTR TxVector+6912
	movdqa	xmm0, XMMWORD PTR TxVector+6928
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rdx], xmm1
$LN192@UpsampleTa:

; 89   :     }
; 90   :     else
; 91   :     {
; 92   :         ASSERT(0);
; 93   :     }
; 94   : }

	fatret	0
?UpsampleTailAndCopyNT@@YAXPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@@Z ENDP ; UpsampleTailAndCopyNT
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z DD imagerel $LN946
	DD	imagerel $LN946+40
	DD	imagerel $unwind$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z DD imagerel $LN946+40
	DD	imagerel $LN946+1429
	DD	imagerel $chain$13$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z DD imagerel $LN946+1429
	DD	imagerel $LN946+1538
	DD	imagerel $chain$14$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z DD 021H
	DD	imagerel $LN946
	DD	imagerel $LN946+40
	DD	imagerel $unwind$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z DD 01c8f21H
	DD	01f88fH
	DD	02e889H
	DD	03d883H
	DD	04c87dH
	DD	05b86aH
	DD	06a864H
	DD	07985eH
	DD	088840H
	DD	097837H
	DD	0a682fH
	DD	0167420H
	DD	0176418H
	DD	0185410H
	DD	01a3408H
	DD	imagerel $LN946
	DD	imagerel $LN946+40
	DD	imagerel $unwind$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z DD 020701H
	DD	0190107H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
xdata	ENDS
;	COMDAT ?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z
_TEXT	SEGMENT
rr1$531376 = 0
info$ = 208
pcOutput$ = 216
pcInput$ = 224
sizeInput$ = 232
?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z PROC ; UpsampleAndCopyNT, COMDAT

; 50   : {

$LN946:
	sub	rsp, 200				; 000000c8H

; 51   :     if (info->SampleRate == 44)

	mov	eax, DWORD PTR TxVector
	mov	r11d, r9d
	mov	r10, rdx
	cmp	eax, 44					; 0000002cH
	jne	$LN7@UpsampleAn

; 52   :     {
; 53   :         assert(sizeInput % 160 == 0);
; 54   : 
; 55   :         const unsigned int COMPLEX_PER_OFDM_SYMBOL_44M = COMPLEX_PER_OFDM_SYMBOL/10*11;
; 56   :         size_t i;
; 57   :         for (i = 0; i < sizeInput; i += 160)
; 58   :         {
; 59   :             Upsample40MTo44M_160(pcInput + i, info->cSymbol44M);

	mov	rcx, r11
	test	r9d, r9d
	je	$LN4@UpsampleAn
	mov	QWORD PTR [rsp+208], rbx
	mov	QWORD PTR [rsp+192], rbp
	mov	QWORD PTR [rsp+184], rsi
	mov	QWORD PTR [rsp+176], rdi
	lea	r9, QWORD PTR [r8+32]
	dec	rcx
	movaps	XMMWORD PTR [rsp+160], xmm6
	movaps	XMMWORD PTR [rsp+144], xmm7
	movaps	XMMWORD PTR [rsp+128], xmm8
	mov	rax, -3689348814741910323		; cccccccccccccccdH
	lea	rbp, OFFSET FLAT:TxVector+1276
	lea	rsi, OFFSET FLAT:TxVector+1200
	movaps	XMMWORD PTR [rsp+112], xmm9
	movaps	XMMWORD PTR [rsp+96], xmm10
	movaps	XMMWORD PTR [rsp+80], xmm11
	mul	rcx
	mov	r8, rdx
	shr	r8, 7
	inc	r8
	movaps	XMMWORD PTR [rsp+64], xmm12
	movaps	XMMWORD PTR [rsp+48], xmm13
	movaps	XMMWORD PTR [rsp+32], xmm14
	movaps	XMMWORD PTR [rsp+16], xmm15
	xorps	xmm15, xmm15
	npad	5
$LL6@UpsampleAn:
	movdqa	xmm2, XMMWORD PTR [r9-32]
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	lea	rbx, QWORD PTR [r9-32]
	mov	edx, 5
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm4, xmm9
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm15, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm2, XMMWORD PTR [r9-16]
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm3, xmm11
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm4, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm4, XMMWORD PTR [r9]
	movdqa	xmm6, xmm4
	movdqa	xmm1, xmm4
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm3, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm5, XMMWORD PTR [r9+16]
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 8
	movdqa	xmm4, xmm3
	pmulhrsw xmm3, xmm10
	pmulhrsw xmm4, xmm9
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm3, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm3, xmm0
	pand	xmm3, xmm8
	por	xmm1, xmm3
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm3, XMMWORD PTR [r9+32]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm5, 8
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm5, xmm11
	movdqa	xmm1, xmm5
	palignr	xmm1, xmm4, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	lea	rax, QWORD PTR [r9+48]
	mov	rcx, rbp
	pand	xmm2, xmm8
	lea	edi, QWORD PTR [rdx+2]
	por	xmm1, xmm2
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm5, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	npad	8
$LL12@UpsampleAn:
	movdqu	XMMWORD PTR [rcx], xmm2
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	pand	xmm2, xmm8
	shl	rax, 4
	por	xmm1, xmm2
	add	rax, rbx
	sub	rdi, 1
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	jne	$LL12@UpsampleAn
	movdqa	XMMWORD PTR rr1$531376[rsp], xmm2
	mov	eax, DWORD PTR rr1$531376[rsp]
	lea	edx, QWORD PTR [rdi+22]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$531376[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$531376[rsp+8]
	mov	DWORD PTR [rcx+8], eax

; 60   :             Copy_NT(pcOutput, info->cSymbol44M, COMPLEX_PER_OFDM_SYMBOL_44M);

	mov	rax, rsi
	mov	rcx, r10
	npad	10
$LL849@UpsampleAn:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rcx, 16
	add	rax, 32					; 00000020H
	sub	rdx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rcx-16], xmm1
	jne	SHORT $LL849@UpsampleAn

; 61   :             pcOutput += COMPLEX_PER_OFDM_SYMBOL_44M;

	add	r10, 352				; 00000160H
	add	r9, 640					; 00000280H
	sub	r8, 1
	jne	$LL6@UpsampleAn
	movaps	xmm15, XMMWORD PTR [rsp+16]
	movaps	xmm14, XMMWORD PTR [rsp+32]
	movaps	xmm13, XMMWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+176]
	mov	rsi, QWORD PTR [rsp+184]
	mov	rbp, QWORD PTR [rsp+192]
	mov	rbx, QWORD PTR [rsp+208]
	movaps	xmm12, XMMWORD PTR [rsp+64]
	movaps	xmm11, XMMWORD PTR [rsp+80]
	movaps	xmm10, XMMWORD PTR [rsp+96]
	movaps	xmm9, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+128]
	movaps	xmm7, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+160]
$LN4@UpsampleAn:

; 62   :         }
; 63   :         return sizeInput/10*11;

	mov	eax, -858993459				; cccccccdH
	mul	r11d
	shr	edx, 3
	imul	edx, 11
	mov	eax, edx

; 74   :     }
; 75   : }

	add	rsp, 200				; 000000c8H
	ret	0
$LN7@UpsampleAn:

; 64   :     }
; 65   :     else if (info->SampleRate == 40)

	cmp	eax, 40					; 00000028H
	jne	SHORT $LN2@UpsampleAn

; 66   :     {
; 67   :         Copy_NT(pcOutput, pcInput, sizeInput);

	mov	eax, r11d
	shr	eax, 3
	test	eax, eax
	je	SHORT $LN892@UpsampleAn
	npad	4
$LL894@UpsampleAn:
	movdqa	xmm1, XMMWORD PTR [r8]
	movdqa	xmm0, XMMWORD PTR [r8+16]
	add	r10, 16
	add	r8, 32					; 00000020H
	sub	rax, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r10-16], xmm1
	jne	SHORT $LL894@UpsampleAn
$LN892@UpsampleAn:

; 68   :         return sizeInput;

	mov	eax, r11d

; 74   :     }
; 75   : }

	add	rsp, 200				; 000000c8H
	ret	0
$LN2@UpsampleAn:

; 69   :     }
; 70   :     else
; 71   :     {
; 72   :         ASSERT(0);
; 73   :         return 0;

	xor	eax, eax

; 74   :     }
; 75   : }

	add	rsp, 200				; 000000c8H
	ret	0
?UpsampleAndCopyNT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEBU_COMPLEX16@@I@Z ENDP ; UpsampleAndCopyNT
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z DD imagerel $LN363
	DD	imagerel $LN363+277
	DD	imagerel $unwind$??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z DD 052d01H
	DD	01782dH
	DD	026823H
	DD	06204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\ifft_r4dif.h
xdata	ENDS
;	COMDAT ??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
t$534489 = 0
t$533560 = 0
t$533414 = 0
pInput$ = 64
??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z PROC			; IFFTSSEEx<8>, COMDAT

; 89   : {

$LN363:
	sub	rsp, 56					; 00000038H

; 90   :     const int INPUT_SHIFT = 3;
; 91   :     const int OUTPUT_SHIFT = 15;
; 92   : 
; 93   :     vcs xmm0 = shift_right(pInput[0], INPUT_SHIFT);     // xmm0 = a
; 94   :     vcs xmm1 = shift_right(pInput[1], INPUT_SHIFT);     // xmm1 = b
; 95   : 
; 96   :     vcs xmm2 = saturated_sub(xmm0, xmm1);              // xmm2 = a - b
; 97   :     xmm0 = saturated_add(xmm0, xmm1);                  // xmm0 = a + b, for 4-point IFFT
; 98   : 
; 99   :     vcs xmm5 = vector128_consts::__0xFFFF0000FFFF00000000000000000000<vcs>();
; 100  :     xmm2 = xor(xmm2, xmm5);                             // xmm3 = -Q3  I3 -Q2  I2 Q1 I1 Q0 I0 = (a-b).lower34*j
; 101  :     vcs xmm3 = permutate_high<0xb1>(xmm2);            // xmm3 = I3 -Q3  I2 -Q2 Q1 I1 Q0 I0
; 102  :                                                         // xmm0 and xmm3 store 4-point data
; 103  :     xmm5 = permutate<0x4e>(xmm3);                     // xmm5 = Q1 I1 Q0 I0 I3 Q3 I2 Q2, xmm3 = Q3 I3 Q2 I2 Q1 I1 Q0 I0
; 104  :     vcs xmm4 = vector128_consts::__0xFFFFFFFFFFFFFFFF0000000000000000<vcs>();
; 105  :     xmm3 = xor(xmm3, xmm4);                             // xmm3 = -Q3 -I3 -Q2 -I2 Q1 I1 Q0 I0
; 106  :     xmm3 = saturated_add(xmm3, xmm5);                  // xmm3 = xmm3 + xmm5
; 107  : 
; 108  :     xmm1 = conj_mul_shift(xmm3, FFT_GetTwiddleConst<8, 1>()[0], OUTPUT_SHIFT);   // lower multiplied by wLUT

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT8@@3QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm0, XMMWORD PTR [rcx+16]
	psraw	xmm0, 3
	movaps	XMMWORD PTR [rsp+32], xmm6
	movdqa	xmm6, XMMWORD PTR t$533560[rsp]
	movaps	XMMWORD PTR [rsp+16], xmm7
	pcmpeqd	xmm6, xmm6
	pslldq	xmm6, 8
	movdqa	xmm7, XMMWORD PTR [rcx]
	psraw	xmm7, 3
	movdqa	xmm1, xmm7
	paddsw	xmm7, xmm0
	psubsw	xmm1, xmm0
	movdqa	xmm0, XMMWORD PTR t$533414[rsp]
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 8
	pslld	xmm0, 16
	pxor	xmm1, xmm0
	pshufhw	xmm4, xmm1, 177				; 000000b1H
	pshufd	xmm0, xmm4, 78				; 0000004eH
	pxor	xmm4, xmm6
	paddsw	xmm4, xmm0
	movdqa	xmm5, xmm4
	psignw	xmm4, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	pshuflw	xmm0, xmm4, 177				; 000000b1H
	pmaddwd	xmm5, xmm2
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	psrad	xmm5, 15
	pand	xmm5, xmm3
	pmaddwd	xmm1, xmm2
	psrad	xmm1, 15

; 109  : 
; 110  :     xmm3 = permutate<0xc8>(xmm4);                     // xmm3 = 0xFFFFFFFF00000000FFFFFFFF00000000

	pshufd	xmm2, xmm6, 200				; 000000c8H
	pand	xmm1, xmm3
	pslld	xmm1, 16
	por	xmm5, xmm1

; 111  :     xmm2 = permutate<0xb1>(xmm1);                     // xmm2 = I2 Q2 I3 Q3 I0 Q0 I1 Q1

	pshufd	xmm0, xmm5, 177				; 000000b1H

; 112  :     xmm1 = xor(xmm1, xmm3);                             // xmm1 = -Q3 -I3 Q2 I2 -Q1 -I1 Q0 I0
; 113  :     xmm1 = saturated_add(xmm1, xmm2);                  // 4-DFT over
; 114  : 
; 115  :     xmm5 = permutate<0x4e>(xmm0);                     // xmm5 = Q1 I1 Q0 I0 Q3 I3 Q2 I2 xmm0 = Q3 I3 Q2 I2 Q1 I1 Q0 I0
; 116  :     xmm0 = xor(xmm0, xmm4);                             // xmm0 = -Q3 -I3 -Q2 -I2 Q1 I1 Q0 I0

	movdqa	xmm1, xmm7
	movdqa	xmm3, xmm5
	pxor	xmm1, xmm6
	pxor	xmm3, xmm2

; 117  :     xmm0 = saturated_add(xmm0, xmm5);                  // A-B A+B
; 118  : 
; 119  :     xmm4 = vector128_consts::__0xFFFF0000000000000000000000000000<vcs>();
; 120  :                                                         // xmm4 = 0xFFFF0000000000000000000000000000
; 121  :     xmm0 = xor(xmm0, xmm4);                             // xmm0 = upper.4 * j
; 122  :     xmm0 = permutate_high<0xb4>(xmm0);                // xmm0 = I3 -Q3 Q2 I2 Q1 I1 Q0 I0
; 123  : 
; 124  :     xmm2 = permutate<0xb1>(xmm0);                     // xmm2 = I2 Q2 I3 Q3 I0  Q0 I1 Q1
; 125  :     xmm0 = xor(xmm0, xmm3);                             // xmm0 = -Q3 -I3 Q2 I2 -Q1 -I1 Q0 I0
; 126  :     xmm0 = saturated_add(xmm0, xmm2);                  // 4-IFFT Over
; 127  : 
; 128  :     pInput[0] = xmm0;                                   // output upper 2 2-point DFT
; 129  :     pInput[1] = xmm1;                                   // output lower2 2-point DFT
; 130  : }

	movaps	xmm6, XMMWORD PTR [rsp+32]
	paddsw	xmm3, xmm0
	pshufd	xmm0, xmm7, 78				; 0000004eH
	movaps	xmm7, XMMWORD PTR [rsp+16]
	paddsw	xmm1, xmm0
	movdqa	xmm0, XMMWORD PTR t$534489[rsp]
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 14
	pxor	xmm1, xmm0
	pshufhw	xmm0, xmm1, 180				; 000000b4H
	movdqa	xmm1, xmm0
	pshufd	xmm0, xmm0, 177				; 000000b1H
	pxor	xmm1, xmm2
	paddsw	xmm1, xmm0
	movdqa	XMMWORD PTR [rcx], xmm1
	movdqa	XMMWORD PTR [rcx+16], xmm3
	add	rsp, 56					; 00000038H
	ret	0
??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z ENDP			; IFFTSSEEx<8>
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IFFTSSEEx@$0CA@@@YAXPEAUvcs@@@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$??$IFFTSSEEx@$0CA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IFFTSSEEx@$0CA@@@YAXPEAUvcs@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$IFFTSSEEx@$0CA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
pInput$ = 48
??$IFFTSSEEx@$0CA@@@YAXPEAUvcs@@@Z PROC			; IFFTSSEEx<32>, COMDAT

; 52   : {

$LN3:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 53   :     const int nArray = N / vcs::size;
; 54   : 
; 55   :     IFFTSSE<N> (pInput);

	call	??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z	; IFFTSSE<32>

; 56   :     IFFTSSEEx<N/4> (pInput);

	mov	rcx, rbx
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>

; 57   :     IFFTSSEEx<N/4> (pInput + nArray / 4);

	lea	rcx, QWORD PTR [rbx+32]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>

; 58   :     IFFTSSEEx<N/4> (pInput + nArray / 2);

	lea	rcx, QWORD PTR [rbx+64]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>

; 59   :     IFFTSSEEx<N/4> (pInput + nArray / 4 * 3);

	lea	rcx, QWORD PTR [rbx+96]

; 60   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
??$IFFTSSEEx@$0CA@@@YAXPEAUvcs@@@Z ENDP			; IFFTSSEEx<32>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z DD imagerel $LN11
	DD	imagerel $LN11+251
	DD	imagerel $unwind$??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
pInput$ = 48
??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z PROC			; IFFTSSEEx<128>, COMDAT

; 52   : {

$LN11:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx

; 53   :     const int nArray = N / vcs::size;
; 54   : 
; 55   :     IFFTSSE<N> (pInput);

	call	??$IFFTSSE@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSE<128>

; 56   :     IFFTSSEEx<N/4> (pInput);

	mov	rcx, rdi
	call	??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z	; IFFTSSE<32>
	mov	rcx, rdi
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+32]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+64]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+96]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>

; 57   :     IFFTSSEEx<N/4> (pInput + nArray / 4);

	lea	rcx, QWORD PTR [rdi+128]
	call	??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z	; IFFTSSE<32>
	lea	rcx, QWORD PTR [rdi+128]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+160]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+192]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+224]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>

; 58   :     IFFTSSEEx<N/4> (pInput + nArray / 2);

	lea	rcx, QWORD PTR [rdi+256]
	call	??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z	; IFFTSSE<32>
	lea	rcx, QWORD PTR [rdi+256]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+288]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+320]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+352]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>

; 59   :     IFFTSSEEx<N/4> (pInput + nArray / 4 * 3);

	lea	rcx, QWORD PTR [rdi+384]
	call	??$IFFTSSE@$0CA@@@YAXPEAUvcs@@@Z	; IFFTSSE<32>
	lea	rcx, QWORD PTR [rdi+384]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+416]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+448]
	call	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
	lea	rcx, QWORD PTR [rdi+480]

; 60   : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	jmp	??$IFFTSSEEx@$07@@YAXPEAUvcs@@@Z	; IFFTSSEEx<8>
??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z ENDP			; IFFTSSEEx<128>
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z DD imagerel $LN948
	DD	imagerel $LN948+32
	DD	imagerel $unwind$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z DD imagerel $LN948+32
	DD	imagerel $LN948+1425
	DD	imagerel $chain$14$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$15$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z DD imagerel $LN948+1425
	DD	imagerel $LN948+1572
	DD	imagerel $chain$15$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$15$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z DD 021H
	DD	imagerel $LN948
	DD	imagerel $LN948+32
	DD	imagerel $unwind$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z DD 01e8921H
	DD	01f889H
	DD	02e883H
	DD	03d87dH
	DD	04c877H
	DD	05b86bH
	DD	06a865H
	DD	07985fH
	DD	088848H
	DD	09783fH
	DD	0a6837H
	DD	016d428H
	DD	017c420H
	DD	0187418H
	DD	0196410H
	DD	01c3408H
	DD	imagerel $LN948
	DD	imagerel $LN948+32
	DD	imagerel $unwind$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z DD 030901H
	DD	01a0109H
	DD	05002H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx.h
xdata	ENDS
;	COMDAT ?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z
_TEXT	SEGMENT
rr1$782191 = 0
info$ = 224
pcOutput$ = 232
pcLast$ = 240
?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z PROC ; CopyPreamble16_NT, COMDAT

; 101  : {

$LN948:
	push	rbp
	sub	rsp, 208				; 000000d0H

; 102  :     const COMPLEX16 * pcInput = PREAMBLE40_11A();
; 103  :     const COMPLEX16 * pcTemp;
; 104  : 
; 105  :     unsigned int sizeOutput = UpsampleAndCopyNT(info, pcOutput, pcInput, PREAMBLE40_11A_LUT_SIZE);

	mov	eax, DWORD PTR TxVector
	xor	ebp, ebp
	mov	r11, r8
	mov	r9, rdx
	cmp	eax, 44					; 0000002cH
	jne	$LN9@CopyPreamb
	mov	QWORD PTR [rsp+224], rbx
	mov	QWORD PTR [rsp+200], rsi
	mov	QWORD PTR [rsp+192], rdi
	mov	QWORD PTR [rsp+184], r12
	mov	QWORD PTR [rsp+176], r13
	lea	r8, OFFSET FLAT:PREAMBLE40_11A_LUT+32
	movaps	XMMWORD PTR [rsp+160], xmm6
	movaps	XMMWORD PTR [rsp+144], xmm7
	movaps	XMMWORD PTR [rsp+128], xmm8
	lea	ebx, QWORD PTR [rbp+4]
	lea	r13, OFFSET FLAT:TxVector+1276
	lea	r12, OFFSET FLAT:TxVector+1200
	movaps	XMMWORD PTR [rsp+112], xmm9
	movaps	XMMWORD PTR [rsp+96], xmm10
	movaps	XMMWORD PTR [rsp+80], xmm11
	mov	r10d, 640				; 00000280H
	movaps	XMMWORD PTR [rsp+64], xmm12
	movaps	XMMWORD PTR [rsp+48], xmm13
	movaps	XMMWORD PTR [rsp+32], xmm14
	movaps	XMMWORD PTR [rsp+16], xmm15
	xorps	xmm15, xmm15
	npad	3
$LL8@CopyPreamb:
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR [r8-32]
	lea	rdi, QWORD PTR [r8-32]
	mov	edx, 5
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm5, XMMWORD PTR [r8+16]
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm4, xmm9
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm15, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR [r8-16]
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm3, xmm11
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm4, 12
	movdqa	xmm4, XMMWORD PTR [r8]
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm6, xmm4
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm6, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm3, 12
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm4
	movdqa	xmm3, xmm5
	pmulhrsw xmm1, xmm14
	pshufd	xmm0, xmm2, 177				; 000000b1H
	palignr	xmm3, xmm4, 8
	movdqa	xmm4, xmm3
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pmulhrsw xmm3, xmm10
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pmulhrsw xmm4, xmm9
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm3, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm3, xmm0
	pand	xmm3, xmm8
	por	xmm1, xmm3
	movdqa	xmm3, XMMWORD PTR [r8+32]
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm5, 8
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm5, xmm11
	movdqa	xmm1, xmm5
	palignr	xmm1, xmm4, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	lea	rax, QWORD PTR [r8+48]
	mov	rcx, r13
	pand	xmm2, xmm8
	lea	esi, QWORD PTR [rdx+2]
	por	xmm1, xmm2
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm5, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	npad	8
$LL14@CopyPreamb:
	movdqu	XMMWORD PTR [rcx], xmm2
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	add	rax, rax
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	pshufd	xmm0, xmm1, 177				; 000000b1H
	add	rax, rax
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR [rdi+rax*8]
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	pand	xmm2, xmm8
	shl	rax, 4
	por	xmm1, xmm2
	add	rax, rdi
	sub	rsi, 1
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	jne	$LL14@CopyPreamb
	movdqa	XMMWORD PTR rr1$782191[rsp], xmm2
	mov	eax, DWORD PTR rr1$782191[rsp]
	lea	edx, QWORD PTR [rsi+22]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$782191[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$782191[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, r12
	mov	rcx, r9
	npad	10
$LL851@CopyPreamb:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rcx, 16
	add	rax, 32					; 00000020H
	sub	rdx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rcx-16], xmm1
	jne	SHORT $LL851@CopyPreamb
	add	r9, 352					; 00000160H
	add	r8, r10
	sub	rbx, 1
	jne	$LL8@CopyPreamb
	movaps	xmm15, XMMWORD PTR [rsp+16]
	movaps	xmm14, XMMWORD PTR [rsp+32]
	movaps	xmm13, XMMWORD PTR [rsp+48]
	mov	r13, QWORD PTR [rsp+176]
	mov	r12, QWORD PTR [rsp+184]
	mov	rdi, QWORD PTR [rsp+192]
	mov	rsi, QWORD PTR [rsp+200]
	mov	rbx, QWORD PTR [rsp+224]
	mov	r10d, 704				; 000002c0H
	movaps	xmm12, XMMWORD PTR [rsp+64]
	movaps	xmm11, XMMWORD PTR [rsp+80]
	movaps	xmm10, XMMWORD PTR [rsp+96]
	movaps	xmm9, XMMWORD PTR [rsp+112]
	movaps	xmm8, XMMWORD PTR [rsp+128]
	movaps	xmm7, XMMWORD PTR [rsp+144]
	movaps	xmm6, XMMWORD PTR [rsp+160]
	jmp	SHORT $LN3@CopyPreamb
$LN9@CopyPreamb:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN4@CopyPreamb
	lea	rax, OFFSET FLAT:PREAMBLE40_11A_LUT
	mov	ecx, 80					; 00000050H
$LL896@CopyPreamb:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	r9, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r9-16], xmm1
	jne	SHORT $LL896@CopyPreamb
	mov	r10d, 640				; 00000280H
	jmp	SHORT $LN3@CopyPreamb
$LN4@CopyPreamb:
	mov	r10d, ebp
$LN3@CopyPreamb:

; 106  : 
; 107  :     pcTemp = (PREAMBLE40_11A() + (PREAMBLE40_11A_LUT_SIZE - 128));
; 108  : 
; 109  :     pcLast[0].re = pcTemp[0].re - (pcTemp[0].re >> 2);

	mov	eax, 2513				; 000009d1H

; 110  :     pcLast[0].im = pcTemp[0].im - (pcTemp[0].im >> 2);

	mov	WORD PTR [r11+2], bp

; 111  :     pcLast[1].re = pcTemp[1].re >> 1;
; 112  :     pcLast[1].im = pcTemp[1].im >> 1;
; 113  :     pcLast[2].re = pcTemp[2].re >> 2;
; 114  :     pcLast[2].im = pcTemp[2].im >> 2;
; 115  :     pcLast[3].re = 0;

	mov	WORD PTR [r11+12], bp
	mov	WORD PTR [r11], ax
	mov	eax, 1051				; 0000041bH

; 116  :     pcLast[3].im = 0;

	mov	WORD PTR [r11+14], bp
	mov	WORD PTR [r11+4], ax
	mov	eax, -643				; fffffffffffffd7dH
	mov	WORD PTR [r11+6], ax
	mov	eax, -28
	mov	WORD PTR [r11+8], ax
	mov	eax, -645				; fffffffffffffd7bH
	mov	WORD PTR [r11+10], ax

; 117  :     
; 118  :     return sizeOutput;

	mov	eax, r10d

; 119  : }

	add	rsp, 208				; 000000d0H
	pop	rbp
	ret	0
?CopyPreamble16_NT@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@@Z ENDP ; CopyPreamble16_NT
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?IFFT64x@@YAXPEAUvcs@@0@Z DD imagerel $LN32
	DD	imagerel $LN32+219
	DD	imagerel $unwind$?IFFT64x@@YAXPEAUvcs@@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IFFT64x@@YAXPEAUvcs@@0@Z DD 050d01H
	DD	048340dH
	DD	044010dH
	DD	07006H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ifft64x.h
xdata	ENDS
;	COMDAT ?IFFT64x@@YAXPEAUvcs@@0@Z
_TEXT	SEGMENT
temp$ = 32
pcInput$ = 560
pcOutput$ = 568
?IFFT64x@@YAXPEAUvcs@@0@Z PROC				; IFFT64x, COMDAT

; 7    : {

$LN32:
	mov	QWORD PTR [rsp+24], rbx
	push	rdi
	sub	rsp, 544				; 00000220H
	mov	rbx, rcx
	mov	rdi, rdx

; 8    :     vcs temp[128 / vcs::size];
; 9    : 
; 10   :     memset(temp, 0, sizeof(temp));

	lea	rcx, QWORD PTR temp$[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset

; 11   :     memcpy(temp, pcInput, 32 * sizeof(COMPLEX16));

	lea	rcx, QWORD PTR temp$[rsp]
	mov	rdx, rbx
	mov	r8d, 128				; 00000080H
	call	memcpy

; 12   :     memcpy(temp + 96 / vcs::size, pcInput + 32 / vcs::size, 32 * sizeof(COMPLEX16));

	lea	rcx, QWORD PTR temp$[rsp+384]
	lea	rdx, QWORD PTR [rbx+128]
	mov	r8d, 128				; 00000080H
	call	memcpy

; 13   :     IFFTSSEEx<128>(temp);

	lea	rcx, QWORD PTR temp$[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:?FFT128LUTMap@@3QBFB+2
	lea	rdx, QWORD PTR [rdi+8]
	lea	r8, OFFSET FLAT:?FFT128LUTMap@@3QBFB+258
	npad	2
$LL6@IFFT64x:

; 14   : 
; 15   :     int i;
; 16   :     for (i = 0; i < 128; i++)
; 17   :         ((COMPLEX16*)pcOutput)[i] = ((COMPLEX16*)temp) [FFTLUTMapTable<128>(i)];

	movsx	rax, WORD PTR [r11-2]
	add	r11, 8
	add	rdx, 16
	cmp	r11, r8
	mov	ecx, DWORD PTR temp$[rsp+rax*4]
	mov	DWORD PTR [rdx-24], ecx
	movsx	rax, WORD PTR [r11-8]
	mov	ecx, DWORD PTR temp$[rsp+rax*4]
	mov	DWORD PTR [rdx-20], ecx
	movsx	rax, WORD PTR [r11-6]
	mov	ecx, DWORD PTR temp$[rsp+rax*4]
	mov	DWORD PTR [rdx-16], ecx
	movsx	rax, WORD PTR [r11-4]
	mov	ecx, DWORD PTR temp$[rsp+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	jl	SHORT $LL6@IFFT64x

; 18   : 
; 19   :     for (i = 0; i < 128 / vcs::size; i++)

	mov	eax, 32					; 00000020H
$LL3@IFFT64x:

; 20   :         pcOutput[i] = shift_left(pcOutput[i], 2);

	movdqa	xmm0, XMMWORD PTR [rdi]
	add	rdi, 16
	sub	rax, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rdi-16], xmm0
	jne	SHORT $LL3@IFFT64x

; 21   : }

	mov	rbx, QWORD PTR [rsp+576]
	add	rsp, 544				; 00000220H
	pop	rdi
	ret	0
?IFFT64x@@YAXPEAUvcs@@0@Z ENDP				; IFFT64x
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?IFFT64x@@YAXPEAU_COMPLEX16@@0@Z DD imagerel $LN34
	DD	imagerel $LN34+219
	DD	imagerel $unwind$?IFFT64x@@YAXPEAU_COMPLEX16@@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IFFT64x@@YAXPEAU_COMPLEX16@@0@Z DD 050d01H
	DD	048340dH
	DD	044010dH
	DD	07006H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ifft64x.h
xdata	ENDS
;	COMDAT ?IFFT64x@@YAXPEAU_COMPLEX16@@0@Z
_TEXT	SEGMENT
temp$1049380 = 32
pcInput$ = 560
pcOutput$ = 568
?IFFT64x@@YAXPEAU_COMPLEX16@@0@Z PROC			; IFFT64x, COMDAT

; 25   : {

$LN34:
	mov	QWORD PTR [rsp+24], rbx
	push	rdi
	sub	rsp, 544				; 00000220H
	mov	rbx, rcx
	mov	rdi, rdx

; 26   :     IFFT64x((vcs*)pcInput, (vcs*)pcOutput);

	lea	rcx, QWORD PTR temp$1049380[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$1049380[rsp]
	mov	rdx, rbx
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1049380[rsp+384]
	lea	rdx, QWORD PTR [rbx+128]
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1049380[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:?FFT128LUTMap@@3QBFB+2
	lea	rdx, QWORD PTR [rdi+8]
	lea	r8, OFFSET FLAT:?FFT128LUTMap@@3QBFB+258
	npad	2
$LL8@IFFT64x@2:
	movsx	rax, WORD PTR [r11-2]
	add	r11, 8
	add	rdx, 16
	cmp	r11, r8
	mov	ecx, DWORD PTR temp$1049380[rsp+rax*4]
	mov	DWORD PTR [rdx-24], ecx
	movsx	rax, WORD PTR [r11-8]
	mov	ecx, DWORD PTR temp$1049380[rsp+rax*4]
	mov	DWORD PTR [rdx-20], ecx
	movsx	rax, WORD PTR [r11-6]
	mov	ecx, DWORD PTR temp$1049380[rsp+rax*4]
	mov	DWORD PTR [rdx-16], ecx
	movsx	rax, WORD PTR [r11-4]
	mov	ecx, DWORD PTR temp$1049380[rsp+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	jl	SHORT $LL8@IFFT64x@2
	mov	eax, 32					; 00000020H
$LL5@IFFT64x@2:
	movdqa	xmm0, XMMWORD PTR [rdi]
	add	rdi, 16
	sub	rax, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rdi-16], xmm0
	jne	SHORT $LL5@IFFT64x@2

; 27   : }

	mov	rbx, QWORD PTR [rsp+576]
	add	rsp, 544				; 00000220H
	pop	rdi
	ret	0
?IFFT64x@@YAXPEAU_COMPLEX16@@0@Z ENDP			; IFFT64x
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1048
	DD	imagerel $LN1048+40
	DD	imagerel $unwind$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1048+40
	DD	imagerel $LN1048+1645
	DD	imagerel $chain$0$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1048+1645
	DD	imagerel $LN1048+1653
	DD	imagerel $chain$1$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1048+1653
	DD	imagerel $LN1048+2896
	DD	imagerel $chain$10$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1048+2896
	DD	imagerel $LN1048+3031
	DD	imagerel $chain$11$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1048+1645
	DD	imagerel $LN1048+1653
	DD	imagerel $chain$1$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 012c321H
	DD	023e8c3H
	DD	024d8a0H
	DD	025c88eH
	DD	026b871H
	DD	027a84fH
	DD	028983dH
	DD	029882bH
	DD	02a781aH
	DD	02b6808H
	DD	imagerel $LN1048+1645
	DD	imagerel $LN1048+1653
	DD	imagerel $chain$1$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1048
	DD	imagerel $LN1048+40
	DD	imagerel $unwind$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 020821H
	DD	05c5408H
	DD	imagerel $LN1048
	DD	imagerel $LN1048+40
	DD	imagerel $unwind$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 071001H
	DD	05f3410H
	DD	0580110H
	DD	07007c009H
	DD	06006H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
xdata	ENDS
;	COMDAT ?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
_TEXT	SEGMENT
rr1$1622594 = 32
temp$1616960 = 48
info$ = 736
pcOutput$ = 744
pcLast$ = 752
pbData$ = 760
bPilotSgn$ = 768
?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z PROC ; Generate6MSymbol, COMDAT

; 99   : {

$LN1048:
	mov	QWORD PTR [rsp+32], rbx
	push	rsi
	push	rdi
	push	r12
	sub	rsp, 704				; 000002c0H

; 100  :     ConvEncode_1_2(pbData, info->bEncoded, 3, info->bConvEncoderReg);

	movzx	r10d, BYTE PTR [r9]
	movzx	eax, BYTE PTR TxVector+24
	lea	r12, OFFSET FLAT:__ImageBase
	shl	eax, 8
	mov	rbx, rdx
	mov	QWORD PTR [rsp+736], rbp
	movsxd	rcx, eax
	mov	rbp, r8
	or	rcx, r10
	shr	r10b, 2
	movzx	eax, WORD PTR CONV_ENCODER_1_2_LUT[r12+rcx*2]
	mov	BYTE PTR TxVector+24, r10b
	mov	WORD PTR TxVector+25, ax
	movzx	r8d, BYTE PTR [r9+1]
	movzx	eax, r10b
	shl	eax, 8
	movsxd	rcx, eax
	or	rcx, r8
	shr	r8b, 2
	movzx	eax, WORD PTR CONV_ENCODER_1_2_LUT[r12+rcx*2]
	mov	BYTE PTR TxVector+24, r8b
	mov	WORD PTR TxVector+27, ax
	movzx	edx, BYTE PTR [r9+2]
	movzx	eax, r8b
	shl	eax, 8
	movsxd	rcx, eax
	or	rcx, rdx
	shr	dl, 2
	movzx	eax, WORD PTR CONV_ENCODER_1_2_LUT[r12+rcx*2]
	mov	BYTE PTR TxVector+24, dl
	mov	WORD PTR TxVector+29, ax

; 101  :     InterleaveBPSK(info->bEncoded, info->bInterleaved);

	movzx	eax, BYTE PTR TxVector+25
	lea	ecx, DWORD PTR [rax+rax*2]
	lea	eax, DWORD PTR [rcx+rcx]
	cdqe
	movzx	edx, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	movzx	eax, BYTE PTR TxVector+26
	lea	eax, DWORD PTR [rax+rax*2+768]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	movzx	eax, BYTE PTR TxVector+27
	lea	eax, DWORD PTR [rax+rax*2+1536]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	movzx	eax, BYTE PTR TxVector+28
	lea	eax, DWORD PTR [rax+rax*2+2304]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	movzx	eax, BYTE PTR TxVector+29
	lea	eax, DWORD PTR [rax+rax*2+3072]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	movzx	eax, BYTE PTR TxVector+30
	lea	eax, DWORD PTR [rax+rax*2+3840]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	mov	WORD PTR TxVector+61, dx

; 102  :     MapBPSK_11a(info->bInterleaved, info->cMapped);

	movzx	eax, dl
	lea	rdx, OFFSET FLAT:TxVector+112
	shl	eax, 3
	mov	WORD PTR TxVector+63, r8w
	mov	WORD PTR TxVector+65, r9w
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR [rdx], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR [rdx+16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]

; 103  : 
; 104  :     AddPilot(info->cMapped, info->cPilotAdded, bPilotSgn);

	lea	r8, OFFSET FLAT:TxVector+456
	mov	QWORD PTR [rdx+24], rax
	movzx	eax, BYTE PTR TxVector+62
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR TxVector[r12+144], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR TxVector[r12+152], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR TxVector[r12+160], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	QWORD PTR TxVector[r12+168], rax
	movzx	eax, BYTE PTR TxVector+63
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR TxVector[r12+176], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR TxVector[r12+184], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR TxVector[r12+192], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	QWORD PTR TxVector[r12+200], rax
	movzx	eax, BYTE PTR TxVector+64
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR TxVector[r12+208], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR TxVector[r12+216], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR TxVector[r12+224], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	QWORD PTR TxVector[r12+232], rax
	movzx	eax, BYTE PTR TxVector+65
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR TxVector[r12+240], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR TxVector[r12+248], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR TxVector[r12+256], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	QWORD PTR TxVector[r12+264], rax
	movzx	eax, BYTE PTR TxVector+66
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR TxVector[r12+272], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR TxVector[r12+280], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR TxVector[r12+288], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	ecx, 38					; 00000026H
	mov	QWORD PTR TxVector[r12+296], rax
$LL29@Generate6M:
	cmp	ecx, 57					; 00000039H
	je	SHORT $LN28@Generate6M
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN28@Generate6M
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN28@Generate6M:
	inc	ecx
	add	r8, 4
	cmp	ecx, 64					; 00000040H
	jb	SHORT $LL29@Generate6M
	mov	ecx, 1
	lea	r8, OFFSET FLAT:TxVector+308
	npad	6
$LL24@Generate6M:
	cmp	ecx, 7
	je	SHORT $LN23@Generate6M
	cmp	ecx, 21
	je	SHORT $LN23@Generate6M
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN23@Generate6M:
	inc	ecx
	add	r8, 4
	cmp	ecx, 26
	jbe	SHORT $LL24@Generate6M
	cmp	BYTE PTR bPilotSgn$[rsp], 0
	jne	SHORT $LN19@Generate6M
	xor	esi, esi
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, si
	mov	WORD PTR TxVector+388, cx
	mov	WORD PTR TxVector+390, si
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, si
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, si
	jmp	SHORT $LN18@Generate6M
$LN19@Generate6M:
	xor	esi, esi
	mov	ecx, -10720				; ffffffffffffd620H
	mov	eax, 10720				; 000029e0H
	mov	WORD PTR TxVector+332, cx
	mov	WORD PTR TxVector+334, si
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, si
	mov	WORD PTR TxVector+532, cx
	mov	WORD PTR TxVector+534, si
	mov	WORD PTR TxVector+476, cx
	mov	WORD PTR TxVector+478, si
$LN18@Generate6M:

; 105  :     IFFT64x(info->cPilotAdded, info->cSymbol + COMPLEX_GI);

	lea	rcx, QWORD PTR temp$1616960[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$1616960[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1616960[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1616960[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:?FFT128LUTMap@@3QBFB+2
	lea	rdx, OFFSET FLAT:TxVector+696
	lea	r8, OFFSET FLAT:TxVector+1208
	npad	12
$LL39@Generate6M:
	movsx	rax, WORD PTR [r11-2]
	add	rdx, 16
	add	r11, 8
	cmp	rdx, r8
	mov	ecx, DWORD PTR temp$1616960[rsp+rax*4]
	movsx	rax, WORD PTR [r11-8]
	mov	DWORD PTR [rdx-24], ecx
	mov	ecx, DWORD PTR temp$1616960[rsp+rax*4]
	movsx	rax, WORD PTR [r11-6]
	mov	DWORD PTR [rdx-20], ecx
	mov	ecx, DWORD PTR temp$1616960[rsp+rax*4]
	movsx	rax, WORD PTR [r11-4]
	mov	DWORD PTR [rdx-16], ecx
	mov	ecx, DWORD PTR temp$1616960[rsp+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	jl	SHORT $LL39@Generate6M
	lea	rax, OFFSET FLAT:TxVector+688
	mov	ecx, 32					; 00000020H
	npad	7
$LL36@Generate6M:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL36@Generate6M

; 106  : 
; 107  :     CopyGI(info->cSymbol, info->cSymbol + 128);

	lea	rdi, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rdi
	call	memcpy

; 108  :     Window(info->cSymbol, pcLast);

	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	ecx, WORD PTR TxVector+568
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR [rbp]
	movdqa	XMMWORD PTR TxVector+560, xmm0
	movzx	eax, WORD PTR [rbp]
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR [rbp+2]
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rbp], cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rbp+2], cx
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR [rbp+4], ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR [rbp+6], ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR [rbp+8], ax
	movzx	eax, WORD PTR TxVector+698
	mov	WORD PTR [rbp+12], si
	sar	ax, 2
	mov	WORD PTR [rbp+14], si
	mov	WORD PTR [rbp+10], ax

; 109  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

	mov	eax, DWORD PTR TxVector
	mov	rbp, QWORD PTR [rsp+736]
	cmp	eax, 44					; 0000002cH
	jne	$LN78@Generate6M
	movdqa	xmm2, XMMWORD PTR TxVector+560
	movaps	XMMWORD PTR [rsp+688], xmm6
	xorps	xmm0, xmm0
	lea	edx, QWORD PTR [rax-39]
	movdqa	xmm3, xmm2
	movaps	XMMWORD PTR [rsp+672], xmm7
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+656], xmm8
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+640], xmm9
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movaps	XMMWORD PTR [rsp+624], xmm10
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	movaps	XMMWORD PTR [rsp+608], xmm11
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movaps	XMMWORD PTR [rsp+592], xmm12
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movaps	XMMWORD PTR [rsp+576], xmm13
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movaps	XMMWORD PTR [rsp+560], xmm14
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	lea	rcx, OFFSET FLAT:TxVector+1276
	pmulhrsw xmm4, xmm11
	lea	rax, OFFSET FLAT:TxVector+640
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	9
$LL83@Generate6M:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r12+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL83@Generate6M
	movaps	xmm14, XMMWORD PTR [rsp+560]
	movaps	xmm13, XMMWORD PTR [rsp+576]
	movaps	xmm12, XMMWORD PTR [rsp+592]
	movaps	xmm11, XMMWORD PTR [rsp+608]
	movaps	xmm10, XMMWORD PTR [rsp+624]
	movaps	xmm9, XMMWORD PTR [rsp+640]
	movaps	xmm8, XMMWORD PTR [rsp+656]
	movaps	xmm7, XMMWORD PTR [rsp+672]
	movaps	xmm6, XMMWORD PTR [rsp+688]
	movdqa	XMMWORD PTR rr1$1622594[rsp], xmm3
	mov	eax, DWORD PTR rr1$1622594[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$1622594[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$1622594[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
	npad	3
$LL920@Generate6M:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL920@Generate6M
	mov	eax, 176				; 000000b0H
	jmp	SHORT $LN72@Generate6M
$LN78@Generate6M:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN73@Generate6M
	mov	eax, 20
	npad	5
$LL965@Generate6M:
	movdqa	xmm1, XMMWORD PTR [rdi]
	movdqa	xmm0, XMMWORD PTR [rdi+16]
	add	rbx, 16
	add	rdi, 32					; 00000020H
	sub	rax, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL965@Generate6M
	mov	eax, 160				; 000000a0H
	jmp	SHORT $LN72@Generate6M
$LN73@Generate6M:
	mov	eax, esi
$LN72@Generate6M:

; 110  : }

	mov	rbx, QWORD PTR [rsp+760]
	add	rsp, 704				; 000002c0H
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
?Generate6MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ENDP ; Generate6MSymbol
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD imagerel $LN1037
	DD	imagerel $LN1037+29
	DD	imagerel $unwind$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD imagerel $LN1037+29
	DD	imagerel $LN1037+1070
	DD	imagerel $chain$0$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD imagerel $LN1037+1070
	DD	imagerel $LN1037+1078
	DD	imagerel $chain$1$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD imagerel $LN1037+1078
	DD	imagerel $LN1037+2320
	DD	imagerel $chain$10$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD imagerel $LN1037+2320
	DD	imagerel $LN1037+2456
	DD	imagerel $chain$11$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD 021H
	DD	imagerel $LN1037+1070
	DD	imagerel $LN1037+1078
	DD	imagerel $chain$1$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD 012c321H
	DD	024e8c3H
	DD	025d8a0H
	DD	026c88eH
	DD	027b871H
	DD	028a84fH
	DD	029983dH
	DD	02a882bH
	DD	02b781aH
	DD	02c6808H
	DD	imagerel $LN1037+1070
	DD	imagerel $LN1037+1078
	DD	imagerel $chain$1$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD 021H
	DD	imagerel $LN1037
	DD	imagerel $LN1037+29
	DD	imagerel $unwind$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD 020821H
	DD	05e6408H
	DD	imagerel $LN1037
	DD	imagerel $LN1037+29
	DD	imagerel $unwind$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z DD 071001H
	DD	0613410H
	DD	05a0110H
	DD	07007c009H
	DD	05006H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx.h
xdata	ENDS
;	COMDAT ?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z
_TEXT	SEGMENT
rgbSignal$ = 32
rr1$2195681 = 48
temp$2195698 = 64
info$ = 752
pcOutput$ = 760
pcLast$ = 768
bRate$ = 776
usLength$ = 784
?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z PROC ; GenerateSignal, COMDAT

; 124  : {

$LN1037:
	mov	QWORD PTR [rsp+32], rbx
	push	rbp
	push	rdi
	push	r12
	sub	rsp, 720				; 000002d0H

; 125  :     char rgbSignal[4];
; 126  : 
; 127  :     *(unsigned int *)(rgbSignal) = GetSignal(bRate, usLength);

	movzx	r10d, WORD PTR usLength$[rsp]
	movzx	eax, r9b
	mov	QWORD PTR [rsp+752], rsi
	shl	r10d, 5
	mov	rsi, r8
	mov	rbx, rdx
	or	r10d, eax

; 128  : 
; 129  :     /*
; 130  :     KdPrint(("Rate code: %02x\n", bRate));
; 131  :     KdPrint(("Len: %d\n", usLength)); */
; 132  : 
; 133  :     // KdPrint(("Frame signal: %06x\n", (*(unsigned int *)(rgbSignal)) & 0xFFFFFF));
; 134  : 
; 135  :     return Generate6MSymbol(info, pcOutput, pcLast, rgbSignal, 0);

	lea	r9, QWORD PTR rgbSignal$[rsp]
	lea	rbp, OFFSET FLAT:__ImageBase
	mov	ecx, r10d
	lea	r8, OFFSET FLAT:TxVector+25
	shr	ecx, 16
	xor	ecx, r10d
	mov	eax, ecx
	shr	eax, 8
	xor	ecx, eax
	mov	eax, ecx
	shr	eax, 4
	xor	ecx, eax
	mov	eax, ecx
	shr	eax, 2
	xor	ecx, eax
	lea	eax, DWORD PTR [rcx+rcx]
	xor	eax, ecx
	and	eax, 2
	shl	eax, 16
	or	eax, r10d
	mov	r10d, 3
	mov	DWORD PTR rgbSignal$[rsp], eax
	movzx	eax, BYTE PTR TxVector+24
$LL9@GenerateSi:
	movzx	edx, BYTE PTR [r9]
	movzx	eax, al
	add	r8, 2
	shl	eax, 8
	inc	r9
	movsxd	rcx, eax
	or	rcx, rdx
	movzx	eax, WORD PTR CONV_ENCODER_1_2_LUT[rbp+rcx*2]
	mov	WORD PTR [r8-2], ax
	mov	al, dl
	shr	al, 2
	sub	r10, 1
	mov	BYTE PTR TxVector+24, al
	jne	SHORT $LL9@GenerateSi
	movzx	eax, BYTE PTR TxVector+25
	mov	edx, 256				; 00000100H
	lea	r11, OFFSET FLAT:TxVector+26
	lea	ecx, DWORD PTR [rax+rax*2]
	lea	eax, DWORD PTR [rcx+rcx]
	cdqe
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[rbp+rax*2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[rbp+rax*2+2]
	movzx	r10d, WORD PTR INTERLEAVE_6M_LUT[rbp+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	npad	11
$LL14@GenerateSi:
	movzx	eax, BYTE PTR [r11]
	inc	r11
	add	eax, edx
	add	edx, 256				; 00000100H
	lea	eax, DWORD PTR [rax+rax*2]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[rbp+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[rbp+rax*2+2]
	or	r10w, WORD PTR INTERLEAVE_6M_LUT[rbp+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	cmp	edx, 1536				; 00000600H
	jb	SHORT $LL14@GenerateSi
	lea	rdx, OFFSET FLAT:TxVector+112
	lea	r9, OFFSET FLAT:TxVector+61
	mov	r10d, 6
	mov	r8, rdx
	npad	10
$LL19@GenerateSi:
	movzx	eax, BYTE PTR [r9]
	add	r8, 32					; 00000020H
	inc	r9
	shl	eax, 3
	sub	r10, 1
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[rbp+rcx*4]
	mov	QWORD PTR [r8-32], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[rbp+rcx*4+8]
	mov	QWORD PTR [r8-24], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[rbp+rcx*4+16]
	mov	QWORD PTR [r8-16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[rbp+rcx*4+24]
	mov	QWORD PTR [r8-8], rax
	jne	SHORT $LL19@GenerateSi
	mov	ecx, 38					; 00000026H
	lea	r8, OFFSET FLAT:TxVector+456
$LL33@GenerateSi:
	cmp	ecx, 57					; 00000039H
	je	SHORT $LN32@GenerateSi
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN32@GenerateSi
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN32@GenerateSi:
	inc	ecx
	add	r8, 4
	cmp	ecx, 64					; 00000040H
	jb	SHORT $LL33@GenerateSi
	mov	ecx, 1
	lea	r8, OFFSET FLAT:TxVector+308
	npad	3
$LL28@GenerateSi:
	cmp	ecx, 7
	je	SHORT $LN27@GenerateSi
	cmp	ecx, 21
	je	SHORT $LN27@GenerateSi
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN27@GenerateSi:
	inc	ecx
	add	r8, 4
	cmp	ecx, 26
	jbe	SHORT $LL28@GenerateSi
	mov	ecx, 10720				; 000029e0H
	xor	r12d, r12d
	mov	eax, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, cx
	mov	WORD PTR TxVector+532, cx
	mov	WORD PTR TxVector+476, cx
	lea	rcx, QWORD PTR temp$2195698[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	mov	WORD PTR TxVector+334, r12w
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, r12w
	mov	WORD PTR TxVector+534, r12w
	mov	WORD PTR TxVector+478, r12w
	call	memset
	lea	rcx, QWORD PTR temp$2195698[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2195698[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2195698[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:TxVector+688
	lea	rdx, OFFSET FLAT:?FFT128LUTMap@@3QBFB	; FFT128LUTMap
	mov	r8, r11
	lea	r9, OFFSET FLAT:?FFT128LUTMap@@3QBFB+256
	npad	4
$LL43@GenerateSi:
	movsx	rax, WORD PTR [rdx]
	add	rdx, 2
	add	r8, 4
	cmp	rdx, r9
	mov	ecx, DWORD PTR temp$2195698[rsp+rax*4]
	mov	DWORD PTR [r8-4], ecx
	jl	SHORT $LL43@GenerateSi
	mov	eax, 32					; 00000020H
	npad	2
$LL40@GenerateSi:
	movdqa	xmm0, XMMWORD PTR [r11]
	add	r11, 16
	sub	rax, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [r11-16], xmm0
	jne	SHORT $LL40@GenerateSi
	lea	rdi, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rdi
	call	memcpy
	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	ecx, WORD PTR TxVector+568
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR [rsi]
	movdqa	XMMWORD PTR TxVector+560, xmm0
	movzx	eax, WORD PTR [rsi]
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR [rsi+2]
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rsi], cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rsi+2], cx
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR [rsi+4], ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR [rsi+6], ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR [rsi+8], ax
	movzx	eax, WORD PTR TxVector+698
	mov	WORD PTR [rsi+12], r12w
	sar	ax, 2
	mov	WORD PTR [rsi+14], r12w
	mov	WORD PTR [rsi+10], ax
	mov	eax, DWORD PTR TxVector
	mov	rsi, QWORD PTR [rsp+752]
	cmp	eax, 44					; 0000002cH
	jne	$LN82@GenerateSi
	movdqa	xmm2, XMMWORD PTR TxVector+560
	movaps	XMMWORD PTR [rsp+704], xmm6
	xorps	xmm0, xmm0
	lea	edx, QWORD PTR [rax-39]
	movdqa	xmm3, xmm2
	movaps	XMMWORD PTR [rsp+688], xmm7
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+672], xmm8
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+656], xmm9
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movaps	XMMWORD PTR [rsp+640], xmm10
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	movaps	XMMWORD PTR [rsp+624], xmm11
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movaps	XMMWORD PTR [rsp+608], xmm12
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movaps	XMMWORD PTR [rsp+592], xmm13
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movaps	XMMWORD PTR [rsp+576], xmm14
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	lea	rcx, OFFSET FLAT:TxVector+1276
	pmulhrsw xmm4, xmm11
	lea	rax, OFFSET FLAT:TxVector+640
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	8
$LL87@GenerateSi:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[rbp+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL87@GenerateSi
	movaps	xmm14, XMMWORD PTR [rsp+576]
	movaps	xmm13, XMMWORD PTR [rsp+592]
	movaps	xmm12, XMMWORD PTR [rsp+608]
	movaps	xmm11, XMMWORD PTR [rsp+624]
	movaps	xmm10, XMMWORD PTR [rsp+640]
	movaps	xmm9, XMMWORD PTR [rsp+656]
	movaps	xmm8, XMMWORD PTR [rsp+672]
	movaps	xmm7, XMMWORD PTR [rsp+688]
	movaps	xmm6, XMMWORD PTR [rsp+704]
	movdqa	XMMWORD PTR rr1$2195681[rsp], xmm3
	mov	eax, DWORD PTR rr1$2195681[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2195681[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2195681[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
	npad	3
$LL924@GenerateSi:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL924@GenerateSi
	mov	eax, 176				; 000000b0H
	jmp	SHORT $LN76@GenerateSi
$LN82@GenerateSi:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN77@GenerateSi
	mov	eax, 20
	npad	5
$LL969@GenerateSi:
	movdqa	xmm1, XMMWORD PTR [rdi]
	movdqa	xmm0, XMMWORD PTR [rdi+16]
	add	rbx, 16
	add	rdi, 32					; 00000020H
	sub	rax, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL969@GenerateSi
	mov	eax, 160				; 000000a0H
	jmp	SHORT $LN76@GenerateSi
$LN77@GenerateSi:
	mov	eax, r12d
$LN76@GenerateSi:

; 136  : }

	mov	rbx, QWORD PTR [rsp+776]
	add	rsp, 720				; 000002d0H
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
?GenerateSignal@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@EG@Z ENDP ; GenerateSignal
PUBLIC	BB11ATxFrameMod
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx_fe.c
pdata	SEGMENT
$pdata$BB11ATxFrameMod DD imagerel $LN20
	DD	imagerel $LN20+264
	DD	imagerel $unwind$BB11ATxFrameMod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BB11ATxFrameMod DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT BB11ATxFrameMod
_TEXT	SEGMENT
pPacket$ = 48
BB11ATxFrameMod PROC					; COMDAT

; 19   : {

$LN20:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 20   :     KIRQL OldIrql;
; 21   :     HRESULT hr;
; 22   : 
; 23   : 	if (pPacket->PacketSize + 4 > INPUT_MAX)
; 24   :     {
; 25   :         KdPrint(("TX_FAIL: input size too large, given %d, "
; 26   :                     "expect less than or equal to %d.\n", pPacket->PacketSize, INPUT_MAX - 4));
; 27   :         return E_FAIL;
; 28   :     }
; 29   : 
; 30   :     info->ulRadom = BBRAND(&info->ulRandSeed);

	call	QWORD PTR __imp_rand
	mov	DWORD PTR TxVector+20, eax

; 31   : 	KeAcquireSpinLock(&info->txLock, &OldIrql);
; 32   : 
; 33   :     switch (info->ti_uiDataRate)

	mov	eax, DWORD PTR TxVector+4
	add	eax, -8					; fffffff8H
	cmp	eax, 7
	ja	$LN1@BB11ATxFra
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN19@BB11ATxFra[rcx+rax*4]
	add	rdx, rcx
	jmp	rdx
$LN9@BB11ATxFra:

; 34   :     {
; 35   :         case DOT11A_RATE_6M:
; 36   :             hr = Dot11aTxFrameEncode6(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode6@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode6
$LN8@BB11ATxFra:

; 37   :             break;
; 38   :         case DOT11A_RATE_9M:
; 39   :             hr = Dot11aTxFrameEncode9(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode9
$LN7@BB11ATxFra:

; 40   :             break;
; 41   :         case DOT11A_RATE_12M:
; 42   :             hr = Dot11aTxFrameEncode12(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode12@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode12
$LN6@BB11ATxFra:

; 43   :             break;
; 44   :         case DOT11A_RATE_18M:
; 45   :             hr = Dot11aTxFrameEncode18(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode18@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode18
$LN5@BB11ATxFra:

; 46   :             break;
; 47   :         case DOT11A_RATE_24M:
; 48   :             hr = Dot11aTxFrameEncode24(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode24@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode24
$LN4@BB11ATxFra:

; 49   :             break;
; 50   :         case DOT11A_RATE_36M:
; 51   :             hr = Dot11aTxFrameEncode36(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode36@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode36
$LN3@BB11ATxFra:

; 52   :             break;
; 53   :         case DOT11A_RATE_48M:
; 54   :             hr = Dot11aTxFrameEncode48(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode48@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode48
$LN2@BB11ATxFra:

; 55   :             break;
; 56   :         case DOT11A_RATE_54M:
; 57   :             hr = Dot11aTxFrameEncode54(info, pPacket);

	lea	rcx, OFFSET FLAT:TxVector
	mov	rdx, rbx

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode54
$LN1@BB11ATxFra:

; 58   :             break;
; 59   :         default:
; 60   :             KdPrint(("TX_FAIL: rate %d not support\n", info->ti_uiDataRate));
; 61   :             hr = E_FAIL;

	mov	eax, -2147467259			; ffffffff80004005H

; 62   :             break;
; 63   :     }
; 64   : 
; 65   : 	KeReleaseSpinLock(&info->txLock, OldIrql);
; 66   : 
; 67   :     return hr;
; 68   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
	npad	3
$LN19@BB11ATxFra:
	DD	$LN3@BB11ATxFra
	DD	$LN5@BB11ATxFra
	DD	$LN7@BB11ATxFra
	DD	$LN9@BB11ATxFra
	DD	$LN2@BB11ATxFra
	DD	$LN4@BB11ATxFra
	DD	$LN6@BB11ATxFra
	DD	$LN8@BB11ATxFra
BB11ATxFrameMod ENDP
_TEXT	ENDS
END
