; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?ConvEncode_3_4_9MSpecial1@@YAXPEAD0AEAE@Z	; ConvEncode_3_4_9MSpecial1
PUBLIC	?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ; Generate9MSymbol1
PUBLIC	?ConvEncode_3_4_9MSpecial2@@YAXPEAD0AEAE@Z	; ConvEncode_3_4_9MSpecial2
PUBLIC	?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ; Generate9MSymbol2
PUBLIC	?Scramble11a@@YAXPEAU_MDL@@PEADIIK@Z		; Scramble11a
PUBLIC	?ClearWindow@@YAXPEAU_COMPLEX16@@@Z		; ClearWindow
	ORG $+12
rgbLongPrePositive DB 00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
gAGCLut	DD	0fffffff9H
	DD	0fffffffaH
	DD	0fffffffbH
	DD	0fffffffcH
	DD	0fffffffdH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx_tpl.h
pdata	SEGMENT
$pdata$?Scramble11a@@YAXPEAU_MDL@@PEADIIK@Z DD imagerel $LN16
	DD	imagerel $LN16+272
	DD	imagerel $unwind$?Scramble11a@@YAXPEAU_MDL@@PEADIIK@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Scramble11a@@YAXPEAU_MDL@@PEADIIK@Z DD 040f01H
	DD	02740aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?Scramble11a@@YAXPEAU_MDL@@PEADIIK@Z
_TEXT	SEGMENT
pmdlIn$ = 8
pbOutput$ = 16
uiOutTotal$ = 24
uiCRC32$ = 32
__formal$ = 40
?Scramble11a@@YAXPEAU_MDL@@PEADIIK@Z PROC		; Scramble11a, COMDAT

; 9    : {

$LN16:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	mov	DWORD PTR [rsp+32], r9d
	mov	ebx, r9d

; 10   :     unsigned char * pbIn;
; 11   :     unsigned char * pbOut = (unsigned char *)
; 12   :         (pbOutput + SERVICE_LEN_IN_BYTES);
; 13   :     unsigned char * pbOutEnd = (unsigned char *)
; 14   :         (pbOutput + uiOutTotal);

	mov	r9d, r8d

; 15   :     unsigned int uiLen;
; 16   :     unsigned int i;
; 17   : 	
; 18   :     unsigned char bReg = 0xFF; // no random
; 19   : 	
; 20   : 	// scramble the services bits
; 21   :     pbOutput[0] = (bReg = *(SCRAMBLE_11A(bReg >> 1)));
; 22   :     pbOutput[1] = (bReg = *(SCRAMBLE_11A(bReg >> 1)));

	mov	r8b, 79					; 0000004fH
	add	r9, rdx
	mov	r11, rcx
	lea	r10, QWORD PTR [rdx+2]
	mov	BYTE PTR [rdx], 112			; 00000070H

; 23   : 
; 24   :     while (pmdlIn)

	lea	rdi, OFFSET FLAT:SCRAMBLE_11A_LUT
	mov	BYTE PTR [rdx+1], r8b
	test	rcx, rcx
	je	SHORT $LN6@Scramble11
	npad	11
$LL7@Scramble11:

; 25   :     {
; 26   :         pbIn = (unsigned char *)(pmdlIn->StartVa) + pmdlIn->ByteOffset;

	mov	ecx, DWORD PTR [r11+44]

; 27   :         uiLen = pmdlIn->ByteCount;

	mov	eax, DWORD PTR [r11+40]
	add	rcx, QWORD PTR [r11+32]

; 28   : 
; 29   :         for (i = 0; i < uiLen; i++)

	test	eax, eax
	je	SHORT $LN3@Scramble11

; 25   :     {
; 26   :         pbIn = (unsigned char *)(pmdlIn->StartVa) + pmdlIn->ByteOffset;

	mov	rdx, rax
$LL5@Scramble11:

; 30   :         {
; 31   :             *(pbOut++) = pbIn[i] ^ (bReg = *(SCRAMBLE_11A(bReg >> 1)));

	movzx	eax, r8b
	inc	r10
	inc	rcx
	shr	rax, 1
	movzx	r8d, BYTE PTR [rax+rdi]
	movzx	eax, BYTE PTR [rcx-1]
	xor	al, r8b
	sub	rdx, 1
	mov	BYTE PTR [r10-1], al
	jne	SHORT $LL5@Scramble11
$LN3@Scramble11:

; 32   :         }
; 33   : 
; 34   :         pmdlIn = pmdlIn->Next;

	mov	r11, QWORD PTR [r11]
	test	r11, r11
	jne	SHORT $LL7@Scramble11
$LN6@Scramble11:

; 35   :     }
; 36   : 
; 37   : 	#ifdef _DBG_PLOT_
; 38   : 		PlotText ( "MyLog", "CRC32 %08X\n", uiCRC32 );
; 39   : 	#endif
; 40   : 	
; 41   :     // Scramble crc32
; 42   :     pbIn = (unsigned char *)(&uiCRC32);
; 43   :     *(pbOut++) = pbIn[0] ^ (bReg = *(SCRAMBLE_11A(bReg >> 1)));

	movzx	eax, r8b

; 44   :     *(pbOut++) = pbIn[1] ^ (bReg = *(SCRAMBLE_11A(bReg >> 1)));
; 45   :     *(pbOut++) = pbIn[2] ^ (bReg = *(SCRAMBLE_11A(bReg >> 1)));
; 46   :     *(pbOut++) = pbIn[3] ^ (bReg = *(SCRAMBLE_11A(bReg >> 1)));
; 47   : 
; 48   :     // Append the PSDU with at least 6 zero bits as tail field
; 49   :     // ref: 802.11a-1999 17.3.2
; 50   :     // We should replace the six scrambled zero bits following the message end with six
; 51   : 	// non-scrambled zero bits!
; 52   : 	*(pbOut++) = (bReg = *(SCRAMBLE_11A(bReg >> 1))) & 0xC0;

	add	r10, 5
	shr	rax, 1
	movzx	ecx, BYTE PTR [rax+rdi]
	xor	bl, cl
	mov	rax, rcx
	shr	rax, 1
	mov	BYTE PTR [r10-5], bl
	movzx	ecx, BYTE PTR [rax+rdi]
	movzx	eax, BYTE PTR uiCRC32$[rsp+1]
	xor	al, cl
	mov	BYTE PTR [r10-4], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR [rax+rdi]
	movzx	eax, BYTE PTR uiCRC32$[rsp+2]
	xor	al, cl
	mov	BYTE PTR [r10-3], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR [rax+rdi]
	movzx	eax, BYTE PTR uiCRC32$[rsp+3]
	xor	al, cl
	mov	BYTE PTR [r10-2], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR [rax+rdi]
	movzx	eax, cl
	and	al, 192					; 000000c0H
	mov	BYTE PTR [r10-1], al

; 53   : 
; 54   :     // Append more zero bytes
; 55   :     while (pbOut != pbOutEnd)

	cmp	r10, r9
	je	SHORT $LN1@Scramble11
	npad	6
$LL2@Scramble11:

; 56   :     {
; 57   :         *(pbOut++) = (bReg = *(SCRAMBLE_11A(bReg >> 1)));

	movzx	eax, cl
	inc	r10
	shr	rax, 1
	mov	cl, BYTE PTR [rax+rdi]
	mov	BYTE PTR [r10-1], cl
	cmp	r10, r9
	jne	SHORT $LL2@Scramble11
$LN1@Scramble11:

; 58   :     }
; 59   : 	
; 60   : 	
; 61   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?Scramble11a@@YAXPEAU_MDL@@PEADIIK@Z ENDP		; Scramble11a
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\convenc.h
pdata	SEGMENT
$pdata$?ConvEncode_3_4_9MSpecial2@@YAXPEAD0AEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+293
	DD	imagerel $unwind$?ConvEncode_3_4_9MSpecial2@@YAXPEAD0AEAE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ConvEncode_3_4_9MSpecial2@@YAXPEAD0AEAE@Z DD 081401H
	DD	047414H
	DD	03640fH
	DD	02540aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?ConvEncode_3_4_9MSpecial2@@YAXPEAD0AEAE@Z
_TEXT	SEGMENT
pbInput$ = 8
pbOutput$ = 16
bConvEncoderReg$ = 24
?ConvEncode_3_4_9MSpecial2@@YAXPEAD0AEAE@Z PROC		; ConvEncode_3_4_9MSpecial2, COMDAT

; 119  : {

$LN3:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi

; 120  :     unsigned char c1, c2, c3, c4, c5;
; 121  :     unsigned short b1, b2, b3, b4, b5, b6;
; 122  : 
; 123  :     c1 = (unsigned char)(pbInput[0]);
; 124  :     c2 = (unsigned char)(pbInput[1]);
; 125  :     c3 = (unsigned char)(pbInput[2]);
; 126  :     c4 = (unsigned char)(pbInput[3]);
; 127  :     c5 = (unsigned char)(pbInput[4]);

	movzx	edi, BYTE PTR [rcx+4]
	movzx	r11d, BYTE PTR [rcx+1]
	movzx	ebx, BYTE PTR [rcx+3]
	movzx	r10d, BYTE PTR [rcx]
	mov	rsi, rdx
	mov	rbp, r8
	movzx	r8d, BYTE PTR [rcx+2]

; 128  : 
; 129  :     b1 = ((c2 & 0x3) << 10) | ((c1 & 0xF0) << 2) | bConvEncoderReg;

	movzx	eax, r11b
	and	al, 3

; 130  :     b2 = (c2 << 4) | (c1 >> 4);
; 131  :     b3 = ((c3 & 0x3F) << 6) | (c2 >> 2);
; 132  :     b4 = ((c4 & 0xF) << 8) | c3;
; 133  :     b5 = ((c5 & 0x3) << 10) | (c4 << 2) | (c3 >> 6);
; 134  :     b6 = (c5 << 4) | (c4 >> 4);
; 135  : 
; 136  :     pbOutput[0] = *(CONV_ENCODER_3_4(b1));

	movzx	r9d, al
	movzx	eax, r10b
	and	al, 240					; 000000f0H
	shl	r9w, 8
	movzx	ecx, al
	movzx	eax, BYTE PTR [rbp]
	or	r9w, cx
	shl	r9w, 2
	movzx	ecx, r9w
	lea	r9, OFFSET FLAT:CONV_ENCODER_3_4_LUT
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+r9]
	mov	BYTE PTR [rdx], al

; 137  :     pbOutput[1] = *(CONV_ENCODER_3_4(b2));

	movzx	eax, r11w
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r10
	shr	rax, 4
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+r9]
	mov	BYTE PTR [rdx+1], al
	movzx	eax, r8b
	and	al, 63					; 0000003fH

; 138  :     pbOutput[2] = *(CONV_ENCODER_3_4(b3));

	movzx	ecx, al
	mov	rax, r11
	shr	rax, 2
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	eax, BYTE PTR [rdx+r9]
	mov	rdx, r8
	mov	BYTE PTR [rsi+2], al
	movzx	eax, bl
	shr	rdx, 6
	and	al, 15

; 139  :     pbOutput[3] = *(CONV_ENCODER_3_4(b4));

	movzx	ecx, al
	shl	cx, 8
	movzx	eax, cx
	or	rax, r8
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rsi+3], al
	movzx	eax, dil
	and	al, 3

; 140  :     pbOutput[4] = *(CONV_ENCODER_3_4(b5));

	movzx	ecx, al
	shl	cx, 8
	or	cx, bx
	shl	cx, 2
	movzx	eax, cx
	or	rax, rdx
	movzx	eax, BYTE PTR [rax+r9]
	mov	BYTE PTR [rsi+4], al

; 141  :     pbOutput[5] = *(CONV_ENCODER_3_4(b6));

	movzx	eax, di

; 142  : 
; 143  :     bConvEncoderReg = (c5 >> 2);

	shr	dil, 2
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, rbx

; 144  : }

	mov	rbx, QWORD PTR [rsp+8]
	shr	rax, 4
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+r9]
	mov	BYTE PTR [rsi+5], al
	mov	rsi, QWORD PTR [rsp+24]
	mov	BYTE PTR [rbp], dil
	mov	rbp, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+32]
	ret	0
?ConvEncode_3_4_9MSpecial2@@YAXPEAD0AEAE@Z ENDP		; ConvEncode_3_4_9MSpecial2
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ConvEncode_3_4_9MSpecial1@@YAXPEAD0AEAE@Z DD imagerel $LN3
	DD	imagerel $LN3+283
	DD	imagerel $unwind$?ConvEncode_3_4_9MSpecial1@@YAXPEAD0AEAE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ConvEncode_3_4_9MSpecial1@@YAXPEAD0AEAE@Z DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0c016H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?ConvEncode_3_4_9MSpecial1@@YAXPEAD0AEAE@Z
_TEXT	SEGMENT
pbInput$ = 16
pbOutput$ = 24
bConvEncoderReg$ = 32
?ConvEncode_3_4_9MSpecial1@@YAXPEAD0AEAE@Z PROC		; ConvEncode_3_4_9MSpecial1, COMDAT

; 90   : {

$LN3:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12

; 91   :     unsigned char c1, c2, c3, c4, c5;
; 92   :     unsigned short b1, b2, b3, b4, b5, b6;
; 93   : 
; 94   :     c1 = (unsigned char)(pbInput[0]);

	movzx	r10d, BYTE PTR [rcx]

; 95   :     c2 = (unsigned char)(pbInput[1]);
; 96   :     c3 = (unsigned char)(pbInput[2]);
; 97   :     c4 = (unsigned char)(pbInput[3]);

	movzx	esi, BYTE PTR [rcx+3]
	movzx	r11d, BYTE PTR [rcx+1]

; 98   :     c5 = (unsigned char)(pbInput[4]);

	movzx	ebx, BYTE PTR [rcx+4]
	mov	rdi, rdx

; 99   : 
; 100  :     b1 = ((c1 & 0x3F) << 6) | bConvEncoderReg;
; 101  :     b2 = ((c2 & 0xF) << 8) | c1;
; 102  :     b3 = ((c3 & 0x3) << 10) | (c2 << 2) | (c1 >> 6);
; 103  :     b4 = (c3 << 4) | (c2 >> 4);
; 104  :     b5 = ((c4 & 0x3F) << 6) | (c3 >> 2);
; 105  :     b6 = ((c5 & 0xF) << 8) | c4;
; 106  : 
; 107  :     pbOutput[0] = *(CONV_ENCODER_3_4(b1));

	lea	r12, OFFSET FLAT:CONV_ENCODER_3_4_LUT
	mov	rbp, r8
	movzx	r8d, BYTE PTR [rcx+2]
	movzx	eax, r10b
	and	al, 63					; 0000003fH
	and	bl, 15
	movzx	ecx, al
	movzx	eax, BYTE PTR [rbp]
	shl	cx, 6
	movzx	r9d, cx
	or	r9, rax
	movzx	eax, BYTE PTR [r9+r12]
	mov	BYTE PTR [rdx], al
	movzx	eax, r11b
	mov	rdx, r10
	and	al, 15
	shr	rdx, 6

; 108  :     pbOutput[1] = *(CONV_ENCODER_3_4(b2));

	movzx	ecx, al
	shl	cx, 8
	movzx	eax, cx
	or	rax, r10
	movzx	eax, BYTE PTR [rax+r12]
	mov	BYTE PTR [rdi+1], al
	movzx	eax, r8b
	and	al, 3

; 109  :     pbOutput[2] = *(CONV_ENCODER_3_4(b3));

	movzx	ecx, al
	shl	cx, 8
	or	cx, r11w
	shl	cx, 2
	movzx	eax, cx
	or	rax, rdx
	movzx	eax, BYTE PTR [rax+r12]
	mov	BYTE PTR [rdi+2], al

; 110  :     pbOutput[3] = *(CONV_ENCODER_3_4(b4));

	movzx	eax, r8w
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r11
	shr	rax, 4
	or	rcx, rax
	movzx	eax, BYTE PTR [rcx+r12]
	mov	BYTE PTR [rdi+3], al
	movzx	eax, sil
	and	al, 63					; 0000003fH

; 111  :     pbOutput[4] = *(CONV_ENCODER_3_4(b5));

	movzx	ecx, al
	mov	rax, r8
	shr	rax, 2
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	eax, BYTE PTR [rdx+r12]
	movzx	edx, bl

; 112  :     pbOutput[5] = *(CONV_ENCODER_3_4(b6));
; 113  : 
; 114  :     bConvEncoderReg = ((c5 & 0xF) << 2) | ((c4 >> 6) & 0x3);
; 115  : }

	mov	rbx, QWORD PTR [rsp+16]
	mov	BYTE PTR [rdi+4], al
	movzx	eax, dx
	shl	dl, 2
	shl	ax, 8
	movzx	ecx, ax
	or	rcx, rsi
	shr	sil, 6
	movzx	eax, BYTE PTR [rcx+r12]
	or	dl, sil
	mov	rsi, QWORD PTR [rsp+32]
	mov	BYTE PTR [rdi+5], al
	mov	rdi, QWORD PTR [rsp+40]
	mov	BYTE PTR [rbp], dl
	mov	rbp, QWORD PTR [rsp+24]
	pop	r12
	ret	0
?ConvEncode_3_4_9MSpecial1@@YAXPEAD0AEAE@Z ENDP		; ConvEncode_3_4_9MSpecial1
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx_tpl.h
;	COMDAT ?ClearWindow@@YAXPEAU_COMPLEX16@@@Z
_TEXT	SEGMENT
pcWindow$ = 8
?ClearWindow@@YAXPEAU_COMPLEX16@@@Z PROC		; ClearWindow, COMDAT

; 66   : 	set_zero(*(vcs*)pcWindow);

	xorps	xmm0, xmm0
	movaps	XMMWORD PTR [rcx], xmm0

; 67   : }

	ret	0
?ClearWindow@@YAXPEAU_COMPLEX16@@@Z ENDP		; ClearWindow
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+25
	DD	imagerel $LN1040+1047
	DD	imagerel $chain$3$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+1047
	DD	imagerel $LN1040+1781
	DD	imagerel $chain$4$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+1781
	DD	imagerel $LN1040+1789
	DD	imagerel $chain$5$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+1789
	DD	imagerel $LN1040+3024
	DD	imagerel $chain$14$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$15$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+3024
	DD	imagerel $LN1040+3182
	DD	imagerel $chain$15$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$15$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1040+1781
	DD	imagerel $LN1040+1789
	DD	imagerel $chain$5$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 012c321H
	DD	023e8c3H
	DD	024d8a0H
	DD	025c88eH
	DD	026b871H
	DD	027a84fH
	DD	028983dH
	DD	029882bH
	DD	02a781aH
	DD	02b6808H
	DD	imagerel $LN1040+1781
	DD	imagerel $LN1040+1789
	DD	imagerel $chain$5$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 020021H
	DD	058e400H
	DD	imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 081a21H
	DD	058e41aH
	DD	059c411H
	DD	05a640dH
	DD	0605404H
	DD	imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 061001H
	DD	05b0110H
	DD	0d007f009H
	DD	030047005H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
xdata	ENDS
;	COMDAT ?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
_TEXT	SEGMENT
rr1$1609616 = 32
temp$1603226 = 48
info$ = 768
pcOutput$ = 776
pcLast$ = 784
pbData$ = 792
bPilotSgn$ = 800
?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z PROC ; Generate9MSymbol2, COMDAT

; 131  : {

$LN1040:
	mov	rax, rsp
	push	rbx
	push	rdi
	push	r13
	push	r15
	sub	rsp, 728				; 000002d8H

; 132  :     ConvEncode_3_4_9MSpecial2(pbData, info->bEncoded, info->bConvEncoderReg);

	movzx	r11d, BYTE PTR [r9+1]
	movzx	r10d, BYTE PTR [r9]
	mov	QWORD PTR [rax+8], rbp
	movzx	ebp, BYTE PTR [r9+3]
	mov	QWORD PTR [rax-40], rsi
	mov	QWORD PTR [rax-48], r12
	movzx	r12d, BYTE PTR [r9+4]
	mov	QWORD PTR [rax-56], r14
	lea	r15, OFFSET FLAT:__ImageBase
	mov	r13, rdx
	movzx	eax, r11b
	mov	r14, r8
	movzx	r8d, BYTE PTR [r9+2]
	and	al, 3
	movzx	r9d, al
	movzx	eax, r10b
	and	al, 240					; 000000f0H
	shl	r9w, 8
	movzx	ecx, al
	movzx	eax, BYTE PTR TxVector+24
	or	r9w, cx
	shl	r9w, 2
	movzx	ecx, r9w
	or	rcx, rax
	movzx	eax, r11w
	movzx	r9d, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r15]
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r10
	mov	BYTE PTR TxVector+25, r9b
	shr	rax, 4
	or	rcx, rax
	movzx	eax, r8b
	movzx	ebx, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r15]
	and	al, 63					; 0000003fH
	movzx	ecx, al
	mov	rax, r11
	mov	BYTE PTR TxVector+26, bl
	shr	rax, 2
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	eax, bpl
	movzx	edi, BYTE PTR CONV_ENCODER_3_4_LUT[rdx+r15]
	and	al, 15
	mov	rdx, r8
	movzx	ecx, al
	shr	rdx, 6
	mov	BYTE PTR TxVector+27, dil
	shl	cx, 8
	movzx	eax, cx
	or	rax, r8
	movzx	esi, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r15]
	movzx	eax, r12b
	and	al, 3
	mov	BYTE PTR TxVector+28, sil
	movzx	ecx, al
	shl	cx, 8
	or	cx, bp
	shl	cx, 2
	movzx	eax, cx
	or	rax, rdx
	movzx	edx, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r15]
	movzx	eax, r12w
	shl	ax, 4
	mov	BYTE PTR TxVector+29, dl
	movzx	ecx, ax
	mov	rax, rbp
	shr	rax, 4
	or	rcx, rax
	shr	r12b, 2
	movzx	r10d, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r15]

; 133  :     InterleaveBPSK(info->bEncoded, info->bInterleaved);

	lea	ecx, DWORD PTR [r9+r9*2]
	mov	BYTE PTR TxVector+24, r12b
	lea	eax, DWORD PTR [rcx+rcx]
	mov	BYTE PTR TxVector+30, r10b
	cdqe
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	movzx	r11d, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [rbx+rbx*2+768]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r11w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [rdi+rdi*2+1536]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r11w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [rsi+rsi*2+2304]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r11w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [rdx+rdx*2+3072]

; 134  :     MapBPSK_11a(info->bInterleaved, info->cMapped);

	lea	rdx, OFFSET FLAT:TxVector+112
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r11w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [r10+r10*2+3840]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r11w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+65, r11w
	movzx	eax, r8b
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR [rdx], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR [rdx+16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR [rdx+24], rax
	movzx	eax, BYTE PTR TxVector+62
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+144], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+152], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+160], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR TxVector[r15+168], rax
	movzx	eax, BYTE PTR TxVector+63
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+176], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+184], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+192], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR TxVector[r15+200], rax
	movzx	eax, BYTE PTR TxVector+64
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+208], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+216], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+224], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR TxVector[r15+232], rax
	movzx	eax, BYTE PTR TxVector+65
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+240], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+248], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+256], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	r12, QWORD PTR [rsp+712]
	mov	rsi, QWORD PTR [rsp+720]
	mov	rbp, QWORD PTR [rsp+768]
	mov	QWORD PTR TxVector[r15+264], rax
	movzx	eax, BYTE PTR TxVector+66
	shl	eax, 3

; 135  : 
; 136  :     AddPilot(info->cMapped, info->cPilotAdded, bPilotSgn);

	lea	r8, OFFSET FLAT:TxVector+456
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+272], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+280], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+288], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	ecx, 38					; 00000026H
	mov	QWORD PTR TxVector[r15+296], rax
$LL26@Generate9M:
	cmp	ecx, 57					; 00000039H
	je	SHORT $LN25@Generate9M
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN25@Generate9M
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN25@Generate9M:
	inc	ecx
	add	r8, 4
	cmp	ecx, 64					; 00000040H
	jb	SHORT $LL26@Generate9M
	mov	ecx, 1
	lea	r8, OFFSET FLAT:TxVector+308
$LL21@Generate9M:
	cmp	ecx, 7
	je	SHORT $LN20@Generate9M
	cmp	ecx, 21
	je	SHORT $LN20@Generate9M
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN20@Generate9M:
	inc	ecx
	add	r8, 4
	cmp	ecx, 26
	jbe	SHORT $LL21@Generate9M
	cmp	BYTE PTR bPilotSgn$[rsp], 0
	jne	SHORT $LN16@Generate9M
	xor	edi, edi
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, di
	mov	WORD PTR TxVector+388, cx
	mov	WORD PTR TxVector+390, di
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, di
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, di
	jmp	SHORT $LN15@Generate9M
$LN16@Generate9M:
	xor	edi, edi
	mov	ecx, -10720				; ffffffffffffd620H
	mov	eax, 10720				; 000029e0H
	mov	WORD PTR TxVector+332, cx
	mov	WORD PTR TxVector+334, di
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, di
	mov	WORD PTR TxVector+532, cx
	mov	WORD PTR TxVector+534, di
	mov	WORD PTR TxVector+476, cx
	mov	WORD PTR TxVector+478, di
$LN15@Generate9M:

; 137  :     IFFT64x(info->cPilotAdded, info->cSymbol + COMPLEX_GI);

	lea	rcx, QWORD PTR temp$1603226[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$1603226[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1603226[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1603226[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:?FFT128LUTMap@@3QBFB+2
	lea	rdx, OFFSET FLAT:TxVector+696
	lea	r8, OFFSET FLAT:TxVector+1208
	npad	11
$LL36@Generate9M:
	movsx	rax, WORD PTR [r11-2]
	add	rdx, 16
	add	r11, 8
	cmp	rdx, r8
	mov	ecx, DWORD PTR temp$1603226[rsp+rax*4]
	movsx	rax, WORD PTR [r11-8]
	mov	DWORD PTR [rdx-24], ecx
	mov	ecx, DWORD PTR temp$1603226[rsp+rax*4]
	movsx	rax, WORD PTR [r11-6]
	mov	DWORD PTR [rdx-20], ecx
	mov	ecx, DWORD PTR temp$1603226[rsp+rax*4]
	movsx	rax, WORD PTR [r11-4]
	mov	DWORD PTR [rdx-16], ecx
	mov	ecx, DWORD PTR temp$1603226[rsp+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	jl	SHORT $LL36@Generate9M
	lea	rax, OFFSET FLAT:TxVector+688
	mov	ecx, 32					; 00000020H
	npad	7
$LL33@Generate9M:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL33@Generate9M

; 138  : 
; 139  :     CopyGI(info->cSymbol, info->cSymbol + 128);

	lea	rbx, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rbx
	call	memcpy

; 140  :     Window(info->cSymbol, pcLast);

	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	ecx, WORD PTR TxVector+568
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR [r14]
	movdqa	XMMWORD PTR TxVector+560, xmm0
	movzx	eax, WORD PTR [r14]
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR [r14+2]
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [r14], cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [r14+2], cx
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR [r14+4], ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR [r14+6], ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR [r14+8], ax
	movzx	eax, WORD PTR TxVector+698
	mov	WORD PTR [r14+12], di
	sar	ax, 2
	mov	WORD PTR [r14+14], di
	mov	WORD PTR [r14+10], ax

; 141  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

	mov	eax, DWORD PTR TxVector
	mov	r14, QWORD PTR [rsp+704]
	cmp	eax, 44					; 0000002cH
	jne	$LN75@Generate9M
	movdqa	xmm2, XMMWORD PTR TxVector+560
	movaps	XMMWORD PTR [rsp+688], xmm6
	xorps	xmm0, xmm0
	lea	edx, QWORD PTR [rax-39]
	movdqa	xmm3, xmm2
	movaps	XMMWORD PTR [rsp+672], xmm7
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+656], xmm8
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+640], xmm9
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movaps	XMMWORD PTR [rsp+624], xmm10
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	movaps	XMMWORD PTR [rsp+608], xmm11
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movaps	XMMWORD PTR [rsp+592], xmm12
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movaps	XMMWORD PTR [rsp+576], xmm13
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movaps	XMMWORD PTR [rsp+560], xmm14
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	lea	rcx, OFFSET FLAT:TxVector+1276
	pmulhrsw xmm4, xmm11
	lea	rax, OFFSET FLAT:TxVector+640
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	1
$LL80@Generate9M:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r15+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL80@Generate9M
	movaps	xmm14, XMMWORD PTR [rsp+560]
	movaps	xmm13, XMMWORD PTR [rsp+576]
	movaps	xmm12, XMMWORD PTR [rsp+592]
	movaps	xmm11, XMMWORD PTR [rsp+608]
	movaps	xmm10, XMMWORD PTR [rsp+624]
	movaps	xmm9, XMMWORD PTR [rsp+640]
	movaps	xmm8, XMMWORD PTR [rsp+656]
	movaps	xmm7, XMMWORD PTR [rsp+672]
	movaps	xmm6, XMMWORD PTR [rsp+688]
	movdqa	XMMWORD PTR rr1$1609616[rsp], xmm3
	mov	eax, DWORD PTR rr1$1609616[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$1609616[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$1609616[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
	npad	3
$LL917@Generate9M:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	r13, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r13-16], xmm1
	jne	SHORT $LL917@Generate9M
	mov	eax, 176				; 000000b0H

; 142  : }

	add	rsp, 728				; 000002d8H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbx
	ret	0

; 141  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

$LN75@Generate9M:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN70@Generate9M
	mov	eax, 20
	npad	8
$LL962@Generate9M:
	movdqa	xmm1, XMMWORD PTR [rbx]
	movdqa	xmm0, XMMWORD PTR [rbx+16]
	add	r13, 16
	add	rbx, 32					; 00000020H
	sub	rax, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r13-16], xmm1
	jne	SHORT $LL962@Generate9M
	mov	eax, 160				; 000000a0H

; 142  : }

	add	rsp, 728				; 000002d8H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbx
	ret	0

; 141  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

$LN70@Generate9M:
	mov	eax, edi

; 142  : }

	add	rsp, 728				; 000002d8H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbx
	ret	0
?Generate9MSymbol2@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ENDP ; Generate9MSymbol2
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+25
	DD	imagerel $LN1040+1032
	DD	imagerel $chain$3$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+1032
	DD	imagerel $LN1040+1765
	DD	imagerel $chain$4$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+1765
	DD	imagerel $LN1040+1773
	DD	imagerel $chain$5$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+1773
	DD	imagerel $LN1040+3008
	DD	imagerel $chain$14$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$15$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1040+3008
	DD	imagerel $LN1040+3166
	DD	imagerel $chain$15$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$15$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1040+1765
	DD	imagerel $LN1040+1773
	DD	imagerel $chain$5$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 012c321H
	DD	023e8c3H
	DD	024d8a0H
	DD	025c88eH
	DD	026b871H
	DD	027a84fH
	DD	028983dH
	DD	029882bH
	DD	02a781aH
	DD	02b6808H
	DD	imagerel $LN1040+1765
	DD	imagerel $LN1040+1773
	DD	imagerel $chain$5$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 020021H
	DD	058e400H
	DD	imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 081521H
	DD	058e415H
	DD	059c40cH
	DD	05a6408H
	DD	0605404H
	DD	imagerel $LN1040
	DD	imagerel $LN1040+25
	DD	imagerel $unwind$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 061001H
	DD	05b0110H
	DD	0d007f009H
	DD	030047005H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
xdata	ENDS
;	COMDAT ?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
_TEXT	SEGMENT
rr1$1616151 = 32
temp$1610101 = 48
info$ = 768
pcOutput$ = 776
pcLast$ = 784
pbData$ = 792
bPilotSgn$ = 800
?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z PROC ; Generate9MSymbol1, COMDAT

; 115  : {

$LN1040:
	mov	rax, rsp
	push	rbx
	push	rdi
	push	r13
	push	r15
	sub	rsp, 728				; 000002d8H

; 116  :     ConvEncode_3_4_9MSpecial1(pbData, info->bEncoded, info->bConvEncoderReg);

	movzx	r10d, BYTE PTR [r9]
	movzx	r11d, BYTE PTR [r9+1]
	mov	QWORD PTR [rax+8], rbp
	mov	QWORD PTR [rax-40], rsi
	mov	QWORD PTR [rax-48], r12
	movzx	r12d, BYTE PTR [r9+3]
	mov	QWORD PTR [rax-56], r14
	mov	r13, rdx
	lea	r15, OFFSET FLAT:__ImageBase
	movzx	eax, r10b
	mov	r14, r8
	movzx	r8d, BYTE PTR [r9+2]
	movzx	r9d, BYTE PTR [r9+4]
	and	al, 63					; 0000003fH
	movzx	ecx, al
	movzx	eax, BYTE PTR TxVector+24
	and	r9b, 15
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	eax, r11b
	movzx	ebp, BYTE PTR CONV_ENCODER_3_4_LUT[rdx+r15]
	and	al, 15
	mov	rdx, r10
	movzx	ecx, al
	shr	rdx, 6
	mov	BYTE PTR TxVector+25, bpl
	shl	cx, 8
	movzx	eax, cx
	or	rax, r10
	movzx	esi, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r15]
	movzx	eax, r8b
	and	al, 3
	mov	BYTE PTR TxVector+26, sil
	movzx	ecx, al
	shl	cx, 8
	or	cx, r11w
	shl	cx, 2
	movzx	eax, cx
	or	rax, rdx
	movzx	r10d, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r15]
	movzx	eax, r8w
	shl	ax, 4
	mov	BYTE PTR TxVector+27, r10b
	movzx	ecx, ax
	mov	rax, r11
	shr	rax, 4
	or	rcx, rax
	movzx	eax, r12b
	movzx	r11d, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r15]
	and	al, 63					; 0000003fH
	movzx	ecx, al
	mov	rax, r8
	mov	BYTE PTR TxVector+28, r11b
	shr	rax, 2
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	ebx, BYTE PTR CONV_ENCODER_3_4_LUT[rdx+r15]
	movzx	edx, r9b
	movzx	eax, dx
	shl	dl, 2
	mov	BYTE PTR TxVector+29, bl
	shl	ax, 8
	movzx	ecx, ax
	or	rcx, r12
	shr	r12b, 6
	movzx	edi, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r15]
	or	dl, r12b

; 117  :     InterleaveBPSK(info->bEncoded, info->bInterleaved);

	lea	ecx, DWORD PTR [rbp+rbp*2]
	mov	BYTE PTR TxVector+24, dl
	lea	eax, DWORD PTR [rcx+rcx]
	mov	BYTE PTR TxVector+30, dil
	cdqe
	movzx	edx, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [rsi+rsi*2+768]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [r10+r10*2+1536]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [r11+r11*2+2304]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [rbx+rbx*2+3072]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	lea	eax, DWORD PTR [rdi+rdi*2+3840]
	add	eax, eax
	or	dx, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2]
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r15+rax*2+4]
	mov	WORD PTR TxVector+61, dx
	mov	WORD PTR TxVector+63, r8w
	mov	WORD PTR TxVector+65, r9w

; 118  :     MapBPSK_11a(info->bInterleaved, info->cMapped);

	movzx	eax, dl
	lea	rdx, OFFSET FLAT:TxVector+112
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR [rdx], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR [rdx+16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR [rdx+24], rax
	movzx	eax, BYTE PTR TxVector+62
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+144], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+152], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+160], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR TxVector[r15+168], rax
	movzx	eax, BYTE PTR TxVector+63
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+176], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+184], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+192], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR TxVector[r15+200], rax
	movzx	eax, BYTE PTR TxVector+64
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+208], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+216], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+224], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR TxVector[r15+232], rax
	movzx	eax, BYTE PTR TxVector+65
	shl	eax, 3
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+240], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+248], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+256], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	QWORD PTR TxVector[r15+264], rax
	movzx	eax, BYTE PTR TxVector+66
	mov	r12, QWORD PTR [rsp+712]
	mov	rsi, QWORD PTR [rsp+720]
	mov	rbp, QWORD PTR [rsp+768]
	shl	eax, 3

; 119  : 
; 120  :     AddPilot(info->cMapped, info->cPilotAdded, bPilotSgn);

	lea	r8, OFFSET FLAT:TxVector+456
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4]
	mov	QWORD PTR TxVector[r15+272], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+8]
	mov	QWORD PTR TxVector[r15+280], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+16]
	mov	QWORD PTR TxVector[r15+288], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r15+rcx*4+24]
	mov	ecx, 38					; 00000026H
	mov	QWORD PTR TxVector[r15+296], rax
$LL26@Generate9M@2:
	cmp	ecx, 57					; 00000039H
	je	SHORT $LN25@Generate9M@2
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN25@Generate9M@2
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN25@Generate9M@2:
	inc	ecx
	add	r8, 4
	cmp	ecx, 64					; 00000040H
	jb	SHORT $LL26@Generate9M@2
	mov	ecx, 1
	lea	r8, OFFSET FLAT:TxVector+308
$LL21@Generate9M@2:
	cmp	ecx, 7
	je	SHORT $LN20@Generate9M@2
	cmp	ecx, 21
	je	SHORT $LN20@Generate9M@2
	mov	eax, DWORD PTR [rdx]
	add	rdx, 4
	mov	DWORD PTR [r8], eax
$LN20@Generate9M@2:
	inc	ecx
	add	r8, 4
	cmp	ecx, 26
	jbe	SHORT $LL21@Generate9M@2
	cmp	BYTE PTR bPilotSgn$[rsp], 0
	jne	SHORT $LN16@Generate9M@2
	xor	edi, edi
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, di
	mov	WORD PTR TxVector+388, cx
	mov	WORD PTR TxVector+390, di
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, di
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, di
	jmp	SHORT $LN15@Generate9M@2
$LN16@Generate9M@2:
	xor	edi, edi
	mov	ecx, -10720				; ffffffffffffd620H
	mov	eax, 10720				; 000029e0H
	mov	WORD PTR TxVector+332, cx
	mov	WORD PTR TxVector+334, di
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, di
	mov	WORD PTR TxVector+532, cx
	mov	WORD PTR TxVector+534, di
	mov	WORD PTR TxVector+476, cx
	mov	WORD PTR TxVector+478, di
$LN15@Generate9M@2:

; 121  :     IFFT64x(info->cPilotAdded, info->cSymbol + COMPLEX_GI);

	lea	rcx, QWORD PTR temp$1610101[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$1610101[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1610101[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1610101[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:?FFT128LUTMap@@3QBFB+2
	lea	rdx, OFFSET FLAT:TxVector+696
	lea	r8, OFFSET FLAT:TxVector+1208
	npad	10
$LL36@Generate9M@2:
	movsx	rax, WORD PTR [r11-2]
	add	rdx, 16
	add	r11, 8
	cmp	rdx, r8
	mov	ecx, DWORD PTR temp$1610101[rsp+rax*4]
	movsx	rax, WORD PTR [r11-8]
	mov	DWORD PTR [rdx-24], ecx
	mov	ecx, DWORD PTR temp$1610101[rsp+rax*4]
	movsx	rax, WORD PTR [r11-6]
	mov	DWORD PTR [rdx-20], ecx
	mov	ecx, DWORD PTR temp$1610101[rsp+rax*4]
	movsx	rax, WORD PTR [r11-4]
	mov	DWORD PTR [rdx-16], ecx
	mov	ecx, DWORD PTR temp$1610101[rsp+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	jl	SHORT $LL36@Generate9M@2
	lea	rax, OFFSET FLAT:TxVector+688
	mov	ecx, 32					; 00000020H
	npad	7
$LL33@Generate9M@2:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL33@Generate9M@2

; 122  : 
; 123  :     CopyGI(info->cSymbol, info->cSymbol + 128);

	lea	rbx, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rbx
	call	memcpy

; 124  :     Window(info->cSymbol, pcLast);

	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	ecx, WORD PTR TxVector+568
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR [r14]
	movdqa	XMMWORD PTR TxVector+560, xmm0
	movzx	eax, WORD PTR [r14]
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR [r14+2]
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [r14], cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [r14+2], cx
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR [r14+4], ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR [r14+6], ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR [r14+8], ax
	movzx	eax, WORD PTR TxVector+698
	mov	WORD PTR [r14+12], di
	sar	ax, 2
	mov	WORD PTR [r14+14], di
	mov	WORD PTR [r14+10], ax

; 125  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

	mov	eax, DWORD PTR TxVector
	mov	r14, QWORD PTR [rsp+704]
	cmp	eax, 44					; 0000002cH
	jne	$LN75@Generate9M@2
	movdqa	xmm2, XMMWORD PTR TxVector+560
	movaps	XMMWORD PTR [rsp+688], xmm6
	xorps	xmm0, xmm0
	lea	edx, QWORD PTR [rax-39]
	movdqa	xmm3, xmm2
	movaps	XMMWORD PTR [rsp+672], xmm7
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+656], xmm8
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+640], xmm9
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movaps	XMMWORD PTR [rsp+624], xmm10
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	movaps	XMMWORD PTR [rsp+608], xmm11
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movaps	XMMWORD PTR [rsp+592], xmm12
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movaps	XMMWORD PTR [rsp+576], xmm13
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movaps	XMMWORD PTR [rsp+560], xmm14
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	lea	rcx, OFFSET FLAT:TxVector+1276
	pmulhrsw xmm4, xmm11
	lea	rax, OFFSET FLAT:TxVector+640
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	1
$LL80@Generate9M@2:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r15+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL80@Generate9M@2
	movaps	xmm14, XMMWORD PTR [rsp+560]
	movaps	xmm13, XMMWORD PTR [rsp+576]
	movaps	xmm12, XMMWORD PTR [rsp+592]
	movaps	xmm11, XMMWORD PTR [rsp+608]
	movaps	xmm10, XMMWORD PTR [rsp+624]
	movaps	xmm9, XMMWORD PTR [rsp+640]
	movaps	xmm8, XMMWORD PTR [rsp+656]
	movaps	xmm7, XMMWORD PTR [rsp+672]
	movaps	xmm6, XMMWORD PTR [rsp+688]
	movdqa	XMMWORD PTR rr1$1616151[rsp], xmm3
	mov	eax, DWORD PTR rr1$1616151[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$1616151[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$1616151[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
	npad	3
$LL917@Generate9M@2:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	r13, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r13-16], xmm1
	jne	SHORT $LL917@Generate9M@2
	mov	eax, 176				; 000000b0H

; 126  : }

	add	rsp, 728				; 000002d8H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbx
	ret	0

; 125  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

$LN75@Generate9M@2:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN70@Generate9M@2
	mov	eax, 20
	npad	8
$LL962@Generate9M@2:
	movdqa	xmm1, XMMWORD PTR [rbx]
	movdqa	xmm0, XMMWORD PTR [rbx+16]
	add	r13, 16
	add	rbx, 32					; 00000020H
	sub	rax, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r13-16], xmm1
	jne	SHORT $LL962@Generate9M@2
	mov	eax, 160				; 000000a0H

; 126  : }

	add	rsp, 728				; 000002d8H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbx
	ret	0

; 125  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

$LN70@Generate9M@2:
	mov	eax, edi

; 126  : }

	add	rsp, 728				; 000002d8H
	pop	r15
	pop	r13
	pop	rdi
	pop	rbx
	ret	0
?Generate9MSymbol1@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ENDP ; Generate9MSymbol1
PUBLIC	?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode9
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN4361
	DD	imagerel $LN4361+22
	DD	imagerel $unwind$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$15$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN4361+22
	DD	imagerel $LN4361+9762
	DD	imagerel $chain$15$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$16$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN4361+9762
	DD	imagerel $LN4361+9939
	DD	imagerel $chain$16$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$16$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 021H
	DD	imagerel $LN4361
	DD	imagerel $LN4361+22
	DD	imagerel $unwind$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$15$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 020fe21H
	DD	047e8feH
	DD	048d8f5H
	DD	049c8ecH
	DD	04ab8e3H
	DD	04ba8daH
	DD	04c98d1H
	DD	04d88c3H
	DD	04e78baH
	DD	04f68b2H
	DD	0a0f42eH
	DD	0a1e424H
	DD	0a2d420H
	DD	0a3c410H
	DD	0a9740cH
	DD	0a85408H
	DD	0a63404H
	DD	imagerel $LN4361
	DD	imagerel $LN4361+22
	DD	imagerel $unwind$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 051601H
	DD	046f816H
	DD	0a4010bH
	DD	06004H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx_9.c
xdata	ENDS
;	COMDAT ?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
_TEXT	SEGMENT
$T2902912 = 32
rgbSignal$2901730 = 32
$T2902892 = 32
pcOutput$ = 40
rr1$2910473 = 48
rr1$2901385 = 48
rr1$2892657 = 48
uiSymbolCountData$1$ = 64
SampleBufferSize$ = 68
rr1$2918490 = 80
temp$2909595 = 96
temp$2902373 = 96
temp$2919127 = 608
info$ = 1328
pPacket$ = 1336
?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z PROC ; Dot11aTxFrameEncode9, COMDAT

; 15   : {

$LN4361:
	mov	rax, rsp
	push	rsi
	sub	rsp, 1312				; 00000520H

; 16   :     unsigned int uiScrambledSize;
; 17   :     unsigned int uiSymbolCountData;
; 18   :     unsigned int uiPilotIndex = 0;
; 19   :     unsigned int i;
; 20   :     char * pbInput;
; 21   :     PTXSAMPLE pcOutput;
; 22   :     ULONG PacketSizePlusCRC32 = pPacket->PacketSize + 4;

	mov	esi, DWORD PTR [rdx+20]
	movaps	XMMWORD PTR [rax-200], xmm15
	mov	QWORD PTR [rax+8], rbx
	mov	QWORD PTR [rax+24], rbp
	mov	QWORD PTR [rax+32], rdi
	mov	QWORD PTR [rax-16], r12

; 23   : 
; 24   :     ClearWindow(info->cWindow);

	xorps	xmm15, xmm15
	movaps	XMMWORD PTR TxVector+6912, xmm15
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-32], r14
	mov	rbp, rdx
	add	esi, 4
	mov	QWORD PTR [rax-40], r15
	xor	r13d, r13d

; 25   : 
; 26   :     uiScrambledSize = SERVICE_LEN_IN_BITS + PADDING_LEN_IN_BITS
; 27   :         + (PacketSizePlusCRC32 << BITS_PER_BYTE_SHIFT);
; 28   :     uiSymbolCountData = (uiScrambledSize + (DBPS - 1)) / DBPS;

	lea	ecx, DWORD PTR [rsi*8+57]
	mov	eax, 954437177				; 38e38e39H
	mov	r14d, r13d
	mul	ecx
	mov	edi, edx
	shr	edi, 3
	mov	DWORD PTR uiSymbolCountData$1$[rsp], edi

; 29   : 
; 30   :     ULONG SignalBytes = GetSignalBytes(info, uiSymbolCountData);

	lea	edx, DWORD PTR [rdi+rdi*4+25]
	shl	edx, 5
	cmp	DWORD PTR TxVector, 44			; 0000002cH
	jne	SHORT $LN20@Dot11aTxFr@8
	mov	eax, -858993459				; cccccccdH
	mul	edx
	shr	edx, 3
	imul	edx, 11
$LN20@Dot11aTxFr@8:
	lea	ebx, DWORD PTR [rdx+rdx+16]

; 31   :     
; 32   :     ULONG SampleBufferSize = 0;
; 33   :     SoraPacketGetTxSampleBuffer(pPacket, (PTXSAMPLE *)&pcOutput, &SampleBufferSize);

	lea	r8, QWORD PTR SampleBufferSize$[rsp]
	lea	rdx, QWORD PTR pcOutput$[rsp]
	mov	rcx, rbp
	mov	DWORD PTR SampleBufferSize$[rsp], r13d
	call	SoraPacketGetTxSampleBuffer

; 34   : 
; 35   :     ALIGN_WITH_RCB_BUFFER_PADDING_ZERO(pcOutput, SignalBytes);

	test	bl, 127					; 0000007fH
	je	SHORT $LN10@Dot11aTxFr@8
	mov	rdx, QWORD PTR pcOutput$[rsp]
	mov	ecx, ebx
	and	ebx, -128				; ffffff80H
	sub	ebx, -128				; ffffffffffffff80H
	test	rdx, rdx
	je	SHORT $LN10@Dot11aTxFr@8
	mov	r8d, ebx
	sub	r8d, ecx
	add	rcx, rdx
	xor	edx, edx
	call	memset
$LN10@Dot11aTxFr@8:
	movaps	XMMWORD PTR [rsp+1264], xmm6
	movaps	XMMWORD PTR [rsp+1248], xmm7
	movaps	XMMWORD PTR [rsp+1232], xmm8

; 36   :     SoraPacketSetSignalLength(pPacket, SignalBytes);

	mov	edx, ebx
	mov	rcx, rbp
	movaps	XMMWORD PTR [rsp+1216], xmm9
	movaps	XMMWORD PTR [rsp+1200], xmm10
	movaps	XMMWORD PTR [rsp+1184], xmm11
	movaps	XMMWORD PTR [rsp+1168], xmm12
	movaps	XMMWORD PTR [rsp+1152], xmm13
	movaps	XMMWORD PTR [rsp+1136], xmm14
	call	SoraPacketSetSignalLength

; 37   :     
; 38   :     // Copy preamble
; 39   :     pcOutput += CopyPreamble16_NT(info, pcOutput, info->cWindow);

	mov	eax, DWORD PTR TxVector
	mov	r11, QWORD PTR pcOutput$[rsp]
	lea	r15, OFFSET FLAT:TxVector+1200
	cmp	eax, 44					; 0000002cH
	jne	$LN31@Dot11aTxFr@8
	lea	r9, OFFSET FLAT:PREAMBLE40_11A_LUT+32
	mov	ebx, 640				; 00000280H
	lea	r10d, QWORD PTR [rax-40]
$LL30@Dot11aTxFr@8:
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR [r9-32]
	lea	r8, QWORD PTR [r9-32]
	mov	edx, 5
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm5, XMMWORD PTR [r9+16]
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm4, xmm9
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm15, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR [r9-16]
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm3, xmm11
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm4, 12
	movdqa	xmm4, XMMWORD PTR [r9]
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm6, xmm4
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm6, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm3, 12
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm4
	movdqa	xmm3, xmm5
	pmulhrsw xmm1, xmm14
	pshufd	xmm0, xmm2, 177				; 000000b1H
	palignr	xmm3, xmm4, 8
	movdqa	xmm4, xmm3
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pmulhrsw xmm3, xmm10
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pmulhrsw xmm4, xmm9
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm3, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm3, xmm0
	pand	xmm3, xmm8
	por	xmm1, xmm3
	movdqa	xmm3, XMMWORD PTR [r9+32]
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm5, 8
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm5, xmm11
	movdqa	xmm1, xmm5
	palignr	xmm1, xmm4, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	lea	rax, QWORD PTR [r9+48]
	lea	rcx, OFFSET FLAT:TxVector+1276
	pand	xmm2, xmm8
	lea	edi, QWORD PTR [rdx+2]
	por	xmm1, xmm2
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm5, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
$LL36@Dot11aTxFr@8:
	movdqu	XMMWORD PTR [rcx], xmm2
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR [r8+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	add	rax, rax
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR [r8+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	pshufd	xmm0, xmm1, 177				; 000000b1H
	add	rax, rax
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR [r8+rax*8]
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR [r8+rax*8]
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	pand	xmm2, xmm8
	shl	rax, 4
	por	xmm1, xmm2
	add	rax, r8
	sub	rdi, 1
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	jne	$LL36@Dot11aTxFr@8
	movdqa	XMMWORD PTR rr1$2892657[rsp], xmm2
	mov	eax, DWORD PTR rr1$2892657[rsp]
	lea	edx, QWORD PTR [rdi+22]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2892657[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2892657[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, r15
	mov	rcx, r11
	npad	4
$LL873@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rcx, 16
	add	rax, 32					; 00000020H
	sub	rdx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rcx-16], xmm1
	jne	SHORT $LL873@Dot11aTxFr@8
	add	r11, 352				; 00000160H
	add	r9, rbx
	sub	r10, 1
	jne	$LL30@Dot11aTxFr@8
	mov	r11, QWORD PTR pcOutput$[rsp]
	mov	edi, DWORD PTR uiSymbolCountData$1$[rsp]
	mov	ebx, 704				; 000002c0H
	jmp	SHORT $LN25@Dot11aTxFr@8
$LN31@Dot11aTxFr@8:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN26@Dot11aTxFr@8
	lea	rax, OFFSET FLAT:PREAMBLE40_11A_LUT
	mov	ecx, 80					; 00000050H
	npad	1
$LL918@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	r11, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r11-16], xmm1
	jne	SHORT $LL918@Dot11aTxFr@8
	mov	r11, QWORD PTR pcOutput$[rsp]
	mov	ebx, 640				; 00000280H
	jmp	SHORT $LN25@Dot11aTxFr@8
$LN26@Dot11aTxFr@8:
	mov	ebx, r13d
$LN25@Dot11aTxFr@8:
	mov	eax, 2513				; 000009d1H

; 40   : 
; 41   :     ConvEncodeReset(info->bConvEncoderReg);
; 42   :     // Generate Signal
; 43   :     pcOutput += GenerateSignal(info, pcOutput, info->cWindow, SIGNAL_RATE,
; 44   :             (unsigned short)PacketSizePlusCRC32);

	movzx	edx, si
	xor	r8b, r8b
	mov	WORD PTR TxVector+6912, ax
	mov	eax, 1051				; 0000041bH
	shl	edx, 5
	mov	WORD PTR TxVector+6916, ax
	mov	eax, -643				; fffffffffffffd7dH
	or	edx, 15
	mov	WORD PTR TxVector+6918, ax
	mov	eax, -28
	mov	ecx, edx
	mov	WORD PTR TxVector+6920, ax
	shr	ecx, 16
	mov	eax, -645				; fffffffffffffd7bH
	mov	WORD PTR TxVector+6922, ax
	xor	ecx, edx
	mov	eax, ebx
	lea	rbx, QWORD PTR [r11+rax*2]
	mov	eax, ecx
	mov	WORD PTR TxVector+6914, r13w
	shr	eax, 8
	mov	WORD PTR TxVector+6924, r13w
	mov	WORD PTR TxVector+6926, r13w
	xor	ecx, eax
	mov	QWORD PTR pcOutput$[rsp], rbx
	lea	r9, OFFSET FLAT:TxVector+25
	mov	eax, ecx
	lea	r10, QWORD PTR rgbSignal$2901730[rsp]
	mov	r11d, 3
	shr	eax, 4
	lea	r12, OFFSET FLAT:__ImageBase
	xor	ecx, eax
	mov	eax, ecx
	shr	eax, 2
	xor	ecx, eax
	lea	eax, DWORD PTR [rcx+rcx]
	xor	eax, ecx
	and	eax, 2
	shl	eax, 16
	or	eax, edx
	mov	DWORD PTR rgbSignal$2901730[rsp], eax
	npad	5
$LL971@Dot11aTxFr@8:
	movzx	edx, BYTE PTR [r10]
	movzx	eax, r8b
	add	r9, 2
	shl	eax, 8
	movzx	r8d, dl
	inc	r10
	movsxd	rcx, eax
	shr	r8b, 2
	or	rcx, rdx
	sub	r11, 1
	movzx	eax, WORD PTR CONV_ENCODER_1_2_LUT[r12+rcx*2]
	mov	WORD PTR [r9-2], ax
	mov	BYTE PTR TxVector+24, r8b
	jne	SHORT $LL971@Dot11aTxFr@8
	movzx	eax, BYTE PTR TxVector+25
	mov	edx, 256				; 00000100H
	lea	r11, OFFSET FLAT:TxVector+26
	lea	ecx, DWORD PTR [rax+rax*2]
	lea	eax, DWORD PTR [rcx+rcx]
	cdqe
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	movzx	r10d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	npad	7
$LL976@Dot11aTxFr@8:
	movzx	eax, BYTE PTR [r11]
	inc	r11
	add	eax, edx
	add	edx, 256				; 00000100H
	lea	eax, DWORD PTR [rax+rax*2]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r10w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	cmp	edx, 1536				; 00000600H
	jb	SHORT $LL976@Dot11aTxFr@8
	lea	r10, OFFSET FLAT:TxVector+112
	lea	r8, OFFSET FLAT:TxVector+61
	mov	r9d, 6
	mov	rdx, r10
	npad	10
$LL981@Dot11aTxFr@8:
	movzx	eax, BYTE PTR [r8]
	add	rdx, 32					; 00000020H
	inc	r8
	shl	eax, 3
	sub	r9, 1
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR [rdx-32], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR [rdx-24], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR [rdx-16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	QWORD PTR [rdx-8], rax
	jne	SHORT $LL981@Dot11aTxFr@8
	mov	rcx, r10
	mov	edx, 38					; 00000026H
	lea	r8, OFFSET FLAT:TxVector+456
$LL995@Dot11aTxFr@8:
	cmp	edx, 57					; 00000039H
	je	SHORT $LN994@Dot11aTxFr@8
	cmp	edx, 43					; 0000002bH
	je	SHORT $LN994@Dot11aTxFr@8
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN994@Dot11aTxFr@8:
	inc	edx
	add	r8, 4
	cmp	edx, 64					; 00000040H
	jb	SHORT $LL995@Dot11aTxFr@8
	mov	edx, 1
	lea	r8, OFFSET FLAT:TxVector+308
$LL990@Dot11aTxFr@8:
	cmp	edx, 7
	je	SHORT $LN989@Dot11aTxFr@8
	cmp	edx, 21
	je	SHORT $LN989@Dot11aTxFr@8
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN989@Dot11aTxFr@8:
	inc	edx
	add	r8, 4
	cmp	edx, 26
	jbe	SHORT $LL990@Dot11aTxFr@8
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	xor	edx, edx
	mov	WORD PTR TxVector+388, cx
	lea	rcx, QWORD PTR temp$2902373[rsp]
	mov	r8d, 512				; 00000200H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, r13w
	mov	WORD PTR TxVector+390, r13w
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, r13w
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, r13w
	call	memset
	lea	rcx, QWORD PTR temp$2902373[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2902373[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2902373[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:TxVector+688
	lea	rdx, OFFSET FLAT:?FFT128LUTMap@@3QBFB	; FFT128LUTMap
	mov	r8, r11
	lea	r9, OFFSET FLAT:?FFT128LUTMap@@3QBFB+256
	npad	7
$LL1005@Dot11aTxFr@8:
	movsx	rax, WORD PTR [rdx]
	add	rdx, 2
	add	r8, 4
	cmp	rdx, r9
	mov	ecx, DWORD PTR temp$2902373[rsp+rax*4]
	mov	DWORD PTR [r8-4], ecx
	jl	SHORT $LL1005@Dot11aTxFr@8
	mov	rax, r11
	mov	ecx, 32					; 00000020H
$LL1002@Dot11aTxFr@8:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL1002@Dot11aTxFr@8
	lea	rsi, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rsi
	call	memcpy
	movzx	ecx, WORD PTR TxVector+568
	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+6912
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR TxVector+6912
	mov	WORD PTR TxVector+6924, r13w
	mov	WORD PTR TxVector+6926, r13w
	movdqa	XMMWORD PTR TxVector+560, xmm0
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR TxVector+6914
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+6912, cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR TxVector+6914, cx
	mov	WORD PTR TxVector+6916, ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR TxVector+6918, ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR TxVector+6920, ax
	movzx	eax, WORD PTR TxVector+698
	sar	ax, 2
	mov	WORD PTR TxVector+6922, ax
	mov	eax, DWORD PTR TxVector
	cmp	eax, 44					; 0000002cH
	jne	$LN1044@Dot11aTxFr@8
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR TxVector+560
	lea	edx, QWORD PTR [rax-39]
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm15, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqa	xmm4, xmm2
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	lea	rcx, OFFSET FLAT:TxVector+1276
	lea	rax, OFFSET FLAT:TxVector+640
	por	xmm1, xmm2
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	14
$LL1049@Dot11aTxFr@8:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rsi+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rsi+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rsi+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rsi+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r12+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL1049@Dot11aTxFr@8
	movdqa	XMMWORD PTR rr1$2901385[rsp], xmm3
	mov	eax, DWORD PTR rr1$2901385[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2901385[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2901385[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, r15
	lea	ecx, QWORD PTR [r8+22]
	npad	6
$LL1886@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL1886@Dot11aTxFr@8
	mov	eax, 176				; 000000b0H
	jmp	SHORT $LN1038@Dot11aTxFr@8
$LN1044@Dot11aTxFr@8:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN1039@Dot11aTxFr@8
	mov	rax, rsi
	mov	ecx, 20
	npad	2
$LL1931@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL1931@Dot11aTxFr@8
	mov	eax, 160				; 000000a0H
	jmp	SHORT $LN1038@Dot11aTxFr@8
$LN1039@Dot11aTxFr@8:
	mov	eax, r13d
$LN1038@Dot11aTxFr@8:
	mov	ecx, eax
	mov	rax, QWORD PTR pcOutput$[rsp]
	lea	rsi, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR pcOutput$[rsp], rsi

; 45   :     
; 46   :     // Scramble Data
; 47   :     if (!(uiSymbolCountData & 0x1))

	test	dil, 1
	jne	$LN9@Dot11aTxFr@8

; 48   :     {
; 49   :         Scramble11a(pPacket->pMdl, info->bFrameScrambled,
; 50   :             (uiSymbolCountData >> 1) * (DBPS * 2 / BITS_PER_BYTE),
; 51   :             pPacket->Reserved1, info->ulRadom);

	mov	ebx, DWORD PTR [rbp+24]
	mov	r10, QWORD PTR [rbp]
	mov	eax, edi
	shr	eax, 1
	lea	rbp, OFFSET FLAT:TxVector+1908
	mov	r8b, 79					; 0000004fH
	lea	r11d, DWORD PTR [rax+rax*8]
	mov	DWORD PTR $T2902892[rsp], ebx
	lea	rdx, OFFSET FLAT:TxVector+1910
	add	r11, rbp
	mov	BYTE PTR TxVector+1908, 112		; 00000070H
	mov	BYTE PTR TxVector+1909, r8b
	test	r10, r10
	je	SHORT $LN1979@Dot11aTxFr@8
	npad	8
$LL1980@Dot11aTxFr@8:
	mov	ecx, DWORD PTR [r10+44]
	mov	eax, DWORD PTR [r10+40]
	add	rcx, QWORD PTR [r10+32]
	test	eax, eax
	je	SHORT $LN1976@Dot11aTxFr@8
	mov	r9, rax
$LL1978@Dot11aTxFr@8:
	movzx	eax, r8b
	inc	rdx
	inc	rcx
	shr	rax, 1
	movzx	r8d, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, BYTE PTR [rcx-1]
	xor	al, r8b
	sub	r9, 1
	mov	BYTE PTR [rdx-1], al
	jne	SHORT $LL1978@Dot11aTxFr@8
$LN1976@Dot11aTxFr@8:
	mov	r10, QWORD PTR [r10]
	test	r10, r10
	jne	SHORT $LL1980@Dot11aTxFr@8
$LN1979@Dot11aTxFr@8:
	movzx	eax, r8b
	add	rdx, 5
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, bl
	mov	BYTE PTR [rdx-5], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, BYTE PTR $T2902892[rsp+1]
	mov	BYTE PTR [rdx-4], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, BYTE PTR $T2902892[rsp+2]
	mov	BYTE PTR [rdx-3], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, BYTE PTR $T2902892[rsp+3]
	mov	BYTE PTR [rdx-2], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	and	al, 192					; 000000c0H
	mov	BYTE PTR [rdx-1], al
	cmp	rdx, r11
	je	$LN1983@Dot11aTxFr@8
	npad	8
$LL1975@Dot11aTxFr@8:
	movzx	eax, cl
	inc	rdx
	shr	rax, 1
	mov	cl, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	mov	BYTE PTR [rdx-1], cl
	cmp	rdx, r11
	jne	SHORT $LL1975@Dot11aTxFr@8

; 52   :     }
; 53   :     else

	jmp	$LN1983@Dot11aTxFr@8
$LN9@Dot11aTxFr@8:

; 54   :     {
; 55   :         Scramble11a(pPacket->pMdl, info->bFrameScrambled,
; 56   :                 (uiSymbolCountData >> 1) * (DBPS * 2 / BITS_PER_BYTE)
; 57   :                 + ((DBPS / BITS_PER_BYTE) + 1),
; 58   :                 pPacket->Reserved1, info->ulRadom);

	mov	ebx, DWORD PTR [rbp+24]
	mov	r10, QWORD PTR [rbp]
	mov	eax, edi
	shr	eax, 1
	lea	rbp, OFFSET FLAT:TxVector+1908
	mov	r8b, 79					; 0000004fH
	lea	r11d, DWORD PTR [rax+rax*8+5]
	mov	DWORD PTR $T2902912[rsp], ebx
	lea	rdx, OFFSET FLAT:TxVector+1910
	add	r11, rbp
	mov	BYTE PTR TxVector+1908, 112		; 00000070H
	mov	BYTE PTR TxVector+1909, r8b
	test	r10, r10
	je	SHORT $LN1988@Dot11aTxFr@8
	npad	7
$LL1989@Dot11aTxFr@8:
	mov	ecx, DWORD PTR [r10+44]
	mov	eax, DWORD PTR [r10+40]
	add	rcx, QWORD PTR [r10+32]
	test	eax, eax
	je	SHORT $LN1985@Dot11aTxFr@8
	mov	r9, rax
$LL1987@Dot11aTxFr@8:
	movzx	eax, r8b
	inc	rdx
	inc	rcx
	shr	rax, 1
	movzx	r8d, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, r8b
	xor	al, BYTE PTR [rcx-1]
	sub	r9, 1
	mov	BYTE PTR [rdx-1], al
	jne	SHORT $LL1987@Dot11aTxFr@8
$LN1985@Dot11aTxFr@8:
	mov	r10, QWORD PTR [r10]
	test	r10, r10
	jne	SHORT $LL1989@Dot11aTxFr@8
$LN1988@Dot11aTxFr@8:
	movzx	eax, r8b
	add	rdx, 5
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, bl
	mov	BYTE PTR [rdx-5], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, BYTE PTR $T2902912[rsp+1]
	mov	BYTE PTR [rdx-4], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, BYTE PTR $T2902912[rsp+2]
	mov	BYTE PTR [rdx-3], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	xor	al, BYTE PTR $T2902912[rsp+3]
	mov	BYTE PTR [rdx-2], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	movzx	eax, cl
	and	al, 192					; 000000c0H
	mov	BYTE PTR [rdx-1], al
	cmp	rdx, r11
	je	SHORT $LN1983@Dot11aTxFr@8
$LL1984@Dot11aTxFr@8:
	movzx	eax, cl
	inc	rdx
	shr	rax, 1
	mov	cl, BYTE PTR SCRAMBLE_11A_LUT[rax+r12]
	mov	BYTE PTR [rdx-1], cl
	cmp	rdx, r11
	jne	SHORT $LL1984@Dot11aTxFr@8
$LN1983@Dot11aTxFr@8:

; 59   :     }
; 60   : 
; 61   :     ConvEncodeReset(info->bConvEncoderReg);

	xor	r12b, r12b

; 62   :     pbInput = info->bFrameScrambled;
; 63   : 
; 64   :     for (i = 0; i < uiSymbolCountData; i++)

	mov	r15d, r13d
	mov	BYTE PTR TxVector+24, r12b
	test	edi, edi
	je	$LN4360@Dot11aTxFr@8
$LL7@Dot11aTxFr@8:

; 65   :     {
; 66   :         if (!(i & 0x1))

	test	r15b, 1
	jne	$LN4@Dot11aTxFr@8

; 67   :         {
; 68   :             pcOutput += Generate9MSymbol1(info, pcOutput, info->cWindow, 
; 69   :                     pbInput, (*PILOTSGN(uiPilotIndex)));

	movzx	r8d, BYTE PTR [rbp]
	movzx	r9d, BYTE PTR [rbp+1]
	movzx	r10d, BYTE PTR [rbp+2]
	movzx	edi, BYTE PTR [rbp+3]
	movzx	r11d, BYTE PTR [rbp+4]
	movzx	eax, r8b
	and	al, 63					; 0000003fH
	add	rbp, 4
	and	r11b, 15
	movzx	ecx, al
	movzx	eax, r12b
	lea	r12, OFFSET FLAT:__ImageBase
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	eax, r9b
	movzx	ebx, BYTE PTR CONV_ENCODER_3_4_LUT[rdx+r12]
	and	al, 15
	mov	rdx, r8
	movzx	ecx, al
	shr	rdx, 6
	mov	BYTE PTR TxVector+25, bl
	shl	cx, 8
	movzx	eax, cx
	or	rax, r8
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r12]
	mov	BYTE PTR TxVector+26, al
	movzx	eax, r10b
	and	al, 3
	movzx	ecx, al
	shl	cx, 8
	or	cx, r9w
	shl	cx, 2
	movzx	eax, cx
	or	rax, rdx
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r12]
	mov	BYTE PTR TxVector+27, al
	movzx	eax, r10w
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r9
	shr	rax, 4
	or	rcx, rax
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r12]
	mov	BYTE PTR TxVector+28, al
	movzx	eax, dil
	and	al, 63					; 0000003fH
	movzx	ecx, al
	mov	rax, r10
	shr	rax, 2
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rdx+r12]
	movzx	edx, r11b
	lea	r11, OFFSET FLAT:TxVector+26
	mov	BYTE PTR TxVector+29, al
	movzx	eax, dx
	shl	dl, 2
	shl	ax, 8
	movzx	ecx, ax
	or	rcx, rdi
	shr	dil, 6
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r12]
	or	dl, dil
	lea	ecx, DWORD PTR [rbx+rbx*2]
	mov	BYTE PTR TxVector+30, al
	lea	eax, DWORD PTR [rcx+rcx]
	mov	BYTE PTR TxVector+24, dl
	cdqe
	mov	edx, 256				; 00000100H
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	movzx	r10d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
$LL2000@Dot11aTxFr@8:
	movzx	eax, BYTE PTR [r11]
	inc	r11
	add	eax, edx
	add	edx, 256				; 00000100H
	lea	eax, DWORD PTR [rax+rax*2]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r10w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	cmp	edx, 1536				; 00000600H
	jb	SHORT $LL2000@Dot11aTxFr@8
	lea	r10, OFFSET FLAT:TxVector+112
	lea	r8, OFFSET FLAT:TxVector+61
	mov	r9d, 6
	mov	rdx, r10
	npad	10
$LL2005@Dot11aTxFr@8:
	movzx	eax, BYTE PTR [r8]
	add	rdx, 32					; 00000020H
	inc	r8
	shl	eax, 3
	sub	r9, 1
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR [rdx-32], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR [rdx-24], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR [rdx-16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	QWORD PTR [rdx-8], rax
	jne	SHORT $LL2005@Dot11aTxFr@8
	mov	rcx, r10
	mov	edx, 38					; 00000026H
	lea	r8, OFFSET FLAT:TxVector+456
$LL2019@Dot11aTxFr@8:
	cmp	edx, 57					; 00000039H
	je	SHORT $LN2018@Dot11aTxFr@8
	cmp	edx, 43					; 0000002bH
	je	SHORT $LN2018@Dot11aTxFr@8
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN2018@Dot11aTxFr@8:
	inc	edx
	add	r8, 4
	cmp	edx, 64					; 00000040H
	jb	SHORT $LL2019@Dot11aTxFr@8
	mov	edx, 1
	lea	r8, OFFSET FLAT:TxVector+308
$LL2014@Dot11aTxFr@8:
	cmp	edx, 7
	je	SHORT $LN2013@Dot11aTxFr@8
	cmp	edx, 21
	je	SHORT $LN2013@Dot11aTxFr@8
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN2013@Dot11aTxFr@8:
	inc	edx
	add	r8, 4
	cmp	edx, 26
	jbe	SHORT $LL2014@Dot11aTxFr@8
	cmp	BYTE PTR PILOTSGN_LUT[r13+r12], 0
	jne	SHORT $LN2009@Dot11aTxFr@8
	xor	ebx, ebx
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, bx
	mov	WORD PTR TxVector+388, cx
	mov	WORD PTR TxVector+390, bx
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, bx
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, bx
	jmp	SHORT $LN2008@Dot11aTxFr@8
$LN2009@Dot11aTxFr@8:
	xor	ebx, ebx
	mov	ecx, -10720				; ffffffffffffd620H
	mov	eax, 10720				; 000029e0H
	mov	WORD PTR TxVector+332, cx
	mov	WORD PTR TxVector+334, bx
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, bx
	mov	WORD PTR TxVector+532, cx
	mov	WORD PTR TxVector+534, bx
	mov	WORD PTR TxVector+476, cx
	mov	WORD PTR TxVector+478, bx
$LN2008@Dot11aTxFr@8:
	lea	rcx, QWORD PTR temp$2909595[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$2909595[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2909595[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2909595[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r8, OFFSET FLAT:TxVector+688
	lea	rdx, OFFSET FLAT:?FFT128LUTMap@@3QBFB	; FFT128LUTMap
	mov	r11, r8
	lea	r12, OFFSET FLAT:?FFT128LUTMap@@3QBFB+256
	npad	8
$LL2029@Dot11aTxFr@8:
	movsx	rax, WORD PTR [rdx]
	add	rdx, 2
	add	r11, 4
	cmp	rdx, r12
	mov	ecx, DWORD PTR temp$2909595[rsp+rax*4]
	mov	DWORD PTR [r11-4], ecx
	jl	SHORT $LL2029@Dot11aTxFr@8
	lea	r12, OFFSET FLAT:__ImageBase
	mov	rax, r8
	mov	ecx, 32					; 00000020H
	npad	8
$LL2026@Dot11aTxFr@8:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL2026@Dot11aTxFr@8
	lea	rdi, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rdi
	call	memcpy
	movzx	ecx, WORD PTR TxVector+568
	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+6912
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR TxVector+6912
	mov	WORD PTR TxVector+6924, bx
	mov	WORD PTR TxVector+6926, bx
	movdqa	XMMWORD PTR TxVector+560, xmm0
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR TxVector+6914
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+6912, cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR TxVector+6914, cx
	mov	WORD PTR TxVector+6916, ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR TxVector+6918, ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR TxVector+6920, ax
	movzx	eax, WORD PTR TxVector+698
	sar	ax, 2
	cmp	DWORD PTR TxVector, 44			; 0000002cH
	mov	WORD PTR TxVector+6922, ax
	jne	$LN2068@Dot11aTxFr@8
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR TxVector+560
	mov	edx, 5
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm15, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqa	xmm4, xmm2
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	lea	rcx, OFFSET FLAT:TxVector+1276
	lea	rax, OFFSET FLAT:TxVector+640
	por	xmm1, xmm2
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	1
$LL2073@Dot11aTxFr@8:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r12+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL2073@Dot11aTxFr@8
	movdqa	XMMWORD PTR rr1$2910473[rsp], xmm3
	mov	eax, DWORD PTR rr1$2910473[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2910473[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2910473[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
	npad	2
$LL2910@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rsi, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rsi-16], xmm1
	jne	SHORT $LL2910@Dot11aTxFr@8
	mov	eax, 176				; 000000b0H
	jmp	SHORT $LN2062@Dot11aTxFr@8
$LN2068@Dot11aTxFr@8:
	cmp	DWORD PTR TxVector, 40			; 00000028H
	jne	SHORT $LN2063@Dot11aTxFr@8
	mov	rax, rdi
	mov	ecx, 20
$LL2955@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rsi, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rsi-16], xmm1
	jne	SHORT $LL2955@Dot11aTxFr@8
	mov	eax, 160				; 000000a0H
	jmp	SHORT $LN2062@Dot11aTxFr@8
$LN2063@Dot11aTxFr@8:
	mov	eax, ebx
$LN2062@Dot11aTxFr@8:
	mov	ecx, eax
	mov	rax, QWORD PTR pcOutput$[rsp]

; 70   :             uiPilotIndex++;

	inc	r14d
	lea	rsi, QWORD PTR [rax+rcx*2]
	inc	r13
	mov	QWORD PTR pcOutput$[rsp], rsi

; 71   :             if (uiPilotIndex == 127)

	cmp	r14d, 127				; 0000007fH
	jne	$LN6@Dot11aTxFr@8

; 72   :                 uiPilotIndex = 0;

	mov	r14d, ebx
	mov	r13, rbx

; 73   :             pbInput += (DBPS / BITS_PER_BYTE);
; 74   :         }
; 75   :         else

	jmp	$LN6@Dot11aTxFr@8
$LN4@Dot11aTxFr@8:

; 76   :         {
; 77   :             pcOutput += Generate9MSymbol2(info, pcOutput, info->cWindow,
; 78   :                     pbInput, (*PILOTSGN(uiPilotIndex)));

	movzx	r9d, BYTE PTR [rbp+1]
	movzx	r8d, BYTE PTR [rbp]
	movzx	r10d, BYTE PTR [rbp+2]
	movzx	ebx, BYTE PTR [rbp+3]
	movzx	edi, BYTE PTR [rbp+4]
	movzx	eax, r9b
	and	al, 3
	movzx	edx, al
	movzx	eax, r8b
	and	al, 240					; 000000f0H
	shl	dx, 8
	movzx	ecx, al
	movzx	eax, r12b
	lea	r12, OFFSET FLAT:__ImageBase
	or	dx, cx
	shl	dx, 2
	movzx	ecx, dx
	or	rcx, rax
	movzx	eax, r9w
	movzx	r11d, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r12]
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r8
	mov	BYTE PTR TxVector+25, r11b
	shr	rax, 4
	or	rcx, rax
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r12]
	mov	BYTE PTR TxVector+26, al
	movzx	eax, r10b
	and	al, 63					; 0000003fH
	movzx	ecx, al
	mov	rax, r9
	shr	rax, 2
	shl	cx, 6
	movzx	edx, cx
	or	rdx, rax
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rdx+r12]
	mov	rdx, r10
	mov	BYTE PTR TxVector+27, al
	movzx	eax, bl
	shr	rdx, 6
	and	al, 15
	movzx	ecx, al
	shl	cx, 8
	movzx	eax, cx
	or	rax, r10
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r12]
	mov	BYTE PTR TxVector+28, al
	movzx	eax, dil
	and	al, 3
	movzx	ecx, al
	shl	cx, 8
	or	cx, bx
	shl	cx, 2
	movzx	eax, cx
	or	rax, rdx
	mov	edx, 256				; 00000100H
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r12]
	mov	BYTE PTR TxVector+29, al
	movzx	eax, di
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, rbx
	shr	rax, 4
	or	rcx, rax
	shr	dil, 2
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r12]
	lea	ecx, DWORD PTR [r11+r11*2]
	mov	BYTE PTR TxVector+24, dil
	mov	BYTE PTR TxVector+30, al
	lea	eax, DWORD PTR [rcx+rcx]
	lea	r11, OFFSET FLAT:TxVector+26
	cdqe
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	movzx	r10d, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	npad	7
$LL3004@Dot11aTxFr@8:
	movzx	eax, BYTE PTR [r11]
	inc	r11
	add	eax, edx
	add	edx, 256				; 00000100H
	lea	eax, DWORD PTR [rax+rax*2]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+2]
	or	r10w, WORD PTR INTERLEAVE_6M_LUT[r12+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	cmp	edx, 1536				; 00000600H
	jb	SHORT $LL3004@Dot11aTxFr@8
	lea	r10, OFFSET FLAT:TxVector+112
	lea	r8, OFFSET FLAT:TxVector+61
	mov	r9d, 6
	mov	rdx, r10
	npad	10
$LL3009@Dot11aTxFr@8:
	movzx	eax, BYTE PTR [r8]
	add	rdx, 32					; 00000020H
	inc	r8
	shl	eax, 3
	sub	r9, 1
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4]
	mov	QWORD PTR [rdx-32], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+8]
	mov	QWORD PTR [rdx-24], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+16]
	mov	QWORD PTR [rdx-16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r12+rcx*4+24]
	mov	QWORD PTR [rdx-8], rax
	jne	SHORT $LL3009@Dot11aTxFr@8
	mov	rcx, r10
	mov	edx, 38					; 00000026H
	lea	r8, OFFSET FLAT:TxVector+456
$LL3023@Dot11aTxFr@8:
	cmp	edx, 57					; 00000039H
	je	SHORT $LN3022@Dot11aTxFr@8
	cmp	edx, 43					; 0000002bH
	je	SHORT $LN3022@Dot11aTxFr@8
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN3022@Dot11aTxFr@8:
	inc	edx
	add	r8, 4
	cmp	edx, 64					; 00000040H
	jb	SHORT $LL3023@Dot11aTxFr@8
	mov	edx, 1
	lea	r8, OFFSET FLAT:TxVector+308
$LL3018@Dot11aTxFr@8:
	cmp	edx, 7
	je	SHORT $LN3017@Dot11aTxFr@8
	cmp	edx, 21
	je	SHORT $LN3017@Dot11aTxFr@8
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN3017@Dot11aTxFr@8:
	inc	edx
	add	r8, 4
	cmp	edx, 26
	jbe	SHORT $LL3018@Dot11aTxFr@8
	cmp	BYTE PTR PILOTSGN_LUT[r13+r12], 0
	jne	SHORT $LN3013@Dot11aTxFr@8
	xor	ebx, ebx
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, bx
	mov	WORD PTR TxVector+388, cx
	mov	WORD PTR TxVector+390, bx
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, bx
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, bx
	jmp	SHORT $LN3012@Dot11aTxFr@8
$LN3013@Dot11aTxFr@8:
	xor	ebx, ebx
	mov	ecx, -10720				; ffffffffffffd620H
	mov	eax, 10720				; 000029e0H
	mov	WORD PTR TxVector+332, cx
	mov	WORD PTR TxVector+334, bx
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, bx
	mov	WORD PTR TxVector+532, cx
	mov	WORD PTR TxVector+534, bx
	mov	WORD PTR TxVector+476, cx
	mov	WORD PTR TxVector+478, bx
$LN3012@Dot11aTxFr@8:
	lea	rcx, QWORD PTR temp$2919127[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$2919127[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2919127[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2919127[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r8, OFFSET FLAT:TxVector+688
	lea	rdx, OFFSET FLAT:?FFT128LUTMap@@3QBFB	; FFT128LUTMap
	mov	r11, r8
	lea	r12, OFFSET FLAT:?FFT128LUTMap@@3QBFB+256
$LL3033@Dot11aTxFr@8:
	movsx	rax, WORD PTR [rdx]
	add	rdx, 2
	add	r11, 4
	cmp	rdx, r12
	mov	ecx, DWORD PTR temp$2919127[rsp+rax*4]
	mov	DWORD PTR [r11-4], ecx
	jl	SHORT $LL3033@Dot11aTxFr@8
	lea	r12, OFFSET FLAT:__ImageBase
	mov	rax, r8
	mov	ecx, 32					; 00000020H
	npad	4
$LL3030@Dot11aTxFr@8:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL3030@Dot11aTxFr@8
	lea	rdi, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rdi
	call	memcpy
	movzx	ecx, WORD PTR TxVector+568
	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+6912
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR TxVector+6912
	mov	WORD PTR TxVector+6924, bx
	mov	WORD PTR TxVector+6926, bx
	movdqa	XMMWORD PTR TxVector+560, xmm0
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR TxVector+6914
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+6912, cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR TxVector+6914, cx
	mov	WORD PTR TxVector+6916, ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR TxVector+6918, ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR TxVector+6920, ax
	movzx	eax, WORD PTR TxVector+698
	sar	ax, 2
	cmp	DWORD PTR TxVector, 44			; 0000002cH
	mov	WORD PTR TxVector+6922, ax
	jne	$LN3072@Dot11aTxFr@8
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR TxVector+560
	mov	edx, 5
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm15, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqa	xmm4, xmm2
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	lea	rcx, OFFSET FLAT:TxVector+1276
	lea	rax, OFFSET FLAT:TxVector+640
	por	xmm1, xmm2
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	1
$LL3077@Dot11aTxFr@8:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rdi+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rdi+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r12+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL3077@Dot11aTxFr@8
	movdqa	XMMWORD PTR rr1$2918490[rsp], xmm3
	mov	eax, DWORD PTR rr1$2918490[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2918490[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2918490[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
	npad	2
$LL3914@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rsi, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rsi-16], xmm1
	jne	SHORT $LL3914@Dot11aTxFr@8
	mov	eax, 176				; 000000b0H
	jmp	SHORT $LN3066@Dot11aTxFr@8
$LN3072@Dot11aTxFr@8:
	cmp	DWORD PTR TxVector, 40			; 00000028H
	jne	SHORT $LN3067@Dot11aTxFr@8
	mov	rax, rdi
	mov	ecx, 20
$LL3959@Dot11aTxFr@8:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rsi, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rsi-16], xmm1
	jne	SHORT $LL3959@Dot11aTxFr@8
	mov	eax, 160				; 000000a0H
	jmp	SHORT $LN3066@Dot11aTxFr@8
$LN3067@Dot11aTxFr@8:
	mov	eax, ebx
$LN3066@Dot11aTxFr@8:
	mov	ecx, eax
	mov	rax, QWORD PTR pcOutput$[rsp]

; 79   :             uiPilotIndex++;

	inc	r14d
	lea	rsi, QWORD PTR [rax+rcx*2]
	inc	r13
	mov	QWORD PTR pcOutput$[rsp], rsi

; 80   :             if (uiPilotIndex == 127)

	cmp	r14d, 127				; 0000007fH
	jne	SHORT $LN1@Dot11aTxFr@8

; 81   :                 uiPilotIndex = 0;

	mov	r14d, ebx
	mov	r13, rbx
$LN1@Dot11aTxFr@8:

; 82   :             pbInput += (DBPS / BITS_PER_BYTE) + 1;

	add	rbp, 5
$LN6@Dot11aTxFr@8:

; 62   :     pbInput = info->bFrameScrambled;
; 63   : 
; 64   :     for (i = 0; i < uiSymbolCountData; i++)

	inc	r15d
	cmp	r15d, DWORD PTR uiSymbolCountData$1$[rsp]
	jae	SHORT $LN4360@Dot11aTxFr@8
	movzx	r12d, BYTE PTR TxVector+24
	jmp	$LL7@Dot11aTxFr@8
$LN4360@Dot11aTxFr@8:

; 83   :         }
; 84   :     }
; 85   :     
; 86   :     UpsampleTailAndCopyNT(info, pcOutput);

	cmp	DWORD PTR TxVector, 44			; 0000002cH
	movaps	xmm14, XMMWORD PTR [rsp+1136]
	movaps	xmm13, XMMWORD PTR [rsp+1152]
	mov	r15, QWORD PTR [rsp+1280]
	mov	r14, QWORD PTR [rsp+1288]
	mov	r13, QWORD PTR [rsp+1296]
	movaps	xmm12, XMMWORD PTR [rsp+1168]
	movaps	xmm11, XMMWORD PTR [rsp+1184]
	movaps	xmm10, XMMWORD PTR [rsp+1200]
	mov	r12, QWORD PTR [rsp+1304]
	mov	rdi, QWORD PTR [rsp+1352]
	mov	rbp, QWORD PTR [rsp+1344]
	movaps	xmm9, XMMWORD PTR [rsp+1216]
	movaps	xmm8, XMMWORD PTR [rsp+1232]
	movaps	xmm7, XMMWORD PTR [rsp+1248]
	mov	rbx, QWORD PTR [rsp+1328]
	movaps	xmm6, XMMWORD PTR [rsp+1264]
	jne	SHORT $LN4005@Dot11aTxFr@8
	movdqa	xmm1, XMMWORD PTR TxVector+6912
	movdqa	XMMWORD PTR TxVector+1216, xmm15
	movdqa	xmm2, xmm1
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	palignr	xmm2, xmm15, 12
	psraw	xmm15, 6
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pand	xmm2, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm1, xmm0
	pand	xmm1, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm2, xmm1
	movdqa	XMMWORD PTR TxVector+1200, xmm2
	psraw	xmm2, 6
	packsswb xmm2, xmm15
	movntdq	XMMWORD PTR [rsi], xmm2
	jmp	SHORT $LN4336@Dot11aTxFr@8
$LN4005@Dot11aTxFr@8:
	cmp	DWORD PTR TxVector, 40			; 00000028H
	jne	SHORT $LN4336@Dot11aTxFr@8
	movdqa	xmm1, XMMWORD PTR TxVector+6912
	movdqa	xmm0, XMMWORD PTR TxVector+6928
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rsi], xmm1
$LN4336@Dot11aTxFr@8:

; 87   : 
; 88   :     return S_OK;

	xor	eax, eax

; 89   : }

	movaps	xmm15, XMMWORD PTR [rsp+1120]
	add	rsp, 1312				; 00000520H
	pop	rsi
	ret	0
?Dot11aTxFrameEncode9@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ENDP ; Dot11aTxFrameEncode9
END
