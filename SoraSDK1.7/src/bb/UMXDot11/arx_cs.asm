; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?ShiftRight2@@YAXAEAUSignalBlock@@@Z		; ShiftRight2
PUBLIC	??$?5U_COMPLEX32@@@@YA?BU_COMPLEX32@@AEBU0@H@Z	; operator>><_COMPLEX32>
PUBLIC	?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z ; EstimateDC
PUBLIC	??$permutate_low@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z ; permutate_low<1,0,3,2>
PUBLIC	??$permutate_high@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z ; permutate_high<1,0,3,2>
PUBLIC	?conj_mul@@YAXAEAUvi@@0AEBUvcs@@1@Z		; conj_mul
PUBLIC	??5@YA?AUvi@@AEBU0@H@Z				; operator>>
PUBLIC	??$vshift_right@Uvi@@@?$rep@$00@@SAXPEAUvi@@H@Z	; rep<1>::vshift_right<vi>
PUBLIC	??$vshift_right@Uvi@@@?$rep@$01@@SAXPEAUvi@@H@Z	; rep<2>::vshift_right<vi>
PUBLIC	??$vshift_right@Uvi@@@?$rep@$02@@SAXPEAUvi@@H@Z	; rep<3>::vshift_right<vi>
PUBLIC	??$vshift_right@Uvi@@@?$rep@$03@@SAXPEAUvi@@H@Z	; rep<4>::vshift_right<vi>
PUBLIC	??$vshift_right@Uvi@@@?$rep@$04@@SAXPEAUvi@@H@Z	; rep<5>::vshift_right<vi>
PUBLIC	??$vshift_right@Uvi@@@?$rep@$05@@SAXPEAUvi@@H@Z	; rep<6>::vshift_right<vi>
PUBLIC	??$vshift_right@Uvi@@@?$rep@$06@@SAXPEAUvi@@H@Z	; rep<7>::vshift_right<vi>
PUBLIC	?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z ; GetAutoCorrelation
PUBLIC	?GetEnergy@@YAHAEBUSignalBlock@@@Z		; GetEnergy
	ORG $+12
rgbLongPrePositive DB 00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
gAGCLut	DD	0fffffff9H
	DD	0fffffffaH
	DD	0fffffffbH
	DD	0fffffffcH
	DD	0fffffffdH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\complex_ext.h
;	COMDAT ??$?5U_COMPLEX32@@@@YA?BU_COMPLEX32@@AEBU0@H@Z
_TEXT	SEGMENT
t$ = 8
a$ = 8
shift$ = 16
??$?5U_COMPLEX32@@@@YA?BU_COMPLEX32@@AEBU0@H@Z PROC	; operator>><_COMPLEX32>, COMDAT

; 99   : FINL operator>>(const T& a, int shift) { T t; t.re = a.re >> shift; t.im = a.im >> shift; return t; }

	mov	eax, DWORD PTR [rcx]
	sar	eax, 4
	mov	DWORD PTR t$[rsp], eax
	mov	eax, DWORD PTR [rcx+4]
	sar	eax, 4
	mov	DWORD PTR t$[rsp+4], eax
	mov	rax, QWORD PTR t$[rsp]
	ret	0
??$?5U_COMPLEX32@@@@YA?BU_COMPLEX32@@AEBU0@H@Z ENDP	; operator>><_COMPLEX32>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
;	COMDAT ??$permutate_high@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate_high@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z PROC ; permutate_high<1,0,3,2>, COMDAT

; 587  : DEFINE_OP_PERMUTATION4(permutate_high, vcs, _mm_shufflehi_epi16);

	pshufhw	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate_high@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z ENDP ; permutate_high<1,0,3,2>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate_low@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate_low@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z PROC	; permutate_low<1,0,3,2>, COMDAT

; 581  : DEFINE_OP_PERMUTATION4(permutate_low, vcs, _mm_shufflelo_epi16);

	pshuflw	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate_low@$00$0A@$02$01@@YA?AUvcs@@AEBU0@@Z ENDP	; permutate_low<1,0,3,2>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\adjustsb.h
;	COMDAT ?ShiftRight2@@YAXAEAUSignalBlock@@@Z
_TEXT	SEGMENT
block$ = 8
?ShiftRight2@@YAXAEAUSignalBlock@@@Z PROC		; ShiftRight2, COMDAT

; 10   :     //size_t i;
; 11   :     //for (i = 0; i < block.size; i++)
; 12   :     //    block[i] = shift_right(block[i], 2);
; 13   :     assert(block.size == 7);
; 14   :     block[0] = shift_right(block[0], 2);

	movdqa	xmm0, XMMWORD PTR [rcx]
	psraw	xmm0, 2
	movdqa	XMMWORD PTR [rcx], xmm0

; 15   :     block[1] = shift_right(block[1], 2);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	psraw	xmm1, 2
	movdqa	XMMWORD PTR [rcx+16], xmm1

; 16   :     block[2] = shift_right(block[2], 2);

	movdqa	xmm0, XMMWORD PTR [rcx+32]
	psraw	xmm0, 2
	movdqa	XMMWORD PTR [rcx+32], xmm0

; 17   :     block[3] = shift_right(block[3], 2);

	movdqa	xmm1, XMMWORD PTR [rcx+48]
	psraw	xmm1, 2
	movdqa	XMMWORD PTR [rcx+48], xmm1

; 18   :     block[4] = shift_right(block[4], 2);

	movdqa	xmm0, XMMWORD PTR [rcx+64]
	psraw	xmm0, 2
	movdqa	XMMWORD PTR [rcx+64], xmm0

; 19   :     block[5] = shift_right(block[5], 2);

	movdqa	xmm1, XMMWORD PTR [rcx+80]
	psraw	xmm1, 2
	movdqa	XMMWORD PTR [rcx+80], xmm1

; 20   :     block[6] = shift_right(block[6], 2);

	movdqa	xmm0, XMMWORD PTR [rcx+96]
	psraw	xmm0, 2
	movdqa	XMMWORD PTR [rcx+96], xmm0

; 21   : }

	ret	0
?ShiftRight2@@YAXAEAUSignalBlock@@@Z ENDP		; ShiftRight2
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ??5@YA?AUvi@@AEBU0@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
nbits$ = 24
??5@YA?AUvi@@AEBU0@H@Z PROC				; operator>>, COMDAT

; 706  : DEFINE_OP_SHIFT_RIGHT(shift_right, vi, _mm_srai_epi32);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??5@YA?AUvi@@AEBU0@H@Z ENDP				; operator>>
; Function compile flags: /Ogtpy
;	COMDAT ??$vshift_right@Uvi@@@?$rep@$00@@SAXPEAUvi@@H@Z
_TEXT	SEGMENT
psrc$ = 8
nbits$ = 16
??$vshift_right@Uvi@@@?$rep@$00@@SAXPEAUvi@@H@Z PROC	; rep<1>::vshift_right<vi>, COMDAT

; 1275 : 	void vshift_right (T * psrc, int nbits ) {
; 1276 : 		 *psrc = (*psrc) >> nbits; 

	movdqa	xmm0, XMMWORD PTR [rcx]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0

; 1277 : 	}

	ret	0
??$vshift_right@Uvi@@@?$rep@$00@@SAXPEAUvi@@H@Z ENDP	; rep<1>::vshift_right<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$vshift_right@Uvi@@@?$rep@$01@@SAXPEAUvi@@H@Z
_TEXT	SEGMENT
psrc$ = 8
nbits$ = 16
??$vshift_right@Uvi@@@?$rep@$01@@SAXPEAUvi@@H@Z PROC	; rep<2>::vshift_right<vi>, COMDAT

; 1186 : 	void vshift_right (T * psrc, int nbits ) {
; 1187 : 		 *psrc = (*psrc) >> nbits; 

	movdqa	xmm0, XMMWORD PTR [rcx]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0

; 1188 : 		 psrc ++;
; 1189 : 		 rep<N-1>::vshift_right (psrc, nbits);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+16], xmm1

; 1190 : 	}

	ret	0
??$vshift_right@Uvi@@@?$rep@$01@@SAXPEAUvi@@H@Z ENDP	; rep<2>::vshift_right<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$vshift_right@Uvi@@@?$rep@$02@@SAXPEAUvi@@H@Z
_TEXT	SEGMENT
psrc$ = 8
nbits$ = 16
??$vshift_right@Uvi@@@?$rep@$02@@SAXPEAUvi@@H@Z PROC	; rep<3>::vshift_right<vi>, COMDAT

; 1186 : 	void vshift_right (T * psrc, int nbits ) {
; 1187 : 		 *psrc = (*psrc) >> nbits; 

	movdqa	xmm0, XMMWORD PTR [rcx]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0

; 1188 : 		 psrc ++;
; 1189 : 		 rep<N-1>::vshift_right (psrc, nbits);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+16], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+32]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+32], xmm0

; 1190 : 	}

	ret	0
??$vshift_right@Uvi@@@?$rep@$02@@SAXPEAUvi@@H@Z ENDP	; rep<3>::vshift_right<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$vshift_right@Uvi@@@?$rep@$03@@SAXPEAUvi@@H@Z
_TEXT	SEGMENT
psrc$ = 8
nbits$ = 16
??$vshift_right@Uvi@@@?$rep@$03@@SAXPEAUvi@@H@Z PROC	; rep<4>::vshift_right<vi>, COMDAT

; 1186 : 	void vshift_right (T * psrc, int nbits ) {
; 1187 : 		 *psrc = (*psrc) >> nbits; 

	movdqa	xmm0, XMMWORD PTR [rcx]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0

; 1188 : 		 psrc ++;
; 1189 : 		 rep<N-1>::vshift_right (psrc, nbits);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+16], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+32]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+48]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+48], xmm1

; 1190 : 	}

	ret	0
??$vshift_right@Uvi@@@?$rep@$03@@SAXPEAUvi@@H@Z ENDP	; rep<4>::vshift_right<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$vshift_right@Uvi@@@?$rep@$04@@SAXPEAUvi@@H@Z
_TEXT	SEGMENT
psrc$ = 8
nbits$ = 16
??$vshift_right@Uvi@@@?$rep@$04@@SAXPEAUvi@@H@Z PROC	; rep<5>::vshift_right<vi>, COMDAT

; 1186 : 	void vshift_right (T * psrc, int nbits ) {
; 1187 : 		 *psrc = (*psrc) >> nbits; 

	movdqa	xmm0, XMMWORD PTR [rcx]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0

; 1188 : 		 psrc ++;
; 1189 : 		 rep<N-1>::vshift_right (psrc, nbits);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+16], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+32]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+48]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+48], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+64]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+64], xmm0

; 1190 : 	}

	ret	0
??$vshift_right@Uvi@@@?$rep@$04@@SAXPEAUvi@@H@Z ENDP	; rep<5>::vshift_right<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$vshift_right@Uvi@@@?$rep@$05@@SAXPEAUvi@@H@Z
_TEXT	SEGMENT
psrc$ = 8
nbits$ = 16
??$vshift_right@Uvi@@@?$rep@$05@@SAXPEAUvi@@H@Z PROC	; rep<6>::vshift_right<vi>, COMDAT

; 1186 : 	void vshift_right (T * psrc, int nbits ) {
; 1187 : 		 *psrc = (*psrc) >> nbits; 

	movdqa	xmm0, XMMWORD PTR [rcx]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0

; 1188 : 		 psrc ++;
; 1189 : 		 rep<N-1>::vshift_right (psrc, nbits);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+16], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+32]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+48]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+48], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+64]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+64], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+80]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+80], xmm1

; 1190 : 	}

	ret	0
??$vshift_right@Uvi@@@?$rep@$05@@SAXPEAUvi@@H@Z ENDP	; rep<6>::vshift_right<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$vshift_right@Uvi@@@?$rep@$06@@SAXPEAUvi@@H@Z
_TEXT	SEGMENT
psrc$ = 8
nbits$ = 16
??$vshift_right@Uvi@@@?$rep@$06@@SAXPEAUvi@@H@Z PROC	; rep<7>::vshift_right<vi>, COMDAT

; 1186 : 	void vshift_right (T * psrc, int nbits ) {
; 1187 : 		 *psrc = (*psrc) >> nbits; 

	movdqa	xmm0, XMMWORD PTR [rcx]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx], xmm0

; 1188 : 		 psrc ++;
; 1189 : 		 rep<N-1>::vshift_right (psrc, nbits);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+16], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+32]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+48]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+48], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+64]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+64], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+80]
	psrad	xmm1, 5
	movdqa	XMMWORD PTR [rcx+80], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+96]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR [rcx+96], xmm0

; 1190 : 	}

	ret	0
??$vshift_right@Uvi@@@?$rep@$06@@SAXPEAUvi@@H@Z ENDP	; rep<7>::vshift_right<vi>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetEnergy@@YAHAEBUSignalBlock@@@Z DD imagerel $LN227
	DD	imagerel $LN227+166
	DD	imagerel $unwind$?GetEnergy@@YAHAEBUSignalBlock@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetEnergy@@YAHAEBUSignalBlock@@@Z DD 034201H
	DD	016842H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\acorrel.h
xdata	ENDS
;	COMDAT ?GetEnergy@@YAHAEBUSignalBlock@@@Z
_TEXT	SEGMENT
sum$ = 0
inBlock$ = 48
?GetEnergy@@YAHAEBUSignalBlock@@@Z PROC			; GetEnergy, COMDAT

; 68   : {

$LN227:
	sub	rsp, 40					; 00000028H

; 69   : #if 0
; 70   :     vi re[7], im;
; 71   : 
; 72   : 	conj_mul(re[0], im, inBlock[0], inBlock[0]);
; 73   : 	conj_mul(re[1], im, inBlock[1], inBlock[1]);
; 74   : 	conj_mul(re[2], im, inBlock[2], inBlock[2]);
; 75   : 	conj_mul(re[3], im, inBlock[3], inBlock[3]);
; 76   : 	conj_mul(re[4], im, inBlock[4], inBlock[4]);
; 77   : 	conj_mul(re[5], im, inBlock[5], inBlock[5]);
; 78   : 	conj_mul(re[6], im, inBlock[6], inBlock[6]);
; 79   : 
; 80   :     vi s1 = shift_right ( add(re[0], re[1]), NORM_AC_SHIFT );
; 81   :     vi s2 = shift_right ( add(re[2], re[3]), NORM_AC_SHIFT );
; 82   :     vi s3 = shift_right ( add(re[4], re[5]), NORM_AC_SHIFT );
; 83   :     vi s4 = shift_right ( re[6], NORM_AC_SHIFT );
; 84   : 
; 85   :     vi sum1 = add (s1, s2);
; 86   :     vi sum2 = add (s3, s4);
; 87   :     vi sum = add ( sum1, sum2 );
; 88   :     
; 89   :     sum = hadd(sum);
; 90   :     return sum[0];
; 91   : #else
; 92   : 	vi sum;
; 93   : 
; 94   : 	sum = shift_right ( SquaredNorm (inBlock[0]), NORM_AC_SHIFT);
; 95   : 	sum = add (sum, shift_right ( SquaredNorm (inBlock[1]), NORM_AC_SHIFT));

	movdqa	xmm0, XMMWORD PTR [rcx+16]

; 96   : 	sum = add (sum, shift_right ( SquaredNorm (inBlock[2]), NORM_AC_SHIFT));

	movdqa	xmm1, XMMWORD PTR [rcx+32]

; 97   : 	sum = add (sum, shift_right ( SquaredNorm (inBlock[3]), NORM_AC_SHIFT));

	movdqa	xmm2, XMMWORD PTR [rcx+48]
	pmaddwd	xmm0, xmm0
	pmaddwd	xmm1, xmm1
	pmaddwd	xmm2, xmm2

; 98   : 	sum = add (sum, shift_right ( SquaredNorm (inBlock[4]), NORM_AC_SHIFT));

	movdqa	xmm3, XMMWORD PTR [rcx+64]

; 99   : 	sum = add (sum, shift_right ( SquaredNorm (inBlock[5]), NORM_AC_SHIFT));

	movdqa	xmm4, XMMWORD PTR [rcx+80]

; 100  : 	sum = add (sum, shift_right ( SquaredNorm (inBlock[6]), NORM_AC_SHIFT));

	movdqa	xmm5, XMMWORD PTR [rcx+96]
	psrad	xmm0, 5
	psrad	xmm1, 5
	psrad	xmm2, 5
	movaps	XMMWORD PTR [rsp+16], xmm6
	movdqa	xmm6, XMMWORD PTR [rcx]
	pmaddwd	xmm3, xmm3
	pmaddwd	xmm6, xmm6
	pmaddwd	xmm4, xmm4
	pmaddwd	xmm5, xmm5
	psrad	xmm3, 5
	psrad	xmm6, 5
	psrad	xmm4, 5
	psrad	xmm5, 5
	paddd	xmm6, xmm0
	paddd	xmm6, xmm1
	paddd	xmm6, xmm2
	paddd	xmm6, xmm3
	paddd	xmm6, xmm4
	paddd	xmm6, xmm5

; 101  : 	sum = hadd (sum );

	pshufd	xmm0, xmm6, 177				; 000000b1H
	paddd	xmm6, xmm0
	pshufd	xmm0, xmm6, 78				; 0000004eH
	paddd	xmm6, xmm0
	movdqa	XMMWORD PTR sum$[rsp], xmm6

; 102  : 	return sum[0];

	mov	eax, DWORD PTR sum$[rsp]

; 103  : #endif
; 104  : }

	movaps	xmm6, XMMWORD PTR [rsp+16]
	add	rsp, 40					; 00000028H
	ret	0
?GetEnergy@@YAHAEBUSignalBlock@@@Z ENDP			; GetEnergy
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z DD imagerel $LN111
	DD	imagerel $LN111+279
	DD	imagerel $unwind$?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z DD 010401H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\removedc.h
xdata	ENDS
;	COMDAT ?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z
_TEXT	SEGMENT
t$ = 0
t$286886 = 16
sum$ = 16
pRxContextA$ = 48
inBlock$ = 56
?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z PROC ; EstimateDC, COMDAT

; 29   : {

$LN111:
	sub	rsp, 40					; 00000028H

; 30   :     if (pRxContextA->dcLearningCounter++ >= DCHIS_LEN)

	mov	eax, DWORD PTR [rcx+1984]
	mov	r8, rcx
	lea	ecx, DWORD PTR [rax+1]
	mov	DWORD PTR [r8+1984], ecx
	cmp	eax, 16
	jb	SHORT $LN2@EstimateDC

; 31   :     {
; 32   :         if (pRxContextA->dcLearningCounter != DCHIS_LEN + 7) return;

	cmp	ecx, 23
	jne	$LN109@EstimateDC

; 33   :         pRxContextA->dcLearningCounter = DCHIS_LEN;

	mov	DWORD PTR [r8+1984], 16
$LN2@EstimateDC:

; 34   :     } 
; 35   : 
; 36   :     // rewrite the DC Estimation 
; 37   :     // taking care of overflow as well as AGC
; 38   :     // taking sample by the first 4 Vectors
; 39   : 
; 40   :     vcs d1, d2, d3;
; 41   : 
; 42   :     // update DC
; 43   :     d1 = add ( inBlock[0], inBlock[1] );

	movdqa	xmm1, XMMWORD PTR [rdx]

; 44   :     d2 = add ( inBlock[2], inBlock[3] );

	movdqa	xmm0, XMMWORD PTR [rdx+32]
	paddw	xmm1, XMMWORD PTR [rdx+16]
	paddw	xmm0, XMMWORD PTR [rdx+48]

; 45   :     d1 = shift_right ( d1, 4 );

	psraw	xmm1, 4

; 46   :     d2 = shift_right ( d2, 4 );

	psraw	xmm0, 4

; 47   :     d3 = add ( d1, d2 );

	paddw	xmm1, xmm0

; 48   :     vcs sum = hadd ( d3 );

	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm1, 78				; 0000004eH
	paddw	xmm1, xmm0
	movdqa	XMMWORD PTR sum$[rsp], xmm1

; 49   : 
; 50   :     pRxContextA->dcSum += sum[0];

	mov	edx, DWORD PTR sum$[rsp]
	movsx	eax, dx
	add	DWORD PTR [r8+2056], eax
	movsx	eax, WORD PTR sum$[rsp+2]
	add	DWORD PTR [r8+2060], eax

; 51   :     pRxContextA->dcSum -= pRxContextA->dcHistory[pRxContextA->dcHistoryCounter];

	mov	ecx, DWORD PTR [r8+1988]
	movsx	eax, WORD PTR [r8+rcx*4+1992]
	sub	DWORD PTR [r8+2056], eax
	movsx	eax, WORD PTR [r8+rcx*4+1994]
	sub	DWORD PTR [r8+2060], eax

; 52   : 
; 53   :     pRxContextA->dcHistory[pRxContextA->dcHistoryCounter] = sum[0];

	mov	eax, DWORD PTR [r8+1988]
	mov	DWORD PTR [r8+rax*4+1992], edx

; 54   :     pRxContextA->dcHistoryCounter++;

	mov	eax, DWORD PTR [r8+1988]
	inc	eax

; 55   :     pRxContextA->dcHistoryCounter &= DCHIS_MASK;

	and	eax, 15
	mov	DWORD PTR [r8+1988], eax

; 56   : 
; 57   :     COMPLEX32 dcSumShift = pRxContextA->dcSum >> (DCHIS_SHIFT);

	mov	eax, DWORD PTR [r8+2056]
	sar	eax, 4
	mov	DWORD PTR t$286886[rsp], eax
	mov	eax, DWORD PTR [r8+2060]
	sar	eax, 4
	mov	DWORD PTR t$286886[rsp+4], eax

; 58   :     COMPLEX16 t = { (short)dcSumShift.re, (short)dcSumShift.im };

	movzx	eax, WORD PTR t$286886[rsp]
	mov	WORD PTR t$[rsp], ax
	mov	rax, QWORD PTR t$286886[rsp]
	shr	rax, 32					; 00000020H
	mov	WORD PTR t$[rsp+2], ax

; 59   :         
; 60   : 	set_all((vcs&)pRxContextA->dcEstimated, t);

	movd	xmm0, DWORD PTR t$[rsp]
	pshufd	xmm1, xmm0, 0
	movdqa	XMMWORD PTR [r8+1968], xmm1
$LN109@EstimateDC:

; 61   : 
; 62   : }

	add	rsp, 40					; 00000028H
	ret	0
?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z ENDP ; EstimateDC
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ?conj_mul@@YAXAEAUvi@@0AEBUvcs@@1@Z
_TEXT	SEGMENT
re$ = 8
im$ = 16
a$ = 24
b$ = 32
?conj_mul@@YAXAEAUvi@@0AEBUvcs@@1@Z PROC		; conj_mul, COMDAT

; 865  :     vcs vs1 = permutate_low<1, 0, 3, 2>(b);

	movdqa	xmm1, XMMWORD PTR [r9]
	pshuflw	xmm0, xmm1, 177				; 000000b1H

; 866  :     vs1 = permutate_high<1, 0, 3, 2>(vs1);

	pshufhw	xmm2, xmm0, 177				; 000000b1H

; 867  :     vs1 = conjre(vs1);

	psignw	xmm2, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB

; 868  :     re = pairwise_muladd((vs&)a, (vs&)b);

	movdqa	xmm0, XMMWORD PTR [r8]
	pmaddwd	xmm0, xmm1
	movdqa	XMMWORD PTR [rcx], xmm0

; 869  :     im = pairwise_muladd((vs&)vs1, (vs&)a);

	pmaddwd	xmm2, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rdx], xmm2

; 870  : }

	ret	0
?conj_mul@@YAXAEAUvi@@0AEBUvcs@@1@Z ENDP		; conj_mul
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z DD imagerel $LN835
	DD	imagerel $LN835+658
	DD	imagerel $unwind$?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z DD 0167801H
	DD	02f878H
	DD	03e858H
	DD	04d84dH
	DD	05c847H
	DD	06b842H
	DD	07a838H
	DD	089833H
	DD	09882eH
	DD	0a7829H
	DD	0b681cH
	DD	019010aH
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\acorrel.h
xdata	ENDS
;	COMDAT ?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z
_TEXT	SEGMENT
im$2$ = 0
sum_im$ = 0
sum_re$ = 16
inBlock$ = 208
histAutoCorrelation$ = 216
?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z PROC ; GetAutoCorrelation, COMDAT

; 7    : {

$LN835:
	mov	r11, rsp
	sub	rsp, 200				; 000000c8H

; 8    : #if 0
; 9    :     vi re[7], im;
; 10   : 
; 11   : 	conj_mul(re[0], im, inBlock[0], histAutoCorrelation[0]);
; 12   :     conj_mul(re[1], im, inBlock[1], histAutoCorrelation[1]);
; 13   :     conj_mul(re[2], im, inBlock[2], histAutoCorrelation[2]);
; 14   :     conj_mul(re[3], im, inBlock[3], histAutoCorrelation[3]);
; 15   :     conj_mul(re[4], im, inBlock[4], inBlock[0]);
; 16   :     conj_mul(re[5], im, inBlock[5], inBlock[1]);
; 17   :     conj_mul(re[6], im, inBlock[6], inBlock[2]);
; 18   : 
; 19   :     vi s1 = shift_right ( add(re[0], re[1]), NORM_AC_SHIFT );
; 20   :     vi s2 = shift_right ( add(re[2], re[3]), NORM_AC_SHIFT );
; 21   :     vi s3 = shift_right ( add(re[4], re[5]), NORM_AC_SHIFT );
; 22   :     vi s4 = shift_right ( re[6], NORM_AC_SHIFT );
; 23   : 
; 24   :     vi sum1 = add (s1, s2);
; 25   :     vi sum2 = add (s3, s4);
; 26   :     
; 27   : 	vi sum = add(sum1, sum2);
; 28   : 	sum = hadd(sum);  
; 29   : 
; 30   :     // Save history
; 31   :     histAutoCorrelation[0] = inBlock[3];
; 32   :     histAutoCorrelation[1] = inBlock[4];
; 33   :     histAutoCorrelation[2] = inBlock[5];
; 34   :     histAutoCorrelation[3] = inBlock[6];
; 35   : 
; 36   :     return sum[0];
; 37   : #else
; 38   : 	vi re[7], im[7], sum_re, sum_im;
; 39   : 	conj_mul(re[0], im[0], inBlock[0], histAutoCorrelation[0]);

	movdqa	xmm2, XMMWORD PTR [rcx]

; 40   : 	conj_mul(re[1], im[1], inBlock[1], histAutoCorrelation[1]);

	movdqa	xmm1, XMMWORD PTR [rcx+16]
	movdqa	xmm0, XMMWORD PTR [rdx]
	movaps	XMMWORD PTR [r11-24], xmm6
	movdqa	xmm6, XMMWORD PTR ?value@?1??conjre@@YA?AUvcs@@AEBU2@@Z@4QBEB
	movaps	XMMWORD PTR [r11-40], xmm7
	movaps	XMMWORD PTR [r11-56], xmm8
	movaps	XMMWORD PTR [r11-72], xmm9
	movaps	XMMWORD PTR [r11-88], xmm10
	movdqa	xmm10, xmm1
	movaps	XMMWORD PTR [r11-104], xmm11
	movaps	XMMWORD PTR [r11-120], xmm12
	movaps	XMMWORD PTR [rsp+64], xmm13
	movdqa	xmm12, xmm2
	movaps	XMMWORD PTR [rsp+48], xmm14
	pmaddwd	xmm12, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm0, xmm0, 177				; 000000b1H
	psignw	xmm0, xmm6

; 41   : 	conj_mul(re[2], im[2], inBlock[2], histAutoCorrelation[2]);
; 42   : 	conj_mul(re[3], im[3], inBlock[3], histAutoCorrelation[3]);
; 43   :     conj_mul(re[4], im[4], inBlock[4], inBlock[0]);
; 44   :     conj_mul(re[5], im[5], inBlock[5], inBlock[1]);
; 45   :     conj_mul(re[6], im[6], inBlock[6], inBlock[2]);
; 46   : 
; 47   : 	set_zero (sum_re);
; 48   : 	rep<7>::vshift_right (re, NORM_AC_SHIFT);

	psrad	xmm12, 5
	movaps	XMMWORD PTR [rsp+32], xmm15
	pmaddwd	xmm0, xmm2
	movdqa	XMMWORD PTR im$2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR [rdx+16]
	pmaddwd	xmm10, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm15, xmm0, 177			; 000000b1H
	movdqa	xmm0, XMMWORD PTR [rdx+32]
	psignw	xmm15, xmm6
	psrad	xmm10, 5
	pmaddwd	xmm15, xmm1
	movdqa	xmm1, XMMWORD PTR [rcx+32]
	movdqa	xmm8, xmm1
	pmaddwd	xmm8, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm14, xmm0, 177			; 000000b1H
	psignw	xmm14, xmm6
	psrad	xmm8, 5
	movdqa	xmm0, XMMWORD PTR [rdx+48]
	pmaddwd	xmm14, xmm1
	movdqa	xmm1, XMMWORD PTR [rcx+48]
	movdqa	xmm5, xmm1
	pmaddwd	xmm5, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm13, xmm0, 177			; 000000b1H
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pshufhw	xmm11, xmm0, 177			; 000000b1H
	psignw	xmm13, xmm6
	psrad	xmm5, 5
	movdqa	xmm0, XMMWORD PTR [rcx+16]
	pmaddwd	xmm13, xmm1
	movdqa	xmm1, XMMWORD PTR [rcx+64]
	movdqa	xmm4, xmm1
	psignw	xmm11, xmm6
	pmaddwd	xmm4, xmm2
	pmaddwd	xmm11, xmm1
	movdqa	xmm1, XMMWORD PTR [rcx+80]
	psrad	xmm4, 5
	movdqa	xmm3, xmm1
	pmaddwd	xmm3, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm9, xmm0, 177				; 000000b1H
	psignw	xmm9, xmm6
	psrad	xmm3, 5
	movdqa	xmm0, XMMWORD PTR [rcx+32]
	pmaddwd	xmm9, xmm1
	movdqa	xmm1, XMMWORD PTR [rcx+96]
	movdqa	xmm2, xmm1
	pmaddwd	xmm2, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm7, xmm0, 177				; 000000b1H
	psignw	xmm7, xmm6
	psrad	xmm2, 5
	xorps	xmm6, xmm6
	pmaddwd	xmm7, xmm1

; 49   : 	rep<7>::vsum (sum_re, re);

	movdqa	xmm1, xmm6
	paddd	xmm1, xmm12
	paddd	xmm1, xmm10
	paddd	xmm1, xmm8
	paddd	xmm1, xmm5
	paddd	xmm1, xmm4

; 50   : 	sum_re = hadd (sum_re );
; 51   : 
; 52   : 	set_zero (sum_im);
; 53   : 	rep<7>::vshift_right (im, NORM_AC_SHIFT);
; 54   : 	rep<7>::vsum (sum_im, im);
; 55   : 	sum_im = hadd (sum_im );
; 56   : 	
; 57   : 	int acorr = (sum_re[0] + sum_im[0]);
; 58   : 	
; 59   :     histAutoCorrelation[0] = inBlock[3];
; 60   :     histAutoCorrelation[1] = inBlock[4];
; 61   :     histAutoCorrelation[2] = inBlock[5];
; 62   :     histAutoCorrelation[3] = inBlock[6];
; 63   : 	return (acorr);	
; 64   : #endif
; 65   : }

	movaps	xmm8, XMMWORD PTR [r11-56]
	movaps	xmm10, XMMWORD PTR [r11-88]
	movaps	xmm12, XMMWORD PTR [r11-120]
	paddd	xmm1, xmm3
	lea	r11, QWORD PTR [r11]
	psrad	xmm15, 5
	paddd	xmm1, xmm2
	psrad	xmm14, 5
	psrad	xmm13, 5
	pshufd	xmm0, xmm1, 177				; 000000b1H
	psrad	xmm11, 5
	psrad	xmm9, 5
	paddd	xmm1, xmm0
	psrad	xmm7, 5
	pshufd	xmm0, xmm1, 78				; 0000004eH
	paddd	xmm1, xmm0
	movdqa	xmm0, XMMWORD PTR im$2$[rsp]
	psrad	xmm0, 5
	movdqa	XMMWORD PTR sum_re$[rsp], xmm1
	paddd	xmm6, xmm0
	paddd	xmm6, xmm15
	paddd	xmm6, xmm14
	movaps	xmm15, XMMWORD PTR [rsp+32]
	movaps	xmm14, XMMWORD PTR [rsp+48]
	paddd	xmm6, xmm13
	paddd	xmm6, xmm11
	movaps	xmm11, XMMWORD PTR [r11-104]
	movaps	xmm13, XMMWORD PTR [rsp+64]
	paddd	xmm6, xmm9
	paddd	xmm6, xmm7
	pshufd	xmm0, xmm6, 177				; 000000b1H
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm9, XMMWORD PTR [r11-72]
	paddd	xmm6, xmm0
	pshufd	xmm0, xmm6, 78				; 0000004eH
	paddd	xmm6, xmm0
	movdqa	xmm0, XMMWORD PTR [rcx+48]
	movdqa	XMMWORD PTR [rdx], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+64]
	movdqa	XMMWORD PTR sum_im$[rsp], xmm6
	mov	eax, DWORD PTR sum_im$[rsp]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movdqa	XMMWORD PTR [rdx+16], xmm1
	movdqa	xmm0, XMMWORD PTR [rcx+80]
	movdqa	XMMWORD PTR [rdx+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rcx+96]
	mov	ecx, DWORD PTR sum_re$[rsp]
	add	eax, ecx
	movdqa	XMMWORD PTR [rdx+48], xmm1
	mov	rsp, r11
	ret	0
?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z ENDP ; GetAutoCorrelation
PUBLIC	BB11ARxCarrierSense
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$BB11ARxCarrierSense DD imagerel $LN1356
	DD	imagerel $LN1356+1724
	DD	imagerel $unwind$BB11ARxCarrierSense
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BB11ARxCarrierSense DD 0133e01H
	DD	013983eH
	DD	0148833H
	DD	015782eH
	DD	016682aH
	DD	0336426H
	DD	0355417H
	DD	0343417H
	DD	02e0117H
	DD	0c00ed010H
	DD	0700cH
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_cs.c
xdata	ENDS
;	COMDAT BB11ARxCarrierSense
_TEXT	SEGMENT
bTouched$ = 32
block$46244 = 48
hr$760280 = 160
sum$764361 = 176
block44M$760281 = 192
pRxContextA$ = 400
pRxStream$ = 408
BB11ARxCarrierSense PROC				; COMDAT

; 13   : {

$LN1356:
	mov	rax, rsp
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+32], rbp
	push	rdi
	push	r12
	push	r13
	sub	rsp, 368				; 00000170H

; 14   :     volatile FLAG *pbWorkIndicator = pRxContextA->ri_pbWorkIndicator;   

	mov	r12, QWORD PTR [rcx+56]

; 15   :     FLAG bTouched;
; 16   :     int iCorrelation;
; 17   :     int iEnergy;
; 18   :     unsigned int uiRxBlockCount = 0;
; 19   :     HRESULT hr = BB11A_CHANNEL_CLEAN;
; 20   : 
; 21   :     pRxContextA->__uHighEnergyCounter = 0;

	mov	ebx, DWORD PTR hr$760280[rsp]
	mov	QWORD PTR [rax+16], rsi
	movaps	XMMWORD PTR [rax-40], xmm6
	movaps	XMMWORD PTR [rax-56], xmm7
	movaps	XMMWORD PTR [rax-72], xmm8
	xor	r13d, r13d
	mov	rdi, rcx
	movaps	XMMWORD PTR [rax-88], xmm9
	mov	ebp, r13d
	mov	DWORD PTR [rcx+16], r13d
$LL14@BB11ARxCar:

; 22   : 
; 23   :     do
; 24   :     {
; 25   :         SignalBlock block;
; 26   :         HRESULT hr1;
; 27   : 
; 28   :         if (pRxContextA->SampleRate == 40)

	mov	eax, DWORD PTR [rdi]
	cmp	eax, 40					; 00000028H
	jne	$LN11@BB11ARxCar

; 29   :             hr1 = FetchDMADataTouchDownSampled40(pRxStream, &bTouched, block);

	mov	rsi, QWORD PTR RxStream+24
	mov	edx, DWORD PTR RxStream+32
	lea	r9, QWORD PTR bTouched$[rsp]
	mov	rcx, rsi
	mov	r8d, 1024				; 00000400H
	call	SoraCheckSignalBlock
	mov	r11d, eax
	test	eax, eax
	js	$LN445@BB11ARxCar
	movdqa	xmm0, XMMWORD PTR [rsi+16]
	movdqa	xmm2, XMMWORD PTR [rsi+32]
	movdqa	xmm3, XMMWORD PTR [rsi+48]
	mov	edx, DWORD PTR RxStream+32
	lea	r9, QWORD PTR bTouched$[rsp]
	mov	r8d, 1024				; 00000400H
	pshufd	xmm1, xmm0, 8
	pshufd	xmm0, xmm2, 128				; 00000080H
	pshufd	xmm2, xmm3, 8
	movdqa	xmm4, XMMWORD PTR [rsi+64]
	movdqa	xmm6, XMMWORD PTR [rsi+80]
	movdqa	xmm7, XMMWORD PTR [rsi+96]
	movdqa	xmm9, XMMWORD PTR [rsi+112]
	movdqa	xmm8, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm5, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	mov	rsi, QWORD PTR RxStream+24
	sub	rsi, -128				; ffffffffffffff80H
	cmp	rsi, QWORD PTR RxStream+16
	cmove	rsi, QWORD PTR RxStream
	pand	xmm0, xmm5
	pand	xmm1, xmm8
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm4, 128				; 00000080H
	pand	xmm2, xmm8
	mov	rcx, rsi
	mov	QWORD PTR RxStream+24, rsi
	movdqa	XMMWORD PTR block$46244[rsp], xmm1
	pand	xmm0, xmm5
	pshufd	xmm1, xmm6, 8
	pshufd	xmm9, xmm9, 8
	pxor	xmm2, xmm0
	pand	xmm1, xmm8
	pshufd	xmm0, xmm7, 128				; 00000080H
	movdqa	XMMWORD PTR block$46244[rsp+16], xmm2
	pand	xmm0, xmm5
	pand	xmm9, xmm8
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR block$46244[rsp+48], xmm9
	movdqa	XMMWORD PTR block$46244[rsp+32], xmm1
	call	SoraCheckSignalBlock
	mov	r11d, eax
	test	eax, eax
	js	$LN445@BB11ARxCar
	movdqa	xmm6, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR [rsi+48]
	movdqa	xmm5, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	mov	rcx, QWORD PTR RxStream+24
	sub	rcx, -128				; ffffffffffffff80H
	cmp	rcx, QWORD PTR RxStream+16
	cmove	rcx, QWORD PTR RxStream
	movdqa	xmm0, XMMWORD PTR [rsi+16]
	movdqa	xmm1, XMMWORD PTR [rsi+32]
	movdqa	xmm3, XMMWORD PTR [rsi+64]
	pshufd	xmm0, xmm0, 128				; 00000080H
	pshufd	xmm1, xmm1, 8
	movdqa	xmm4, XMMWORD PTR [rsi+80]
	movdqa	xmm7, XMMWORD PTR [rsi+96]
	movdqa	xmm8, XMMWORD PTR [rsi+112]
	mov	QWORD PTR RxStream+24, rcx
	pand	xmm0, xmm6
	pand	xmm1, xmm5
	pxor	xmm9, xmm0
	pshufd	xmm0, xmm2, 128				; 00000080H
	pshufd	xmm2, xmm3, 8
	movdqa	XMMWORD PTR block$46244[rsp+48], xmm9
	pand	xmm0, xmm6
	pand	xmm2, xmm5
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm4, 128				; 00000080H
	movdqa	XMMWORD PTR block$46244[rsp+64], xmm1
	pand	xmm0, xmm6
	pshufd	xmm1, xmm7, 8
	pxor	xmm2, xmm0
	pshufd	xmm0, xmm8, 128				; 00000080H
	pand	xmm1, xmm5
	movdqa	XMMWORD PTR block$46244[rsp+80], xmm2
	pand	xmm0, xmm6
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR block$46244[rsp+96], xmm1
	jmp	$LN445@BB11ARxCar
$LN11@BB11ARxCar:

; 30   :         else if (pRxContextA->SampleRate == 44)

	cmp	eax, 44					; 0000002cH
	jne	$LN9@BB11ARxCar

; 31   :             hr1 = FetchDMADataTouchDownSampled44(pRxStream, &bTouched, block);

	mov	eax, DWORD PTR ??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51
	test	al, 1
	jne	SHORT $LN1353@BB11ARxCar
	or	eax, 1
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+344, -1
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+348, r13d
	mov	DWORD PTR ??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51, eax
	mov	eax, r13d
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+340, r13d
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352, eax
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+336, r13d
	jmp	SHORT $LL443@BB11ARxCar
$LN1353@BB11ARxCar:
	mov	eax, DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352
$LL443@BB11ARxCar:
	cmp	eax, 56					; 00000038H
	jge	$LN1348@BB11ARxCar
	mov	rbx, QWORD PTR RxStream+24
	mov	edx, DWORD PTR RxStream+32
	lea	r9, QWORD PTR bTouched$[rsp]
	mov	rcx, rbx
	mov	r8d, 1024				; 00000400H
	call	SoraCheckSignalBlock
	mov	r11d, eax
	test	eax, eax
	jns	SHORT $LN453@BB11ARxCar
	mov	ebx, eax
	jmp	$LN454@BB11ARxCar
$LN453@BB11ARxCar:
	movdqa	xmm0, XMMWORD PTR [rbx+16]
	movdqa	xmm1, XMMWORD PTR [rbx+32]
	mov	rax, QWORD PTR RxStream+24
	sub	rax, -128				; ffffffffffffff80H
	cmp	rax, QWORD PTR RxStream+16
	movdqa	XMMWORD PTR block44M$760281[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR [rbx+48]
	cmove	rax, QWORD PTR RxStream
	movdqa	XMMWORD PTR block44M$760281[rsp+16], xmm1
	movdqa	xmm1, XMMWORD PTR [rbx+64]
	movdqa	XMMWORD PTR block44M$760281[rsp+32], xmm0
	movdqa	xmm0, XMMWORD PTR [rbx+80]
	movdqa	XMMWORD PTR block44M$760281[rsp+48], xmm1
	movdqa	xmm1, XMMWORD PTR [rbx+96]
	movdqa	XMMWORD PTR block44M$760281[rsp+64], xmm0
	movdqa	xmm0, XMMWORD PTR [rbx+112]
	movdqa	XMMWORD PTR block44M$760281[rsp+80], xmm1
	mov	QWORD PTR RxStream+24, rax
	mov	ebx, r11d
	movdqa	XMMWORD PTR block44M$760281[rsp+96], xmm0
$LN454@BB11ARxCar:
	test	r11d, r11d
	js	$LN445@BB11ARxCar
	lea	rdx, QWORD PTR block44M$760281[rsp]
	lea	rcx, OFFSET FLAT:?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A
	call	?Resample@CDown44MTo40M@@QEAAXAEBUSignalBlock@@@Z ; CDown44MTo40M::Resample
	mov	eax, DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352
	jmp	$LL443@BB11ARxCar
$LN1348@BB11ARxCar:
	movdqa	xmm4, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A, 8
	add	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+348, 56 ; 00000038H
	sub	eax, 56					; 00000038H
	mov	r11d, ebx
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352, eax
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+16, 128 ; 00000080H
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+32, 8
	pand	xmm1, xmm4
	pand	xmm0, xmm3
	pand	xmm2, xmm4
	pxor	xmm1, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+48, 128 ; 00000080H
	movdqa	XMMWORD PTR block$46244[rsp], xmm1
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+64, 8
	pand	xmm0, xmm3
	pxor	xmm2, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+80, 128 ; 00000080H
	pand	xmm1, xmm4
	movdqa	XMMWORD PTR block$46244[rsp+16], xmm2
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+96, 8
	pand	xmm0, xmm3
	movdqa	xmm3, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	pxor	xmm1, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+112, 128 ; 00000080H
	pand	xmm2, xmm4
	movdqa	xmm4, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	XMMWORD PTR block$46244[rsp+32], xmm1
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+128, 8
	pand	xmm0, xmm4
	pxor	xmm2, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+144, 128 ; 00000080H
	pand	xmm1, xmm3
	movdqa	XMMWORD PTR block$46244[rsp+48], xmm2
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+160, 8
	pand	xmm0, xmm4
	pxor	xmm1, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+176, 128 ; 00000080H
	pand	xmm2, xmm3
	movdqa	XMMWORD PTR block$46244[rsp+64], xmm1
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+192, 8
	pand	xmm0, xmm4
	pxor	xmm2, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+208, 128 ; 00000080H
	pand	xmm1, xmm3
	movdqa	XMMWORD PTR block$46244[rsp+80], xmm2
	pand	xmm0, xmm4
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR block$46244[rsp+96], xmm1
$LN445@BB11ARxCar:

; 36   :         }
; 37   : 
; 38   :         if (hr1 != S_OK)

	test	r11d, r11d
	jne	$LN1316@BB11ARxCar

; 41   :             break;
; 42   :         }
; 43   : 
; 44   :         // Check whether force stopped
; 45   :         if (*pbWorkIndicator == 0)

	movzx	eax, BYTE PTR [r12]
	test	al, al
	je	$LN1317@BB11ARxCar

; 49   :         }
; 50   : 
; 51   :         // Kun: direct shift right by two hurts the performance
; 52   :         EstimateDC(pRxContextA, block);

	lea	rdx, QWORD PTR block$46244[rsp]
	mov	rcx, rdi
	call	?EstimateDC@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z ; EstimateDC

; 53   :         
; 54   :         RemoveDC (block, (vcs&)pRxContextA->dcEstimated);
; 55   : 
; 56   :         ShiftRight2(block); // avoid overflow
; 57   :         iCorrelation = GetAutoCorrelation(block, (vcs*)pRxContextA->histAutoCorrelation);

	lea	rdx, QWORD PTR [rdi+1888]
	lea	rcx, QWORD PTR block$46244[rsp]
	movdqa	xmm0, XMMWORD PTR [rdi+1968]
	movdqa	xmm1, XMMWORD PTR block$46244[rsp]
	movdqa	xmm2, XMMWORD PTR block$46244[rsp+16]
	psubw	xmm1, xmm0
	psubw	xmm2, xmm0
	movdqa	xmm3, XMMWORD PTR block$46244[rsp+32]
	movdqa	xmm4, XMMWORD PTR block$46244[rsp+48]
	movdqa	xmm5, XMMWORD PTR block$46244[rsp+64]
	psraw	xmm1, 2
	psraw	xmm2, 2
	psubw	xmm3, xmm0
	psubw	xmm4, xmm0
	psubw	xmm5, xmm0
	movdqa	xmm6, XMMWORD PTR block$46244[rsp+80]
	movdqa	xmm7, XMMWORD PTR block$46244[rsp+96]
	movdqa	XMMWORD PTR block$46244[rsp], xmm1
	psubw	xmm6, xmm0
	psubw	xmm7, xmm0
	psraw	xmm3, 2
	movdqa	XMMWORD PTR block$46244[rsp+16], xmm2
	movdqa	XMMWORD PTR block$46244[rsp+32], xmm3
	psraw	xmm4, 2
	psraw	xmm5, 2
	psraw	xmm6, 2
	movdqa	XMMWORD PTR block$46244[rsp+48], xmm4
	movdqa	XMMWORD PTR block$46244[rsp+64], xmm5
	movdqa	XMMWORD PTR block$46244[rsp+80], xmm6
	psraw	xmm7, 2
	movdqa	XMMWORD PTR block$46244[rsp+96], xmm7
	call	?GetAutoCorrelation@@YAHAEBUSignalBlock@@QEAUvcs@@@Z ; GetAutoCorrelation

; 58   :         iEnergy = GetEnergy(block);

	movdqa	xmm2, XMMWORD PTR block$46244[rsp]
	movdqa	xmm0, XMMWORD PTR block$46244[rsp+16]
	mov	r11d, eax
	movdqa	xmm1, XMMWORD PTR block$46244[rsp+32]
	pmaddwd	xmm2, xmm2
	pmaddwd	xmm0, xmm0
	psrad	xmm0, 5
	psrad	xmm2, 5
	pmaddwd	xmm1, xmm1
	paddd	xmm2, xmm0
	movdqa	xmm0, XMMWORD PTR block$46244[rsp+48]
	pmaddwd	xmm0, xmm0
	psrad	xmm1, 5
	paddd	xmm2, xmm1
	psrad	xmm0, 5
	movdqa	xmm1, XMMWORD PTR block$46244[rsp+64]
	paddd	xmm2, xmm0
	pmaddwd	xmm1, xmm1
	psrad	xmm1, 5
	movdqa	xmm0, XMMWORD PTR block$46244[rsp+80]
	paddd	xmm2, xmm1
	pmaddwd	xmm0, xmm0
	psrad	xmm0, 5
	movdqa	xmm1, XMMWORD PTR block$46244[rsp+96]
	paddd	xmm2, xmm0
	pmaddwd	xmm1, xmm1
	psrad	xmm1, 5
	paddd	xmm2, xmm1
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddd	xmm2, xmm0
	pshufd	xmm0, xmm2, 78				; 0000004eH
	paddd	xmm2, xmm0
	movdqa	XMMWORD PTR sum$764361[rsp], xmm2

; 59   : 
; 60   :         if (iCorrelation > (iEnergy - (iEnergy >> 3)) && 
; 61   :                 (iCorrelation > (signed)(pRxContextA->uiCSCorrThreshold)))

	mov	ecx, DWORD PTR sum$764361[rsp]
	mov	eax, ecx
	sar	eax, 3
	sub	ecx, eax
	cmp	r11d, ecx
	jle	SHORT $LN5@BB11ARxCar
	cmp	r11d, DWORD PTR [rdi+4]
	jle	SHORT $LN5@BB11ARxCar

; 62   :         {
; 63   :             pRxContextA->__uHighEnergyCounter++;

	inc	DWORD PTR [rdi+16]

; 64   :             if (pRxContextA->__uHighEnergyCounter >= 3)

	cmp	DWORD PTR [rdi+16], 3
	jb	SHORT $LN3@BB11ARxCar

; 65   :             {
; 66   : //                printf ( " Power detect! DC (%d, %d) AC %d E %d Th %d\n", 
; 67   : //                    g_rgcDC[0].re, g_rgcDC[0].im, iCorrelation, iEnergy, pRxContextA->uiCSCorrThreshold );
; 68   :                 
; 69   :                 hr = BB11A_OK_POWER_DETECTED;

	mov	eax, 513				; 00000201H

; 70   :                 break;

	jmp	SHORT $LN15@BB11ARxCar
$LN5@BB11ARxCar:

; 71   :             }
; 72   :         }
; 73   :         else
; 74   :             pRxContextA->__uHighEnergyCounter = 0;

	mov	DWORD PTR [rdi+16], r13d
$LN3@BB11ARxCar:

; 75   : 
; 76   :         uiRxBlockCount += 1; //two RX blocks fetched in xmmFetchDMADataTouchDownSampled

	inc	ebp

; 77   : 
; 78   :         if (bTouched && uiRxBlockCount >= pRxContextA->uiCSMinFetchRxBlock &&
; 79   :             pRxContextA->__uHighEnergyCounter == 0)

	cmp	BYTE PTR bTouched$[rsp], r13b
	je	SHORT $LN2@BB11ARxCar
	cmp	ebp, DWORD PTR [rdi+12]
	jb	SHORT $LN2@BB11ARxCar
	cmp	DWORD PTR [rdi+16], r13d
	je	SHORT $LN1319@BB11ARxCar
$LN2@BB11ARxCar:

; 83   :         }
; 84   :         
; 85   :         if (uiRxBlockCount >= pRxContextA->uiCSMaxFetchRxBlock)

	cmp	ebp, DWORD PTR [rdi+8]
	jb	$LL14@BB11ARxCar

; 86   :         {
; 87   :             hr = BB11A_E_PD_LAG;

	mov	eax, -2147459072			; ffffffff80006000H
	jmp	SHORT $LN15@BB11ARxCar
$LN1319@BB11ARxCar:

; 80   :         {
; 81   :             hr = BB11A_CHANNEL_CLEAN;

	mov	eax, 512				; 00000200H

; 82   :             break;

	jmp	SHORT $LN15@BB11ARxCar
$LN1317@BB11ARxCar:

; 46   :         {
; 47   :             hr = BB11A_E_FORCE_STOP;

	mov	eax, -2147459067			; ffffffff80006005H

; 48   :             break;

	jmp	SHORT $LN15@BB11ARxCar
$LN1316@BB11ARxCar:

; 39   :         {
; 40   :             hr = E_FETCH_SIGNAL_HW_TIMEOUT;

	mov	eax, -2147155953			; ffffffff8005000fH

; 88   :             break;
; 89   :         }
; 90   : 
; 91   :     } while(TRUE);
; 92   : 
; 93   :     return hr;

	jmp	SHORT $LN15@BB11ARxCar
$LN9@BB11ARxCar:

; 32   :         else
; 33   :         {
; 34   :             KdPrint(("SampleRate is wrong\n"));
; 35   :             return E_INVALIDARG;

	mov	eax, -2147024809			; ffffffff80070057H
$LN15@BB11ARxCar:
	movaps	xmm9, XMMWORD PTR [rsp+304]
	movaps	xmm8, XMMWORD PTR [rsp+320]
	movaps	xmm7, XMMWORD PTR [rsp+336]
	mov	rsi, QWORD PTR [rsp+408]

; 94   : }

	lea	r11, QWORD PTR [rsp+368]
	mov	rbx, QWORD PTR [r11+48]
	mov	rbp, QWORD PTR [r11+56]
	movaps	xmm6, XMMWORD PTR [rsp+352]
	mov	rsp, r11
	pop	r13
	pop	r12
	pop	rdi
	ret	0
BB11ARxCarrierSense ENDP
END
