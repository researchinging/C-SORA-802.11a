; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?ConvEncode_3_4@@YAXPEAD0IAEAE@Z		; ConvEncode_3_4
PUBLIC	?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ; Generate54MSymbol
	ORG $+12
rgbLongPrePositive DB 00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
gAGCLut	DD	0fffffff9H
	DD	0fffffffaH
	DD	0fffffffbH
	DD	0fffffffcH
	DD	0fffffffdH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\convenc.h
pdata	SEGMENT
$pdata$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z DD imagerel $LN8
	DD	imagerel $LN8+17
	DD	imagerel $unwind$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z DD imagerel $LN8+17
	DD	imagerel $LN8+246
	DD	imagerel $chain$2$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z DD imagerel $LN8+246
	DD	imagerel $LN8+248
	DD	imagerel $chain$3$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z DD 021H
	DD	imagerel $LN8
	DD	imagerel $LN8+17
	DD	imagerel $unwind$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z DD 061c21H
	DD	04641cH
	DD	03540aH
	DD	023405H
	DD	imagerel $LN8
	DD	imagerel $LN8+17
	DD	imagerel $unwind$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ConvEncode_3_4@@YAXPEAD0IAEAE@Z DD 010201H
	DD	07002H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?ConvEncode_3_4@@YAXPEAD0IAEAE@Z
_TEXT	SEGMENT
pbInput$ = 16
pbOutput$ = 24
uiSize$ = 32
bConvEncoderReg$ = 40
?ConvEncode_3_4@@YAXPEAD0IAEAE@Z PROC			; ConvEncode_3_4, COMDAT

; 62   : {

$LN8:
	push	rdi
	mov	rdi, r9
	mov	r11, rdx

; 63   :     unsigned int i;
; 64   :     unsigned char c1, c2, c3;
; 65   :     unsigned short b1, b2, b3, b4;
; 66   : 
; 67   :     for (i = 0; i < uiSize; i += 3)

	test	r8d, r8d
	je	$LN1@ConvEncode
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	lea	rbx, QWORD PTR [rcx+1]
	lea	ecx, DWORD PTR [r8-1]
	mov	eax, -1431655765			; aaaaaaabH
	mov	QWORD PTR [rsp+32], rsi
	lea	rbp, OFFSET FLAT:CONV_ENCODER_3_4_LUT
	mul	ecx
	shr	edx, 1
	lea	esi, DWORD PTR [rdx+1]
	npad	5
$LL3@ConvEncode:

; 68   :     {
; 69   :         c1 = (unsigned char)(pbInput[i]);

	movzx	edx, BYTE PTR [rbx-1]

; 70   :         c2 = (unsigned char)(pbInput[i+1]);
; 71   :         c3 = (unsigned char)(pbInput[i+2]);

	movzx	r9d, BYTE PTR [rbx+1]
	movzx	r10d, BYTE PTR [rbx]

; 72   : 
; 73   :         b1 = ((c1 & 0x3F) << 6) | bConvEncoderReg;

	movzx	eax, dl

; 74   :         b2 = ((c2 & 0xF) << 8) | c1;

	mov	r8, rdx

; 75   :         b3 = ((c3 & 0x3) << 10) | (c2 << 2) | (c1 >> 6);
; 76   :         b4 = (c3 << 4) | (c2 >> 4);
; 77   : 
; 78   :         bConvEncoderReg = (c3 >> 2);
; 79   : 
; 80   :         pbOutput[0] = *(CONV_ENCODER_3_4(b1));
; 81   :         pbOutput[1] = *(CONV_ENCODER_3_4(b2));
; 82   :         pbOutput[2] = *(CONV_ENCODER_3_4(b3));
; 83   :         pbOutput[3] = *(CONV_ENCODER_3_4(b4));
; 84   :         pbOutput += 4;

	add	r11, 4
	and	al, 63					; 0000003fH
	shr	r8, 6
	add	rbx, 3
	movzx	ecx, al
	movzx	eax, BYTE PTR [rdi]
	shl	cx, 6
	or	cx, ax
	movzx	eax, r9b
	shr	al, 2
	mov	BYTE PTR [rdi], al
	movzx	eax, cx
	movzx	eax, BYTE PTR [rax+rbp]
	mov	BYTE PTR [r11-4], al
	movzx	eax, r10b
	and	al, 15
	movzx	ecx, al
	shl	cx, 8
	movzx	eax, cx
	or	rax, rdx
	movzx	eax, BYTE PTR [rax+rbp]
	mov	BYTE PTR [r11-3], al
	movzx	eax, r9b
	and	al, 3
	movzx	ecx, al
	shl	cx, 8
	or	cx, r10w
	shl	cx, 2
	movzx	eax, cx
	or	rax, r8
	movzx	eax, BYTE PTR [rax+rbp]
	mov	BYTE PTR [r11-2], al
	movzx	eax, r9w
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r10
	shr	rax, 4
	or	rcx, rax
	sub	rsi, 1
	movzx	eax, BYTE PTR [rcx+rbp]
	mov	BYTE PTR [r11-1], al
	jne	$LL3@ConvEncode
	mov	rsi, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+24]
	mov	rbx, QWORD PTR [rsp+16]
$LN1@ConvEncode:

; 85   :     }
; 86   : }

	pop	rdi
	ret	0
?ConvEncode_3_4@@YAXPEAD0IAEAE@Z ENDP			; ConvEncode_3_4
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1036
	DD	imagerel $LN1036+15
	DD	imagerel $unwind$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1036+15
	DD	imagerel $LN1036+1250
	DD	imagerel $chain$3$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1036+1250
	DD	imagerel $LN1036+2447
	DD	imagerel $chain$4$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1036+2447
	DD	imagerel $LN1036+3680
	DD	imagerel $chain$13$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD imagerel $LN1036+3680
	DD	imagerel $LN1036+3836
	DD	imagerel $chain$14$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1036+1250
	DD	imagerel $LN1036+2447
	DD	imagerel $chain$4$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 012c321H
	DD	024e8c3H
	DD	025d8a0H
	DD	026c88eH
	DD	027b871H
	DD	028a84fH
	DD	029983dH
	DD	02a882bH
	DD	02b781aH
	DD	02c6808H
	DD	imagerel $LN1036+1250
	DD	imagerel $LN1036+2447
	DD	imagerel $chain$4$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 021H
	DD	imagerel $LN1036
	DD	imagerel $LN1036+15
	DD	imagerel $unwind$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 081721H
	DD	05af417H
	DD	05bd40cH
	DD	05cc408H
	DD	0625404H
	DD	imagerel $LN1036
	DD	imagerel $LN1036+15
	DD	imagerel $unwind$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z DD 060f01H
	DD	05d010fH
	DD	07006e008H
	DD	030046005H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ofdmsymbol.h
xdata	ENDS
;	COMDAT ?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z
_TEXT	SEGMENT
pcLast$GSCopy$1$ = 32
rr1$1581106 = 32
pvOutput$1$ = 48
temp$1575751 = 64
info$ = 784
pcOutput$ = 792
pcLast$ = 800
pbData$ = 808
bPilotSgn$ = 816
?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z PROC ; Generate54MSymbol, COMDAT

; 231  : {

$LN1036:
	mov	rax, rsp
	push	rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 744				; 000002e8H
	mov	QWORD PTR [rax+8], rbp
	mov	QWORD PTR [rax-40], r12
	mov	QWORD PTR [rax-48], r13

; 232  :     ConvEncode_3_4(pbData, info->bEncoded, 27, info->bConvEncoderReg);

	lea	r13, OFFSET FLAT:TxVector+27
	mov	QWORD PTR [rax-56], r15
	mov	QWORD PTR pcLast$GSCopy$1$[rsp], r8
	mov	QWORD PTR pvOutput$1$[rsp], rdx
	lea	rbx, QWORD PTR [r9+1]
	mov	edi, 9
	mov	r11, r13
	lea	rsi, OFFSET FLAT:__ImageBase
	npad	13
$LL5@Generate54:
	movzx	r8d, BYTE PTR [rbx-1]
	movzx	r9d, BYTE PTR [rbx+1]
	movzx	r10d, BYTE PTR [rbx]
	movzx	eax, r8b
	mov	rdx, r8
	add	r11, 4
	and	al, 63					; 0000003fH
	shr	rdx, 6
	add	rbx, 3
	movzx	ecx, al
	movzx	eax, BYTE PTR TxVector+24
	shl	cx, 6
	or	cx, ax
	movzx	eax, r9b
	shr	al, 2
	mov	BYTE PTR TxVector+24, al
	movzx	eax, cx
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+rsi]
	mov	BYTE PTR [r11-6], al
	movzx	eax, r10b
	and	al, 15
	movzx	ecx, al
	shl	cx, 8
	movzx	eax, cx
	or	rax, r8
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+rsi]
	mov	BYTE PTR [r11-5], al
	movzx	eax, r9b
	and	al, 3
	movzx	ecx, al
	shl	cx, 8
	or	cx, r10w
	shl	cx, 2
	movzx	eax, cx
	or	rax, rdx
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+rsi]
	mov	BYTE PTR [r11-4], al
	movzx	eax, r9w
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r10
	shr	rax, 4
	or	rcx, rax
	sub	rdi, 1
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+rsi]
	mov	BYTE PTR [r11-3], al
	jne	$LL5@Generate54

; 233  : 
; 234  :     Interleave64QAM(info->bEncoded, info->bInterleaved);

	movzx	eax, BYTE PTR TxVector+25
	lea	r14, OFFSET FLAT:__ImageBase
	mov	r15d, 1024				; 00000400H
	lea	eax, DWORD PTR [rax+rax*8]
	cdqe
	mov	r8d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4]
	mov	r9d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+4]
	mov	r10d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+8]
	mov	r11d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+12]
	mov	ebx, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+16]
	mov	edi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+20]
	mov	esi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+24]
	mov	ebp, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+28]
	mov	r12d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+32]
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, ebx
	mov	DWORD PTR TxVector+81, edi
	mov	DWORD PTR TxVector+85, esi
	mov	DWORD PTR TxVector+89, ebp
	mov	DWORD PTR TxVector+93, r12d
	npad	3
$LL10@Generate54:
	movzx	eax, BYTE PTR [r13-1]
	lea	edx, DWORD PTR [r15-768]
	add	eax, edx
	lea	eax, DWORD PTR [rax+rax*8]
	or	r8d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4]
	or	r9d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+4]
	or	r10d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+8]
	or	r11d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+12]
	or	ebx, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+16]
	or	edi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+20]
	or	esi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+24]
	or	ebp, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+28]
	or	r12d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+32]
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, ebx
	mov	DWORD PTR TxVector+81, edi
	mov	DWORD PTR TxVector+85, esi
	mov	DWORD PTR TxVector+89, ebp
	mov	DWORD PTR TxVector+93, r12d
	movzx	eax, BYTE PTR [r13]
	lea	ecx, DWORD PTR [rax+rdx+256]
	lea	eax, DWORD PTR [rcx+rcx*8]
	or	r8d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4]
	or	r9d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+4]
	or	r10d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+8]
	or	r11d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+12]
	or	ebx, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+16]
	or	edi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+20]
	or	esi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+24]
	or	ebp, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+28]
	or	r12d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+32]
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, ebx
	mov	DWORD PTR TxVector+81, edi
	mov	DWORD PTR TxVector+85, esi
	mov	DWORD PTR TxVector+89, ebp
	mov	DWORD PTR TxVector+93, r12d
	movzx	eax, BYTE PTR [r13+1]
	lea	ecx, DWORD PTR [rax+r15-256]
	lea	eax, DWORD PTR [rcx+rcx*8]
	or	r8d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4]
	or	r9d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+4]
	or	r10d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+8]
	or	r11d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+12]
	or	ebx, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+16]
	or	edi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+20]
	or	esi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+24]
	or	ebp, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+28]
	or	r12d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+32]
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, ebx
	mov	DWORD PTR TxVector+81, edi
	mov	DWORD PTR TxVector+85, esi
	mov	DWORD PTR TxVector+89, ebp
	mov	DWORD PTR TxVector+93, r12d
	movzx	eax, BYTE PTR [r13+2]
	add	eax, r15d
	lea	eax, DWORD PTR [rax+rax*8]
	or	r8d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4]
	or	r9d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+4]
	or	r10d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+8]
	or	r11d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+12]
	or	ebx, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+16]
	or	edi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+20]
	or	esi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+24]
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, ebx
	mov	DWORD PTR TxVector+85, esi
	mov	DWORD PTR TxVector+81, edi
	or	ebp, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+28]
	or	r12d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+32]
	add	r13, 5
	mov	DWORD PTR TxVector+89, ebp
	mov	DWORD PTR TxVector+93, r12d
	movzx	eax, BYTE PTR [r13-2]
	lea	ecx, DWORD PTR [rax+r15+256]
	add	r15d, 1280				; 00000500H
	lea	eax, DWORD PTR [rcx+rcx*8]
	or	r8d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4]
	or	r9d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+4]
	or	r10d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+8]
	or	r11d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+12]
	or	ebx, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+16]
	or	edi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+20]
	or	esi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+24]
	or	ebp, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+28]
	or	r12d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+32]
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, ebx
	mov	DWORD PTR TxVector+81, edi
	mov	DWORD PTR TxVector+85, esi
	mov	DWORD PTR TxVector+89, ebp
	mov	DWORD PTR TxVector+93, r12d
	cmp	r15d, 9984				; 00002700H
	jb	$LL10@Generate54
	mov	r14, QWORD PTR pvOutput$1$[rsp]
	mov	r15, QWORD PTR [rsp+720]
	mov	r13, QWORD PTR [rsp+728]
	mov	r12, QWORD PTR [rsp+736]
	mov	rbp, QWORD PTR [rsp+784]

; 235  :     Map64QAM_11a(info->bInterleaved, info->cMapped);

	lea	r9, OFFSET FLAT:TxVector+67
	lea	r8, OFFSET FLAT:TxVector+120
	mov	r10d, 2
	lea	rsi, OFFSET FLAT:__ImageBase
$LL15@Generate54:
	mov	edx, DWORD PTR [r9-6]
	mov	eax, edx
	shr	edx, 12
	and	eax, 4095				; 00000fffH
	and	edx, 4095				; 00000fffH
	add	eax, eax
	add	edx, edx
	mov	ecx, eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rax*4]
	mov	DWORD PTR [r8-8], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rcx*4+4]
	mov	DWORD PTR [r8-4], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4]
	mov	DWORD PTR [r8], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4+4]
	mov	DWORD PTR [r8+4], eax
	mov	edx, DWORD PTR [r9-3]
	mov	eax, edx
	shr	edx, 12
	and	eax, 4095				; 00000fffH
	and	edx, 4095				; 00000fffH
	add	eax, eax
	add	edx, edx
	mov	ecx, eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rax*4]
	mov	DWORD PTR [r8+8], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rcx*4+4]
	mov	DWORD PTR [r8+12], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4]
	mov	DWORD PTR [r8+16], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4+4]
	mov	DWORD PTR [r8+20], eax
	mov	edx, DWORD PTR [r9]
	mov	eax, edx
	shr	edx, 12
	and	eax, 4095				; 00000fffH
	and	edx, 4095				; 00000fffH
	add	eax, eax
	add	edx, edx
	mov	ecx, eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rax*4]
	mov	DWORD PTR [r8+24], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rcx*4+4]
	mov	DWORD PTR [r8+28], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4]
	mov	DWORD PTR [r8+32], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4+4]
	mov	DWORD PTR [r8+36], eax
	mov	edx, DWORD PTR [r9+3]
	mov	eax, edx
	shr	edx, 12
	and	eax, 4095				; 00000fffH
	and	edx, 4095				; 00000fffH
	add	eax, eax
	add	edx, edx
	mov	ecx, eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rax*4]
	mov	DWORD PTR [r8+40], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rcx*4+4]
	mov	DWORD PTR [r8+44], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4]
	mov	DWORD PTR [r8+48], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4+4]
	mov	DWORD PTR [r8+52], eax
	mov	edx, DWORD PTR [r9+6]
	mov	eax, edx
	shr	edx, 12
	and	eax, 4095				; 00000fffH
	and	edx, 4095				; 00000fffH
	add	eax, eax
	add	edx, edx
	mov	ecx, eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rax*4]
	mov	DWORD PTR [r8+56], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rcx*4+4]
	mov	DWORD PTR [r8+60], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4]
	mov	DWORD PTR [r8+64], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4+4]
	mov	DWORD PTR [r8+68], eax
	mov	edx, DWORD PTR [r9+9]
	mov	eax, edx
	shr	edx, 12
	add	r8, 96					; 00000060H
	and	eax, 4095				; 00000fffH
	and	edx, 4095				; 00000fffH
	add	r9, 18
	add	eax, eax
	add	edx, edx
	sub	r10, 1
	mov	ecx, eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rax*4]
	mov	DWORD PTR [r8-24], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rcx*4+4]
	mov	DWORD PTR [r8-20], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4]
	mov	DWORD PTR [r8-16], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[rsi+rdx*4+4]
	mov	DWORD PTR [r8-12], eax
	jne	$LL15@Generate54

; 236  : 
; 237  :     AddPilot(info->cMapped, info->cPilotAdded, bPilotSgn);

	lea	rcx, OFFSET FLAT:TxVector+112
	mov	edx, 38					; 00000026H
	lea	r8, OFFSET FLAT:TxVector+456
	npad	7
$LL29@Generate54:
	cmp	edx, 57					; 00000039H
	je	SHORT $LN28@Generate54
	cmp	edx, 43					; 0000002bH
	je	SHORT $LN28@Generate54
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN28@Generate54:
	inc	edx
	add	r8, 4
	cmp	edx, 64					; 00000040H
	jb	SHORT $LL29@Generate54
	mov	edx, 1
	lea	r8, OFFSET FLAT:TxVector+308
	npad	6
$LL24@Generate54:
	cmp	edx, 7
	je	SHORT $LN23@Generate54
	cmp	edx, 21
	je	SHORT $LN23@Generate54
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN23@Generate54:
	inc	edx
	add	r8, 4
	cmp	edx, 26
	jbe	SHORT $LL24@Generate54
	cmp	BYTE PTR bPilotSgn$[rsp], 0
	jne	SHORT $LN19@Generate54
	xor	edi, edi
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, di
	mov	WORD PTR TxVector+388, cx
	mov	WORD PTR TxVector+390, di
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, di
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, di
	jmp	SHORT $LN18@Generate54
$LN19@Generate54:
	xor	edi, edi
	mov	ecx, -10720				; ffffffffffffd620H
	mov	eax, 10720				; 000029e0H
	mov	WORD PTR TxVector+332, cx
	mov	WORD PTR TxVector+334, di
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, di
	mov	WORD PTR TxVector+532, cx
	mov	WORD PTR TxVector+534, di
	mov	WORD PTR TxVector+476, cx
	mov	WORD PTR TxVector+478, di
$LN18@Generate54:

; 238  :     IFFT64x(info->cPilotAdded, info->cSymbol + COMPLEX_GI);

	lea	rcx, QWORD PTR temp$1575751[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$1575751[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1575751[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$1575751[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:?FFT128LUTMap@@3QBFB+2
	lea	rdx, OFFSET FLAT:TxVector+696
	lea	r8, OFFSET FLAT:TxVector+1208
	npad	12
$LL39@Generate54:
	movsx	rax, WORD PTR [r11-2]
	add	rdx, 16
	add	r11, 8
	cmp	rdx, r8
	mov	ecx, DWORD PTR temp$1575751[rsp+rax*4]
	movsx	rax, WORD PTR [r11-8]
	mov	DWORD PTR [rdx-24], ecx
	mov	ecx, DWORD PTR temp$1575751[rsp+rax*4]
	movsx	rax, WORD PTR [r11-6]
	mov	DWORD PTR [rdx-20], ecx
	mov	ecx, DWORD PTR temp$1575751[rsp+rax*4]
	movsx	rax, WORD PTR [r11-4]
	mov	DWORD PTR [rdx-16], ecx
	mov	ecx, DWORD PTR temp$1575751[rsp+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	jl	SHORT $LL39@Generate54
	lea	rax, OFFSET FLAT:TxVector+688
	mov	ecx, 32					; 00000020H
	npad	7
$LL36@Generate54:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL36@Generate54

; 239  : 
; 240  :     CopyGI(info->cSymbol, info->cSymbol + 128);

	lea	rbx, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rbx
	call	memcpy

; 241  :     Window(info->cSymbol, pcLast);

	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	ecx, WORD PTR TxVector+568
	mov	rdx, QWORD PTR pcLast$GSCopy$1$[rsp]
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	ax, 2
	sar	r11w, 2
	sub	cx, ax
	mov	WORD PTR TxVector+560, r11w
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR [rdx]
	movdqa	XMMWORD PTR TxVector+560, xmm0
	movzx	eax, WORD PTR [rdx]
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR [rdx+2]
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rdx], cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR [rdx+2], cx
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR [rdx+4], ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR [rdx+6], ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR [rdx+8], ax
	movzx	eax, WORD PTR TxVector+698
	mov	WORD PTR [rdx+12], di
	sar	ax, 2
	mov	WORD PTR [rdx+14], di
	mov	WORD PTR [rdx+10], ax

; 242  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

	mov	eax, DWORD PTR TxVector
	cmp	eax, 44					; 0000002cH
	jne	$LN78@Generate54
	movdqa	xmm2, XMMWORD PTR TxVector+560
	movaps	XMMWORD PTR [rsp+704], xmm6
	xorps	xmm0, xmm0
	lea	edx, QWORD PTR [rax-39]
	movdqa	xmm3, xmm2
	movaps	XMMWORD PTR [rsp+688], xmm7
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+672], xmm8
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+656], xmm9
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movaps	XMMWORD PTR [rsp+640], xmm10
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	movaps	XMMWORD PTR [rsp+624], xmm11
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movaps	XMMWORD PTR [rsp+608], xmm12
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movaps	XMMWORD PTR [rsp+592], xmm13
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movaps	XMMWORD PTR [rsp+576], xmm14
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	lea	rcx, OFFSET FLAT:TxVector+1276
	pmulhrsw xmm4, xmm11
	lea	rax, OFFSET FLAT:TxVector+640
	lea	r8d, QWORD PTR [rdx+2]
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
$LL83@Generate54:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rbx+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rbx+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[rsi+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL83@Generate54
	movaps	xmm14, XMMWORD PTR [rsp+576]
	movaps	xmm13, XMMWORD PTR [rsp+592]
	movaps	xmm12, XMMWORD PTR [rsp+608]
	movaps	xmm11, XMMWORD PTR [rsp+624]
	movaps	xmm10, XMMWORD PTR [rsp+640]
	movaps	xmm9, XMMWORD PTR [rsp+656]
	movaps	xmm8, XMMWORD PTR [rsp+672]
	movaps	xmm7, XMMWORD PTR [rsp+688]
	movaps	xmm6, XMMWORD PTR [rsp+704]
	movdqa	XMMWORD PTR rr1$1581106[rsp], xmm3
	mov	eax, DWORD PTR rr1$1581106[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$1581106[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$1581106[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
	npad	2
$LL920@Generate54:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	r14, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r14-16], xmm1
	jne	SHORT $LL920@Generate54
	mov	eax, 176				; 000000b0H

; 243  : }

	add	rsp, 744				; 000002e8H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0

; 242  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

$LN78@Generate54:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN73@Generate54
	mov	eax, 20
	npad	9
$LL965@Generate54:
	movdqa	xmm1, XMMWORD PTR [rbx]
	movdqa	xmm0, XMMWORD PTR [rbx+16]
	add	r14, 16
	add	rbx, 32					; 00000020H
	sub	rax, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r14-16], xmm1
	jne	SHORT $LL965@Generate54
	mov	eax, 160				; 000000a0H

; 243  : }

	add	rsp, 744				; 000002e8H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0

; 242  :     return UpsampleAndCopyNT(info, pcOutput, info->cSymbol, COMPLEX_PER_OFDM_SYMBOL);

$LN73@Generate54:
	mov	eax, edi

; 243  : }

	add	rsp, 744				; 000002e8H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?Generate54MSymbol@@YAIPEAU_BB11A_TX_VECTOR@@PEAU_COMPLEX8@@PEAU_COMPLEX16@@PEADE@Z ENDP ; Generate54MSymbol
PUBLIC	?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ; Dot11aTxFrameEncode54
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN3307
	DD	imagerel $LN3307+11
	DD	imagerel $unwind$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$15$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN3307+11
	DD	imagerel $LN3307+290
	DD	imagerel $chain$15$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$16$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN3307+290
	DD	imagerel $LN3307+1475
	DD	imagerel $chain$16$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$17$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN3307+1475
	DD	imagerel $LN3307+7165
	DD	imagerel $chain$17$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$18$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD imagerel $LN3307+7165
	DD	imagerel $LN3307+7341
	DD	imagerel $chain$18$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$18$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 021H
	DD	imagerel $LN3307
	DD	imagerel $LN3307+11
	DD	imagerel $unwind$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$17$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 021H
	DD	imagerel $LN3307+11
	DD	imagerel $LN3307+290
	DD	imagerel $chain$15$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$16$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 020921H
	DD	027f809H
	DD	imagerel $LN3307+11
	DD	imagerel $LN3307+290
	DD	imagerel $chain$15$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$15$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 020f721H
	DD	028e8f7H
	DD	029d8eeH
	DD	02ac8e5H
	DD	02bb8dcH
	DD	02ca8d3H
	DD	02d98caH
	DD	02e88bcH
	DD	02f78b3H
	DD	03068abH
	DD	062f41fH
	DD	063e41bH
	DD	064d417H
	DD	065c413H
	DD	06b740fH
	DD	06a640bH
	DD	0685404H
	DD	imagerel $LN3307
	DD	imagerel $LN3307+11
	DD	imagerel $unwind$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z DD 030b01H
	DD	066010bH
	DD	03004H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\atx_tpl_imp.h
xdata	ENDS
;	COMDAT ?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z
_TEXT	SEGMENT
$T2801552 = 32
pcOutput$ = 40
$T2801925 = 48
rgbSignal$2790350 = 48
$T2791687 = 48
uiPilotIndex$1$ = 56
tv8695 = 64
rr1$2790256 = 64
rr1$2781613 = 64
SampleBufferSize$ = 80
tv8741 = 88
rr1$2798906 = 96
temp$2798856 = 112
temp$2791270 = 112
info$ = 832
pPacket$ = 840
?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z PROC ; Dot11aTxFrameEncode54, COMDAT

; 6    : {

$LN3307:
	mov	rax, rsp
	push	rbx
	sub	rsp, 816				; 00000330H
	mov	QWORD PTR [rax+8], rbp

; 7    :     unsigned int uiScrambledSize;
; 8    :     unsigned int uiSymbolCountData;
; 9    :     unsigned int uiPilotIndex = 0;
; 10   :     unsigned int i;
; 11   :     char * pbInput;
; 12   :     PTXSAMPLE pcOutput;
; 13   :     ULONG PacketSizePlusCRC32 = pPacket->PacketSize + 4;

	mov	ebp, DWORD PTR [rdx+20]
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	mov	QWORD PTR [rax-16], r12
	mov	QWORD PTR [rax-24], r13
	mov	QWORD PTR [rax-32], r14
	mov	QWORD PTR [rax-40], r15
	mov	r12, rdx
	add	ebp, 4
	xor	r15d, r15d

; 14   : 
; 15   :     // ClearWindow(info->cWindow);
; 16   : 
; 17   :     uiScrambledSize = SERVICE_LEN_IN_BITS + PADDING_LEN_IN_BITS
; 18   :         + (PacketSizePlusCRC32 << BITS_PER_BYTE_SHIFT);
; 19   :     uiSymbolCountData = (uiScrambledSize + (DBPS - 1)) / DBPS;

	mov	eax, 795364315				; 2f684bdbH
	lea	esi, DWORD PTR [rbp*8+237]
	mov	DWORD PTR uiPilotIndex$1$[rsp], r15d
	mul	esi
	sub	esi, edx
	shr	esi, 1
	add	esi, edx
	shr	esi, 7

; 20   : 
; 21   :     ULONG SignalBytes = GetSignalBytes(info, uiSymbolCountData);

	lea	edx, DWORD PTR [rsi+rsi*4+25]
	shl	edx, 5
	cmp	DWORD PTR TxVector, 44			; 0000002cH
	jne	SHORT $LN9@Dot11aTxFr@4
	mov	eax, -858993459				; cccccccdH
	mul	edx
	shr	edx, 3
	imul	edx, 11
$LN9@Dot11aTxFr@4:
	lea	ebx, DWORD PTR [rdx+rdx+16]

; 22   :     
; 23   :     ULONG SampleBufferSize = 0;
; 24   :     SoraPacketGetTxSampleBuffer(pPacket, (PTXSAMPLE *)&pcOutput, &SampleBufferSize);

	lea	r8, QWORD PTR SampleBufferSize$[rsp]
	lea	rdx, QWORD PTR pcOutput$[rsp]
	mov	rcx, r12
	mov	DWORD PTR SampleBufferSize$[rsp], r15d
	call	SoraPacketGetTxSampleBuffer

; 25   :     ASSERT(SampleBufferSize >= SignalBytes);
; 26   : 
; 27   :     ALIGN_WITH_RCB_BUFFER_PADDING_ZERO(pcOutput, SignalBytes);

	test	bl, 127					; 0000007fH
	je	SHORT $LN5@Dot11aTxFr@4
	mov	rdx, QWORD PTR pcOutput$[rsp]
	mov	ecx, ebx
	and	ebx, -128				; ffffff80H
	sub	ebx, -128				; ffffffffffffff80H
	test	rdx, rdx
	je	SHORT $LN5@Dot11aTxFr@4
	mov	r8d, ebx
	sub	r8d, ecx
	add	rcx, rdx
	xor	edx, edx
	call	memset
$LN5@Dot11aTxFr@4:
	movaps	XMMWORD PTR [rsp+768], xmm6
	movaps	XMMWORD PTR [rsp+752], xmm7
	movaps	XMMWORD PTR [rsp+736], xmm8

; 28   :     SoraPacketSetSignalLength (pPacket, SignalBytes);	

	mov	edx, ebx
	mov	rcx, r12
	movaps	XMMWORD PTR [rsp+720], xmm9
	movaps	XMMWORD PTR [rsp+704], xmm10
	movaps	XMMWORD PTR [rsp+688], xmm11
	movaps	XMMWORD PTR [rsp+672], xmm12
	movaps	XMMWORD PTR [rsp+656], xmm13
	movaps	XMMWORD PTR [rsp+640], xmm14
	call	SoraPacketSetSignalLength

; 29   : 	
; 30   :     // Copy preamble
; 31   :     pcOutput += CopyPreamble16_NT(info, pcOutput, info->cWindow);

	mov	eax, DWORD PTR TxVector
	mov	r11, QWORD PTR pcOutput$[rsp]
	lea	r13, OFFSET FLAT:TxVector+1200
	cmp	eax, 44					; 0000002cH
	jne	$LN20@Dot11aTxFr@4
	movaps	XMMWORD PTR [rsp+624], xmm15
	lea	r9, OFFSET FLAT:PREAMBLE40_11A_LUT+32
	mov	ebx, 640				; 00000280H
	xorps	xmm15, xmm15
	lea	r10d, QWORD PTR [rax-40]
	npad	1
$LL19@Dot11aTxFr@4:
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR [r9-32]
	lea	r8, QWORD PTR [r9-32]
	mov	edx, 5
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm5, XMMWORD PTR [r9+16]
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm4, xmm9
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm15, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR [r9-16]
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm3, xmm11
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm4, 12
	movdqa	xmm4, XMMWORD PTR [r9]
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm6, xmm4
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm6, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm3, 12
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm4
	movdqa	xmm3, xmm5
	pmulhrsw xmm1, xmm14
	pshufd	xmm0, xmm2, 177				; 000000b1H
	palignr	xmm3, xmm4, 8
	movdqa	xmm4, xmm3
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pmulhrsw xmm3, xmm10
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pmulhrsw xmm4, xmm9
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm3, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm3, xmm0
	pand	xmm3, xmm8
	por	xmm1, xmm3
	movdqa	xmm3, XMMWORD PTR [r9+32]
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm5, 8
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm5, xmm11
	movdqa	xmm1, xmm5
	palignr	xmm1, xmm4, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	lea	rax, QWORD PTR [r9+48]
	lea	rcx, OFFSET FLAT:TxVector+1276
	pand	xmm2, xmm8
	lea	edi, QWORD PTR [rdx+2]
	por	xmm1, xmm2
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm5, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	npad	4
$LL25@Dot11aTxFr@4:
	movdqu	XMMWORD PTR [rcx], xmm2
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR [r8+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	add	rax, rax
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR [r8+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	pshufd	xmm0, xmm1, 177				; 000000b1H
	add	rax, rax
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR [r8+rax*8]
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR [r8+rax*8]
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	pand	xmm2, xmm8
	shl	rax, 4
	por	xmm1, xmm2
	add	rax, r8
	sub	rdi, 1
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm6, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm6, xmm13
	movdqa	xmm2, xmm6
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	jne	$LL25@Dot11aTxFr@4
	movdqa	XMMWORD PTR rr1$2781613[rsp], xmm2
	mov	eax, DWORD PTR rr1$2781613[rsp]
	lea	edx, QWORD PTR [rdi+22]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2781613[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2781613[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, r13
	mov	rcx, r11
	npad	4
$LL862@Dot11aTxFr@4:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rcx, 16
	add	rax, 32					; 00000020H
	sub	rdx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rcx-16], xmm1
	jne	SHORT $LL862@Dot11aTxFr@4
	add	r11, 352				; 00000160H
	add	r9, rbx
	sub	r10, 1
	jne	$LL19@Dot11aTxFr@4
	mov	r11, QWORD PTR pcOutput$[rsp]
	movaps	xmm15, XMMWORD PTR [rsp+624]
	mov	ebx, 704				; 000002c0H
	jmp	SHORT $LN14@Dot11aTxFr@4
$LN20@Dot11aTxFr@4:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN15@Dot11aTxFr@4
	lea	rax, OFFSET FLAT:PREAMBLE40_11A_LUT
	mov	ecx, 80					; 00000050H
	npad	12
$LL907@Dot11aTxFr@4:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	r11, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [r11-16], xmm1
	jne	SHORT $LL907@Dot11aTxFr@4
	mov	r11, QWORD PTR pcOutput$[rsp]
	mov	ebx, 640				; 00000280H
	jmp	SHORT $LN14@Dot11aTxFr@4
$LN15@Dot11aTxFr@4:
	mov	ebx, r15d
$LN14@Dot11aTxFr@4:
	mov	eax, 2513				; 000009d1H

; 32   : 
; 33   :     ConvEncodeReset(info->bConvEncoderReg);
; 34   :     // Generate Signal
; 35   :     pcOutput += GenerateSignal(info, pcOutput, info->cWindow, SIGNAL_RATE,
; 36   :             (unsigned short)PacketSizePlusCRC32);

	movzx	edx, bp
	xor	r8b, r8b
	mov	WORD PTR TxVector+6912, ax
	mov	eax, 1051				; 0000041bH
	shl	edx, 5
	mov	WORD PTR TxVector+6916, ax
	mov	eax, -643				; fffffffffffffd7dH
	or	edx, 12
	mov	WORD PTR TxVector+6918, ax
	mov	eax, -28
	mov	ecx, edx
	mov	WORD PTR TxVector+6920, ax
	shr	ecx, 16
	mov	eax, -645				; fffffffffffffd7bH
	mov	WORD PTR TxVector+6922, ax
	xor	ecx, edx
	mov	eax, ebx
	lea	rbx, QWORD PTR [r11+rax*2]
	mov	eax, ecx
	mov	WORD PTR TxVector+6914, r15w
	shr	eax, 8
	mov	WORD PTR TxVector+6924, r15w
	mov	WORD PTR TxVector+6926, r15w
	xor	ecx, eax
	mov	QWORD PTR pcOutput$[rsp], rbx
	lea	r9, OFFSET FLAT:TxVector+25
	mov	eax, ecx
	lea	r10, QWORD PTR rgbSignal$2790350[rsp]
	mov	r11d, 3
	shr	eax, 4
	lea	r14, OFFSET FLAT:__ImageBase
	xor	ecx, eax
	mov	eax, ecx
	shr	eax, 2
	xor	ecx, eax
	lea	eax, DWORD PTR [rcx+rcx]
	xor	eax, ecx
	and	eax, 2
	shl	eax, 16
	or	eax, edx
	mov	DWORD PTR rgbSignal$2790350[rsp], eax
	npad	5
$LL960@Dot11aTxFr@4:
	movzx	edx, BYTE PTR [r10]
	movzx	eax, r8b
	add	r9, 2
	shl	eax, 8
	movzx	r8d, dl
	inc	r10
	movsxd	rcx, eax
	shr	r8b, 2
	or	rcx, rdx
	sub	r11, 1
	movzx	eax, WORD PTR CONV_ENCODER_1_2_LUT[r14+rcx*2]
	mov	WORD PTR [r9-2], ax
	mov	BYTE PTR TxVector+24, r8b
	jne	SHORT $LL960@Dot11aTxFr@4
	movzx	eax, BYTE PTR TxVector+25
	mov	edx, 256				; 00000100H
	lea	r11, OFFSET FLAT:TxVector+26
	lea	ecx, DWORD PTR [rax+rax*2]
	lea	eax, DWORD PTR [rcx+rcx]
	cdqe
	movzx	r8d, WORD PTR INTERLEAVE_6M_LUT[r14+rax*2]
	movzx	r9d, WORD PTR INTERLEAVE_6M_LUT[r14+rax*2+2]
	movzx	r10d, WORD PTR INTERLEAVE_6M_LUT[r14+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	npad	7
$LL965@Dot11aTxFr@4:
	movzx	eax, BYTE PTR [r11]
	inc	r11
	add	eax, edx
	add	edx, 256				; 00000100H
	lea	eax, DWORD PTR [rax+rax*2]
	add	eax, eax
	or	r8w, WORD PTR INTERLEAVE_6M_LUT[r14+rax*2]
	or	r9w, WORD PTR INTERLEAVE_6M_LUT[r14+rax*2+2]
	or	r10w, WORD PTR INTERLEAVE_6M_LUT[r14+rax*2+4]
	mov	WORD PTR TxVector+61, r8w
	mov	WORD PTR TxVector+63, r9w
	mov	WORD PTR TxVector+65, r10w
	cmp	edx, 1536				; 00000600H
	jb	SHORT $LL965@Dot11aTxFr@4
	lea	r10, OFFSET FLAT:TxVector+112
	lea	r8, OFFSET FLAT:TxVector+61
	mov	r9d, 6
	mov	rdx, r10
	npad	10
$LL970@Dot11aTxFr@4:
	movzx	eax, BYTE PTR [r8]
	add	rdx, 32					; 00000020H
	inc	r8
	shl	eax, 3
	sub	r9, 1
	movsxd	rcx, eax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r14+rcx*4]
	mov	QWORD PTR [rdx-32], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r14+rcx*4+8]
	mov	QWORD PTR [rdx-24], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r14+rcx*4+16]
	mov	QWORD PTR [rdx-16], rax
	mov	rax, QWORD PTR MAPA_BPSK_LUT[r14+rcx*4+24]
	mov	QWORD PTR [rdx-8], rax
	jne	SHORT $LL970@Dot11aTxFr@4
	mov	rcx, r10
	mov	edx, 38					; 00000026H
	lea	r8, OFFSET FLAT:TxVector+456
$LL984@Dot11aTxFr@4:
	cmp	edx, 57					; 00000039H
	je	SHORT $LN983@Dot11aTxFr@4
	cmp	edx, 43					; 0000002bH
	je	SHORT $LN983@Dot11aTxFr@4
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN983@Dot11aTxFr@4:
	inc	edx
	add	r8, 4
	cmp	edx, 64					; 00000040H
	jb	SHORT $LL984@Dot11aTxFr@4
	mov	edx, 1
	lea	r8, OFFSET FLAT:TxVector+308
$LL979@Dot11aTxFr@4:
	cmp	edx, 7
	je	SHORT $LN978@Dot11aTxFr@4
	cmp	edx, 21
	je	SHORT $LN978@Dot11aTxFr@4
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN978@Dot11aTxFr@4:
	inc	edx
	add	r8, 4
	cmp	edx, 26
	jbe	SHORT $LL979@Dot11aTxFr@4
	mov	eax, 10720				; 000029e0H
	mov	ecx, -10720				; ffffffffffffd620H
	xor	edx, edx
	mov	WORD PTR TxVector+388, cx
	lea	rcx, QWORD PTR temp$2791270[rsp]
	mov	r8d, 512				; 00000200H
	mov	WORD PTR TxVector+332, ax
	mov	WORD PTR TxVector+334, r15w
	mov	WORD PTR TxVector+390, r15w
	mov	WORD PTR TxVector+532, ax
	mov	WORD PTR TxVector+534, r15w
	mov	WORD PTR TxVector+476, ax
	mov	WORD PTR TxVector+478, r15w
	call	memset
	lea	rcx, QWORD PTR temp$2791270[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2791270[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2791270[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r11, OFFSET FLAT:TxVector+688
	lea	rdx, OFFSET FLAT:?FFT128LUTMap@@3QBFB	; FFT128LUTMap
	mov	r8, r11
	lea	r9, OFFSET FLAT:?FFT128LUTMap@@3QBFB+256
	npad	7
$LL994@Dot11aTxFr@4:
	movsx	rax, WORD PTR [rdx]
	add	rdx, 2
	add	r8, 4
	cmp	rdx, r9
	mov	ecx, DWORD PTR temp$2791270[rsp+rax*4]
	mov	DWORD PTR [r8-4], ecx
	jl	SHORT $LL994@Dot11aTxFr@4
	mov	rax, r11
	mov	ecx, 32					; 00000020H
$LL991@Dot11aTxFr@4:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL991@Dot11aTxFr@4
	lea	rbp, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rbp
	call	memcpy
	movzx	ecx, WORD PTR TxVector+568
	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+6912
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR TxVector+6912
	mov	WORD PTR TxVector+6924, r15w
	mov	WORD PTR TxVector+6926, r15w
	movdqa	XMMWORD PTR TxVector+560, xmm0
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR TxVector+6914
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+6912, cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR TxVector+6914, cx
	mov	WORD PTR TxVector+6916, ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR TxVector+6918, ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR TxVector+6920, ax
	movzx	eax, WORD PTR TxVector+698
	sar	ax, 2
	mov	WORD PTR TxVector+6922, ax
	mov	eax, DWORD PTR TxVector
	cmp	eax, 44					; 0000002cH
	jne	$LN1033@Dot11aTxFr@4
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR TxVector+560
	xorps	xmm0, xmm0
	lea	edx, QWORD PTR [rax-39]
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	lea	rcx, OFFSET FLAT:TxVector+1276
	lea	rax, OFFSET FLAT:TxVector+640
	pand	xmm2, xmm8
	lea	r8d, QWORD PTR [rdx+2]
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	12
$LL1038@Dot11aTxFr@4:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rbp+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rbp+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rbp+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rbp+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r14+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL1038@Dot11aTxFr@4
	movdqa	XMMWORD PTR rr1$2790256[rsp], xmm3
	mov	eax, DWORD PTR rr1$2790256[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2790256[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2790256[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	mov	rax, r13
	lea	ecx, QWORD PTR [r8+22]
	npad	2
$LL1875@Dot11aTxFr@4:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL1875@Dot11aTxFr@4
	mov	eax, 176				; 000000b0H
	jmp	SHORT $LN1027@Dot11aTxFr@4
$LN1033@Dot11aTxFr@4:
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN1028@Dot11aTxFr@4
	mov	rax, rbp
	mov	ecx, 20
	npad	2
$LL1920@Dot11aTxFr@4:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL1920@Dot11aTxFr@4
	mov	eax, 160				; 000000a0H
	jmp	SHORT $LN1027@Dot11aTxFr@4
$LN1028@Dot11aTxFr@4:
	mov	eax, r15d
$LN1027@Dot11aTxFr@4:

; 37   :     
; 38   :     // Scramble Data
; 39   :     Scramble11a(pPacket->pMdl, info->bFrameScrambled,
; 40   :             uiSymbolCountData * (DBPS / BITS_PER_BYTE), pPacket->Reserved1, info->ulRadom);

	mov	r10, QWORD PTR [r12]
	mov	edi, DWORD PTR [r12+24]
	mov	ecx, eax
	mov	rax, QWORD PTR pcOutput$[rsp]
	mov	r11d, esi
	mov	r8b, 79					; 0000004fH
	lea	rbx, QWORD PTR [rax+rcx*2]
	lea	rax, OFFSET FLAT:TxVector+1908
	mov	DWORD PTR $T2791687[rsp], edi
	imul	r11d, 27
	add	r11, rax
	lea	rdx, OFFSET FLAT:TxVector+1910
	mov	BYTE PTR TxVector+1908, 112		; 00000070H
	mov	QWORD PTR pcOutput$[rsp], rbx
	mov	BYTE PTR TxVector+1909, r8b
	test	r10, r10
	je	SHORT $LN1968@Dot11aTxFr@4
	npad	1
$LL1969@Dot11aTxFr@4:
	mov	ecx, DWORD PTR [r10+44]
	mov	eax, DWORD PTR [r10+40]
	add	rcx, QWORD PTR [r10+32]
	test	eax, eax
	je	SHORT $LN1965@Dot11aTxFr@4
	mov	r9, rax
$LL1967@Dot11aTxFr@4:
	movzx	eax, r8b
	inc	rdx
	inc	rcx
	shr	rax, 1
	movzx	r8d, BYTE PTR SCRAMBLE_11A_LUT[rax+r14]
	movzx	eax, r8b
	xor	al, BYTE PTR [rcx-1]
	sub	r9, 1
	mov	BYTE PTR [rdx-1], al
	jne	SHORT $LL1967@Dot11aTxFr@4
$LN1965@Dot11aTxFr@4:
	mov	r10, QWORD PTR [r10]
	test	r10, r10
	jne	SHORT $LL1969@Dot11aTxFr@4
$LN1968@Dot11aTxFr@4:
	movzx	eax, r8b
	add	rdx, 5
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r14]
	movzx	eax, cl
	xor	al, dil
	mov	BYTE PTR [rdx-5], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r14]
	movzx	eax, cl
	xor	al, BYTE PTR $T2791687[rsp+1]
	mov	BYTE PTR [rdx-4], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r14]
	movzx	eax, cl
	xor	al, BYTE PTR $T2791687[rsp+2]
	mov	BYTE PTR [rdx-3], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r14]
	movzx	eax, cl
	xor	al, BYTE PTR $T2791687[rsp+3]
	mov	BYTE PTR [rdx-2], al
	mov	rax, rcx
	shr	rax, 1
	movzx	ecx, BYTE PTR SCRAMBLE_11A_LUT[rax+r14]
	movzx	eax, cl
	and	al, 192					; 000000c0H
	mov	BYTE PTR [rdx-1], al
	cmp	rdx, r11
	je	SHORT $LN1963@Dot11aTxFr@4
$LL1964@Dot11aTxFr@4:
	movzx	eax, cl
	inc	rdx
	shr	rax, 1
	mov	cl, BYTE PTR SCRAMBLE_11A_LUT[rax+r14]
	mov	BYTE PTR [rdx-1], cl
	cmp	rdx, r11
	jne	SHORT $LL1964@Dot11aTxFr@4
$LN1963@Dot11aTxFr@4:
	mov	rax, r15

; 41   : 
; 42   :     ConvEncodeReset(info->bConvEncoderReg);

	mov	BYTE PTR TxVector+24, r15b
	mov	QWORD PTR $T2801925[rsp], rax

; 43   :     pbInput = info->bFrameScrambled;
; 44   :     
; 45   :     for (i = 0; i < uiSymbolCountData; i++)

	test	esi, esi
	je	$LN3291@Dot11aTxFr@4
	mov	ecx, esi
	lea	rdi, OFFSET FLAT:TxVector+1909
	mov	QWORD PTR tv8741[rsp], rcx
	npad	13
$LL4@Dot11aTxFr@4:

; 46   :     {
; 47   :         pcOutput += GenerateSymbol(info, pcOutput, info->cWindow, 
; 48   :                 pbInput, (*PILOTSGN(uiPilotIndex)));

	movzx	eax, BYTE PTR PILOTSGN_LUT[rax+r14]
	lea	r11, OFFSET FLAT:TxVector+27
	mov	esi, 9
	mov	BYTE PTR $T2801552[rsp], al
	npad	7
$LL1978@Dot11aTxFr@4:
	movzx	edx, BYTE PTR [rdi-1]
	movzx	r9d, BYTE PTR [rdi+1]
	movzx	r10d, BYTE PTR [rdi]
	movzx	eax, dl
	mov	r8, rdx
	add	r11, 4
	and	al, 63					; 0000003fH
	shr	r8, 6
	add	rdi, 3
	movzx	ecx, al
	movzx	eax, BYTE PTR TxVector+24
	shl	cx, 6
	or	cx, ax
	movzx	eax, r9b
	shr	al, 2
	mov	BYTE PTR TxVector+24, al
	movzx	eax, cx
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r14]
	mov	BYTE PTR [r11-6], al
	movzx	eax, r10b
	and	al, 15
	movzx	ecx, al
	shl	cx, 8
	movzx	eax, cx
	or	rax, rdx
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r14]
	mov	BYTE PTR [r11-5], al
	movzx	eax, r9b
	and	al, 3
	movzx	ecx, al
	shl	cx, 8
	or	cx, r10w
	shl	cx, 2
	movzx	eax, cx
	or	rax, r8
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rax+r14]
	mov	BYTE PTR [r11-4], al
	movzx	eax, r9w
	shl	ax, 4
	movzx	ecx, ax
	mov	rax, r10
	shr	rax, 4
	or	rcx, rax
	sub	rsi, 1
	movzx	eax, BYTE PTR CONV_ENCODER_3_4_LUT[rcx+r14]
	mov	BYTE PTR [r11-3], al
	jne	$LL1978@Dot11aTxFr@4
	movzx	eax, BYTE PTR TxVector+25
	mov	QWORD PTR tv8695[rsp], rdi
	mov	edx, 256				; 00000100H
	lea	eax, DWORD PTR [rax+rax*8]
	lea	r15, OFFSET FLAT:TxVector+26
	lea	rdi, OFFSET FLAT:__ImageBase
	cdqe
	mov	r8d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4]
	mov	r9d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+4]
	mov	r10d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+8]
	mov	r11d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+12]
	mov	esi, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+16]
	mov	ebp, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+20]
	mov	r12d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+24]
	mov	r13d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+28]
	mov	r14d, DWORD PTR INTERLEAVE_48M_LUT[r14+rax*4+32]
	mov	DWORD PTR TxVector+93, r14d
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, esi
	mov	DWORD PTR TxVector+81, ebp
	mov	DWORD PTR TxVector+85, r12d
	mov	DWORD PTR TxVector+89, r13d
	npad	4
$LL1983@Dot11aTxFr@4:
	movzx	eax, BYTE PTR [r15]
	inc	r15
	add	eax, edx
	add	edx, 256				; 00000100H
	lea	eax, DWORD PTR [rax+rax*8]
	or	r8d, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4]
	or	r9d, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+4]
	or	r10d, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+8]
	or	r11d, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+12]
	or	esi, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+16]
	or	ebp, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+20]
	or	r12d, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+24]
	or	r13d, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+28]
	or	r14d, DWORD PTR INTERLEAVE_48M_LUT[rdi+rax*4+32]
	mov	DWORD PTR TxVector+61, r8d
	mov	DWORD PTR TxVector+65, r9d
	mov	DWORD PTR TxVector+69, r10d
	mov	DWORD PTR TxVector+73, r11d
	mov	DWORD PTR TxVector+77, esi
	mov	DWORD PTR TxVector+81, ebp
	mov	DWORD PTR TxVector+85, r12d
	mov	DWORD PTR TxVector+89, r13d
	mov	DWORD PTR TxVector+93, r14d
	cmp	edx, 9216				; 00002400H
	jb	$LL1983@Dot11aTxFr@4
	mov	rdi, QWORD PTR tv8695[rsp]
	lea	r9, OFFSET FLAT:TxVector+61
	lea	r8, OFFSET FLAT:TxVector+120
	mov	r10d, 12
	lea	r14, OFFSET FLAT:__ImageBase
	npad	15
$LL1988@Dot11aTxFr@4:
	mov	edx, DWORD PTR [r9]
	add	r8, 16
	add	r9, 3
	mov	eax, edx
	shr	edx, 12
	and	eax, 4095				; 00000fffH
	and	edx, 4095				; 00000fffH
	add	eax, eax
	add	edx, edx
	sub	r10, 1
	mov	ecx, eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[r14+rax*4]
	mov	DWORD PTR [r8-24], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[r14+rcx*4+4]
	mov	DWORD PTR [r8-20], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[r14+rdx*4]
	mov	DWORD PTR [r8-16], eax
	mov	eax, DWORD PTR MAPA_64QAM_LUT[r14+rdx*4+4]
	mov	DWORD PTR [r8-12], eax
	jne	SHORT $LL1988@Dot11aTxFr@4
	lea	rcx, OFFSET FLAT:TxVector+112
	mov	edx, 38					; 00000026H
	lea	r8, OFFSET FLAT:TxVector+456
	npad	6
$LL2002@Dot11aTxFr@4:
	cmp	edx, 57					; 00000039H
	je	SHORT $LN2001@Dot11aTxFr@4
	cmp	edx, 43					; 0000002bH
	je	SHORT $LN2001@Dot11aTxFr@4
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN2001@Dot11aTxFr@4:
	inc	edx
	add	r8, 4
	cmp	edx, 64					; 00000040H
	jb	SHORT $LL2002@Dot11aTxFr@4
	mov	edx, 1
	lea	r8, OFFSET FLAT:TxVector+308
	npad	6
$LL1997@Dot11aTxFr@4:
	cmp	edx, 7
	je	SHORT $LN1996@Dot11aTxFr@4
	cmp	edx, 21
	je	SHORT $LN1996@Dot11aTxFr@4
	mov	eax, DWORD PTR [rcx]
	add	rcx, 4
	mov	DWORD PTR [r8], eax
$LN1996@Dot11aTxFr@4:
	inc	edx
	add	r8, 4
	cmp	edx, 26
	jbe	SHORT $LL1997@Dot11aTxFr@4
	cmp	BYTE PTR $T2801552[rsp], 0
	jne	SHORT $LN1992@Dot11aTxFr@4
	xor	r15d, r15d
	mov	ebp, 10720				; 000029e0H
	mov	eax, -10720				; ffffffffffffd620H
	mov	WORD PTR TxVector+332, bp
	mov	WORD PTR TxVector+334, r15w
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, r15w
	mov	WORD PTR TxVector+532, bp
	mov	WORD PTR TxVector+534, r15w
	mov	WORD PTR TxVector+476, bp
	mov	WORD PTR TxVector+478, r15w
	jmp	SHORT $LN2016@Dot11aTxFr@4
$LN1992@Dot11aTxFr@4:
	xor	r15d, r15d
	mov	ebp, -10720				; ffffffffffffd620H
	mov	eax, 10720				; 000029e0H
	mov	WORD PTR TxVector+332, bp
	mov	WORD PTR TxVector+334, r15w
	mov	WORD PTR TxVector+388, ax
	mov	WORD PTR TxVector+390, r15w
	mov	WORD PTR TxVector+532, bp
	mov	WORD PTR TxVector+534, r15w
	mov	WORD PTR TxVector+476, bp
	mov	WORD PTR TxVector+478, r15w
$LN2016@Dot11aTxFr@4:
	lea	rcx, QWORD PTR temp$2798856[rsp]
	xor	edx, edx
	mov	r8d, 512				; 00000200H
	call	memset
	lea	rcx, QWORD PTR temp$2798856[rsp]
	lea	rdx, OFFSET FLAT:TxVector+304
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2798856[rsp+384]
	lea	rdx, OFFSET FLAT:TxVector+432
	mov	r8d, 128				; 00000080H
	call	memcpy
	lea	rcx, QWORD PTR temp$2798856[rsp]
	call	??$IFFTSSEEx@$0IA@@@YAXPEAUvcs@@@Z	; IFFTSSEEx<128>
	lea	r8, OFFSET FLAT:TxVector+688
	lea	rdx, OFFSET FLAT:?FFT128LUTMap@@3QBFB	; FFT128LUTMap
	mov	r11, r8
	lea	r14, OFFSET FLAT:?FFT128LUTMap@@3QBFB+256
	npad	2
$LL2012@Dot11aTxFr@4:
	movsx	rax, WORD PTR [rdx]
	add	rdx, 2
	add	r11, 4
	cmp	rdx, r14
	mov	ecx, DWORD PTR temp$2798856[rsp+rax*4]
	mov	DWORD PTR [r11-4], ecx
	jl	SHORT $LL2012@Dot11aTxFr@4
	mov	rax, r8
	mov	ecx, 32					; 00000020H
	lea	r14, OFFSET FLAT:__ImageBase
	npad	8
$LL2009@Dot11aTxFr@4:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	psllw	xmm0, 2
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL2009@Dot11aTxFr@4
	lea	rbp, OFFSET FLAT:TxVector+560
	lea	rdx, OFFSET FLAT:TxVector+1072
	mov	r8d, 128				; 00000080H
	mov	rcx, rbp
	call	memcpy
	movzx	ecx, WORD PTR TxVector+568
	sar	WORD PTR TxVector+562, 2
	sar	WORD PTR TxVector+564, 1
	sar	WORD PTR TxVector+566, 1
	movzx	r11d, WORD PTR TxVector+1072
	movzx	eax, cx
	sar	r11w, 2
	sar	ax, 2
	mov	WORD PTR TxVector+560, r11w
	sub	cx, ax
	mov	WORD PTR TxVector+568, cx
	movzx	ecx, WORD PTR TxVector+570
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+6912
	mov	WORD PTR TxVector+570, cx
	movzx	ecx, WORD PTR TxVector+688
	movdqa	xmm0, XMMWORD PTR TxVector+560
	paddsw	xmm0, XMMWORD PTR TxVector+6912
	mov	WORD PTR TxVector+6924, r15w
	mov	WORD PTR TxVector+6926, r15w
	movdqa	XMMWORD PTR TxVector+560, xmm0
	add	WORD PTR TxVector+560, ax
	movzx	eax, WORD PTR TxVector+6914
	add	WORD PTR TxVector+562, ax
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	mov	WORD PTR TxVector+6912, cx
	movzx	ecx, WORD PTR TxVector+690
	movzx	eax, cx
	sar	ax, 2
	sub	cx, ax
	movzx	eax, WORD PTR TxVector+692
	sar	ax, 1
	mov	WORD PTR TxVector+6914, cx
	mov	WORD PTR TxVector+6916, ax
	movzx	eax, WORD PTR TxVector+694
	sar	ax, 1
	mov	WORD PTR TxVector+6918, ax
	movzx	eax, WORD PTR TxVector+696
	sar	ax, 2
	mov	WORD PTR TxVector+6920, ax
	movzx	eax, WORD PTR TxVector+698
	sar	ax, 2
	cmp	DWORD PTR TxVector, 44			; 0000002cH
	mov	WORD PTR TxVector+6922, ax
	jne	$LN2051@Dot11aTxFr@4
	movdqa	xmm7, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm8, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR TxVector+560
	xorps	xmm0, xmm0
	mov	edx, 5
	movdqa	xmm9, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	movdqa	xmm10, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	movdqa	xmm11, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+16
	movdqa	xmm12, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+16
	movdqa	xmm13, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA+32
	movdqa	xmm14, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA+32
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm0, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+576
	movdqu	XMMWORD PTR TxVector+1200, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	movdqa	xmm3, XMMWORD PTR TxVector+592
	pshufd	xmm0, xmm1, 177				; 000000b1H
	movdqa	xmm5, xmm3
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm5, xmm13
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	movdqa	xmm4, XMMWORD PTR TxVector+608
	movdqu	XMMWORD PTR TxVector+1216, xmm1
	movdqa	xmm1, xmm3
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pmulhrsw xmm1, xmm14
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR TxVector+1232, xmm2
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm3, XMMWORD PTR TxVector+624
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqu	XMMWORD PTR TxVector+1244, xmm1
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	lea	rcx, OFFSET FLAT:TxVector+1276
	lea	rax, OFFSET FLAT:TxVector+640
	pand	xmm2, xmm8
	lea	r8d, QWORD PTR [rdx+2]
	por	xmm1, xmm2
	movdqa	xmm2, XMMWORD PTR TxVector+640
	palignr	xmm2, xmm3, 8
	movdqu	XMMWORD PTR TxVector+1260, xmm1
	movdqa	xmm5, xmm2
	pmulhrsw xmm2, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm3, xmm7
	pand	xmm2, xmm8
	por	xmm3, xmm2
	npad	13
$LL2056@Dot11aTxFr@4:
	movdqu	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR [rax]
	lea	rax, QWORD PTR [rdx+1]
	add	rax, rax
	movdqa	xmm3, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm3, xmm9
	movdqa	xmm1, xmm3
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+12], xmm1
	movdqa	xmm2, XMMWORD PTR [rbp+rax*8]
	lea	rax, QWORD PTR [rdx+2]
	add	rax, rax
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm3, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+28], xmm1
	movdqa	xmm3, XMMWORD PTR [rbp+rax*8]
	lea	rax, QWORD PTR [rdx+3]
	add	rax, rax
	movdqa	xmm5, xmm3
	movdqa	xmm1, xmm3
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm2, xmm5
	palignr	xmm2, xmm4, 12
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm2, xmm7
	pand	xmm1, xmm8
	por	xmm2, xmm1
	movdqu	XMMWORD PTR [rcx+44], xmm2
	movdqa	xmm4, XMMWORD PTR [rbp+rax*8]
	lea	rax, QWORD PTR [rdx+4]
	add	rax, rax
	add	rdx, 5
	movdqa	xmm2, xmm4
	palignr	xmm2, xmm3, 8
	movdqa	xmm6, xmm2
	pmulhrsw xmm2, xmm10
	pmulhrsw xmm6, xmm9
	movdqa	xmm1, xmm6
	palignr	xmm1, xmm5, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pand	xmm1, xmm7
	pand	xmm2, xmm8
	por	xmm1, xmm2
	movdqu	XMMWORD PTR [rcx+56], xmm1
	movdqa	xmm3, XMMWORD PTR [rbp+rax*8]
	movdqa	xmm2, xmm3
	palignr	xmm2, xmm4, 8
	movdqa	xmm4, xmm2
	pmulhrsw xmm2, xmm12
	pmulhrsw xmm4, xmm11
	movdqa	xmm1, xmm4
	palignr	xmm1, xmm6, 12
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pand	xmm1, xmm7
	paddw	xmm2, xmm0
	mov	rax, rdx
	add	rcx, 88					; 00000058H
	add	rax, rax
	sub	r8, 1
	pand	xmm2, xmm8
	por	xmm1, xmm2
	lea	rax, QWORD PTR TxVector[r14+rax*8+560]
	movdqu	XMMWORD PTR [rcx-16], xmm1
	movdqa	xmm1, XMMWORD PTR [rax]
	palignr	xmm1, xmm3, 8
	movdqa	xmm5, xmm1
	pmulhrsw xmm1, xmm14
	pmulhrsw xmm5, xmm13
	movdqa	xmm3, xmm5
	palignr	xmm3, xmm4, 12
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddw	xmm3, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	paddw	xmm1, xmm0
	pand	xmm3, xmm7
	pand	xmm1, xmm8
	por	xmm3, xmm1
	jne	$LL2056@Dot11aTxFr@4
	movdqa	XMMWORD PTR rr1$2798906[rsp], xmm3
	mov	eax, DWORD PTR rr1$2798906[rsp]
	mov	DWORD PTR [rcx], eax
	mov	eax, DWORD PTR rr1$2798906[rsp+4]
	mov	DWORD PTR [rcx+4], eax
	mov	eax, DWORD PTR rr1$2798906[rsp+8]
	mov	DWORD PTR [rcx+8], eax
	lea	rax, OFFSET FLAT:TxVector+1200
	lea	ecx, QWORD PTR [r8+22]
$LL2893@Dot11aTxFr@4:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL2893@Dot11aTxFr@4
	mov	eax, 176				; 000000b0H
	jmp	SHORT $LN2045@Dot11aTxFr@4
$LN2051@Dot11aTxFr@4:
	cmp	DWORD PTR TxVector, 40			; 00000028H
	jne	SHORT $LN2046@Dot11aTxFr@4
	mov	rax, rbp
	mov	ecx, 20
	npad	12
$LL2938@Dot11aTxFr@4:
	movdqa	xmm1, XMMWORD PTR [rax]
	movdqa	xmm0, XMMWORD PTR [rax+16]
	add	rbx, 16
	add	rax, 32					; 00000020H
	sub	rcx, 1
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx-16], xmm1
	jne	SHORT $LL2938@Dot11aTxFr@4
	mov	eax, 160				; 000000a0H
	jmp	SHORT $LN2045@Dot11aTxFr@4
$LN2046@Dot11aTxFr@4:
	mov	eax, r15d
$LN2045@Dot11aTxFr@4:

; 49   :         uiPilotIndex++;

	mov	r13d, DWORD PTR uiPilotIndex$1$[rsp]
	mov	ecx, eax
	mov	rax, QWORD PTR pcOutput$[rsp]
	lea	rbx, QWORD PTR [rax+rcx*2]
	mov	rax, QWORD PTR $T2801925[rsp]
	inc	r13d
	inc	rax
	mov	QWORD PTR pcOutput$[rsp], rbx
	mov	DWORD PTR uiPilotIndex$1$[rsp], r13d
	mov	QWORD PTR $T2801925[rsp], rax

; 50   :         if (uiPilotIndex == 127)

	cmp	r13d, 127				; 0000007fH
	jne	SHORT $LN1@Dot11aTxFr@4

; 51   :             uiPilotIndex = 0;

	mov	rax, r15
	mov	DWORD PTR uiPilotIndex$1$[rsp], r15d
	mov	QWORD PTR $T2801925[rsp], rax
$LN1@Dot11aTxFr@4:

; 43   :     pbInput = info->bFrameScrambled;
; 44   :     
; 45   :     for (i = 0; i < uiSymbolCountData; i++)

	sub	QWORD PTR tv8741[rsp], 1
	jne	$LL4@Dot11aTxFr@4
$LN3291@Dot11aTxFr@4:

; 52   :         pbInput += (DBPS / BITS_PER_BYTE);
; 53   :     }
; 54   :     
; 55   :     UpsampleTailAndCopyNT(info, pcOutput);

	cmp	DWORD PTR TxVector, 44			; 0000002cH
	movaps	xmm14, XMMWORD PTR [rsp+640]
	movaps	xmm13, XMMWORD PTR [rsp+656]
	mov	r15, QWORD PTR [rsp+784]
	mov	r14, QWORD PTR [rsp+792]
	mov	r13, QWORD PTR [rsp+800]
	movaps	xmm12, XMMWORD PTR [rsp+672]
	movaps	xmm11, XMMWORD PTR [rsp+688]
	movaps	xmm10, XMMWORD PTR [rsp+704]
	mov	r12, QWORD PTR [rsp+808]
	mov	rdi, QWORD PTR [rsp+856]
	mov	rsi, QWORD PTR [rsp+848]
	movaps	xmm9, XMMWORD PTR [rsp+720]
	movaps	xmm8, XMMWORD PTR [rsp+736]
	movaps	xmm7, XMMWORD PTR [rsp+752]
	mov	rbp, QWORD PTR [rsp+832]
	movaps	xmm6, XMMWORD PTR [rsp+768]
	jne	SHORT $LN2984@Dot11aTxFr@4
	movdqa	xmm1, XMMWORD PTR TxVector+6912
	xorps	xmm3, xmm3

; 56   : 
; 57   :     return S_OK;

	xor	eax, eax
	movdqa	xmm2, xmm1
	movdqa	XMMWORD PTR TxVector+1216, xmm3
	pmulhrsw xmm1, XMMWORD PTR ?g_coff1_row1@@3QAY07$$CBFA
	pmulhrsw xmm2, XMMWORD PTR ?g_coff1_row0@@3QAY07$$CBFA
	palignr	xmm2, xmm3, 12
	psraw	xmm3, 6
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddw	xmm2, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pand	xmm2, XMMWORD PTR ?_ODD_MASK@@3QBU_COMPLEX16@@B
	paddw	xmm1, xmm0
	pand	xmm1, XMMWORD PTR ?_EVEN_MASK@@3QBU_COMPLEX16@@B
	por	xmm2, xmm1
	movdqa	XMMWORD PTR TxVector+1200, xmm2
	psraw	xmm2, 6
	packsswb xmm2, xmm3
	movntdq	XMMWORD PTR [rbx], xmm2

; 58   : }

	add	rsp, 816				; 00000330H
	pop	rbx
	ret	0

; 52   :         pbInput += (DBPS / BITS_PER_BYTE);
; 53   :     }
; 54   :     
; 55   :     UpsampleTailAndCopyNT(info, pcOutput);

$LN2984@Dot11aTxFr@4:
	cmp	DWORD PTR TxVector, 40			; 00000028H
	jne	SHORT $LN3288@Dot11aTxFr@4
	movdqa	xmm1, XMMWORD PTR TxVector+6912
	movdqa	xmm0, XMMWORD PTR TxVector+6928
	psraw	xmm1, 6
	psraw	xmm0, 6
	packsswb xmm1, xmm0
	movntdq	XMMWORD PTR [rbx], xmm1
$LN3288@Dot11aTxFr@4:

; 56   : 
; 57   :     return S_OK;

	xor	eax, eax

; 58   : }

	add	rsp, 816				; 00000330H
	pop	rbx
	ret	0
?Dot11aTxFrameEncode54@@YAJPEAU_BB11A_TX_VECTOR@@PEAU__PACKET_BASE@@@Z ENDP ; Dot11aTxFrameEncode54
END
