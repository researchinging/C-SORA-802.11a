; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.207 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B	; `smin'::`2'::mid
PUBLIC	?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A ; `FetchDMADataTouchDownSampled44'::`2'::Resampler
PUBLIC	??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51 ; `FetchDMADataTouchDownSampled44'::`2'::`local static guard'
PUBLIC	??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51		; `smin'::`2'::`local static guard'
PUBLIC	?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z	; EstablishSync
PUBLIC	??$xor@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z	; xor<vi>
PUBLIC	??$abs@Uvi@@@@YA?AUvi@@AEBU0@PEAT__m128i@@@Z	; abs<vi>
PUBLIC	?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z	; GetCrossCorrelation
PUBLIC	?CheckSync@@YA_NPEAUvi@@PEAUvcs@@HIAEAH@Z	; CheckSync
PUBLIC	?EstimateChannel@@YAXPEBU_COMPLEX16@@QEAU_COMPLEX32@@@Z ; EstimateChannel
PUBLIC	?EstimateFreqOffset@@YAGPEBU_COMPLEX16@@QEAF1@Z	; EstimateFreqOffset
PUBLIC	?BB11A_VITERBIRUN_SET_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z ; BB11A_VITERBIRUN_SET_EVENT
PUBLIC	?BB11A_VITERBIDONE_CLEAR_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z ; BB11A_VITERBIDONE_CLEAR_EVENT
PUBLIC	??4vub@@QEAAAEAU0@AEAY0BA@$$CBE@Z		; vub::operator=
PUBLIC	?interleave_high@@YA?AUvub@@AEBU1@0@Z		; interleave_high
PUBLIC	?add@@YA?AUvub@@AEBU1@0@Z			; add
PUBLIC	?sub@@YA?AUvub@@AEBU1@0@Z			; sub
PUBLIC	??$and@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z	; and<vub>
PUBLIC	??0vub@@QEAA@XZ					; vub::vub
PUBLIC	??4vub@@QEAAAEAU0@AEBU0@@Z			; vub::operator=
PUBLIC	?interleave_low@@YA?AUvub@@AEBU1@0@Z		; interleave_low
PUBLIC	??$?0Uvcs@@@vub@@QEAA@AEBUvcs@@@Z		; vub::vub<vcs>
PUBLIC	?smin@@YA?AUvub@@AEBU1@0@Z			; smin
PUBLIC	?hmin@@YA?AUvub@@AEBU1@@Z			; hmin
PUBLIC	??$?0Uvub@@@vus@@QEAA@AEBUvub@@@Z		; vus::vus<vub>
PUBLIC	??0vus@@QEAA@XZ					; vus::vus
PUBLIC	??4vus@@QEAAAEAU0@AEBU0@@Z			; vus::operator=
PUBLIC	??$?0Uvcs@@@vus@@QEAA@AEBUvcs@@@Z		; vus::vus<vcs>
PUBLIC	??$permutate_low@$0LB@@@YA?AUvus@@AEBU0@@Z	; permutate_low<177>
PUBLIC	??0vus@@QEAA@AEAY07$$CBG@Z			; vus::vus
PUBLIC	??$?0Uvus@@@vs@@QEAA@AEBUvus@@@Z		; vs::vs<vus>
PUBLIC	??$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ	; vector128_consts::middle<vs>
PUBLIC	?smin@@YA?AUvs@@AEBU1@0@Z			; smin
PUBLIC	??$xor@Uvs@@@@YA?AUvs@@AEBU0@0PEAT__m128i@@@Z	; xor<vs>
PUBLIC	??$?0Uvs@@@vus@@QEAA@AEBUvs@@@Z			; vus::vus<vs>
PUBLIC	?smin@@YA?AUvus@@AEBU1@0@Z			; smin
PUBLIC	?hmin@@YA?AUvus@@AEBU1@@Z			; hmin
PUBLIC	??0vub@@QEAA@T__m128i@@@Z			; vub::vub
PUBLIC	??$or@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z	; or<vub>
PUBLIC	??$extract@$0A@@@YAGAEBUvus@@@Z			; extract<0>
PUBLIC	?Viterbi_asig@@YAXPEAUvub@@PEAD1@Z		; Viterbi_asig
PUBLIC	?Clear@?$VB@$0DA@$0IA@@@QEAAXXZ			; VB<48,128>::Clear
PUBLIC	?Clear@?$VB@$0GA@$0IA@@@QEAAXXZ			; VB<96,128>::Clear
PUBLIC	?Clear@?$VB@$0MA@$0IA@@@QEAAXXZ			; VB<192,128>::Clear
PUBLIC	?Clear@?$VB@$0BCA@$0IA@@@QEAAXXZ		; VB<288,128>::Clear
PUBLIC	?ParseSignal@@YAHIPEAGPEAEPEAI@Z		; ParseSignal
PUBLIC	?TimerStop@@YAXPEAU_TIMINGINFO@@@Z		; TimerStop
PUBLIC	?BB11A_VITERBIDONE_WAIT_EVENT@@YAHPEAU_BB11A_RX_CONTEXT@@@Z ; BB11A_VITERBIDONE_WAIT_EVENT
PUBLIC	?ChannelComp@@YAXQEBU_COMPLEX32@@PEAU_COMPLEX16@@@Z ; ChannelComp
PUBLIC	?mul_high@@YA?AUvs@@AEBU1@0@Z			; mul_high
PUBLIC	?rotate@@YA?AUvcs@@AEBU1@AEBUvs@@1@Z		; rotate
PUBLIC	?FreqComp64@@YAXPEAUvcs@@GQEBUvs@@1@Z		; FreqComp64
PUBLIC	?Pilot@@YAXQEAU_COMPLEX16@@PEAU_COMPLEX32@@PEAD@Z ; Pilot
PUBLIC	?DeinterleaveBPSK@@YAXPEAE0@Z			; DeinterleaveBPSK
PUBLIC	?DeinterleaveQPSK@@YAXPEAE0@Z			; DeinterleaveQPSK
PUBLIC	?Deinterleave16QAM@@YAXPEAE0@Z			; Deinterleave16QAM
PUBLIC	?Deinterleave64QAM@@YAXPEAE0@Z			; Deinterleave64QAM
PUBLIC	?Deinterleave@@YAXPEAE0D@Z			; Deinterleave
PUBLIC	?DemapLimit_11a@@YAXPEAUvcs@@@Z			; DemapLimit_11a
PUBLIC	?DemapBPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z	; DemapBPSK_11a
PUBLIC	?DemapQPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z	; DemapQPSK_11a
PUBLIC	?Demap16QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z	; Demap16QAM_11a
PUBLIC	?Demap64QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z	; Demap64QAM_11a
PUBLIC	?Demap_11a@@YAXPEAU_COMPLEX16@@PEAED@Z		; Demap_11a
PUBLIC	?SpaceWait@?$VB@$0DA@$0IA@@@QEAAX_KPECD@Z	; VB<48,128>::SpaceWait
PUBLIC	?Push@?$VB@$0DA@$0IA@@@QEAAPEAEXZ		; VB<48,128>::Push
PUBLIC	?Flush@?$VB@$0DA@$0IA@@@QEAAXXZ			; VB<48,128>::Flush
PUBLIC	?SpaceWait@?$VB@$0GA@$0IA@@@QEAAX_KPECD@Z	; VB<96,128>::SpaceWait
PUBLIC	?Push@?$VB@$0GA@$0IA@@@QEAAPEAEXZ		; VB<96,128>::Push
PUBLIC	?Flush@?$VB@$0GA@$0IA@@@QEAAXXZ			; VB<96,128>::Flush
PUBLIC	?SpaceWait@?$VB@$0MA@$0IA@@@QEAAX_KPECD@Z	; VB<192,128>::SpaceWait
PUBLIC	?Push@?$VB@$0MA@$0IA@@@QEAAPEAEXZ		; VB<192,128>::Push
PUBLIC	?Flush@?$VB@$0MA@$0IA@@@QEAAXXZ			; VB<192,128>::Flush
PUBLIC	?SpaceWait@?$VB@$0BCA@$0IA@@@QEAAX_KPECD@Z	; VB<288,128>::SpaceWait
PUBLIC	?Push@?$VB@$0BCA@$0IA@@@QEAAPEAEXZ		; VB<288,128>::Push
PUBLIC	?Flush@?$VB@$0BCA@$0IA@@@QEAAXXZ		; VB<288,128>::Flush
PUBLIC	?RCheck@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAA_N_K@Z ; SoraLinearFifo1<vcs,128>::RCheck
PUBLIC	?Pop@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAX_K@Z	; SoraLinearFifo1<vcs,128>::Pop
PUBLIC	?Peek@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@XZ ; SoraLinearFifo1<vcs,128>::Peek
PUBLIC	??$FFTLUTMapTable@$0EA@@@YAFH@Z			; FFTLUTMapTable<64>
PUBLIC	??$FFT_GetTwiddleConst@$0EA@$00@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<64,1>
PUBLIC	??$FFT_GetTwiddleConst@$0EA@$01@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<64,2>
PUBLIC	??$FFT_GetTwiddleConst@$0EA@$02@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<64,3>
PUBLIC	??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z			; FFTSSE<64>
PUBLIC	?shift_left@@YA?AUvq@@AEBU1@H@Z			; shift_left
PUBLIC	??$__0xFFFFFFFF00000000FFFFFFFF00000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ; vector128_consts::__0xFFFFFFFF00000000FFFFFFFF00000000<vcs>
PUBLIC	??$FFTSSEEx@$03@@YAXPEAUvcs@@@Z			; FFTSSEEx<4>
PUBLIC	??$__0xFFFF0000FFFF0000FFFF0000FFFF0000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ; vector128_consts::__0xFFFF0000FFFF0000FFFF0000FFFF0000<vcs>
PUBLIC	?conj@@YA?AUvcs@@AEBU1@@Z			; conj
PUBLIC	?mul_shift@@YA?AUvcs@@AEBU1@0H@Z		; mul_shift
PUBLIC	??$FFT_GetTwiddleConst@$0BA@$00@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<16,1>
PUBLIC	??$FFT_GetTwiddleConst@$0BA@$01@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<16,2>
PUBLIC	??$FFT_GetTwiddleConst@$0BA@$02@@YAPEBUvcs@@XZ	; FFT_GetTwiddleConst<16,3>
PUBLIC	??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z			; FFTSSE<16>
PUBLIC	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z		; FFTSSEEx<16>
PUBLIC	??$FFTSSEEx@$0EA@@@YAXPEAUvcs@@@Z		; FFTSSEEx<64>
PUBLIC	??$FFT@$0EA@@@YAXPEAUvcs@@0@Z			; FFT<64>
PUBLIC	?TimerStart@@YAXPEAU_TIMINGINFO@@@Z		; TimerStart
PUBLIC	?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z ; FetchDMADataTouchDownSampled40
PUBLIC	?Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z	; Mem2VcsL
PUBLIC	??$permutate@$07@@YA?AUvcs@@AEBU0@@Z		; permutate<8>
PUBLIC	??$permutate@$0IA@@@YA?AUvcs@@AEBU0@@Z		; permutate<128>
PUBLIC	?Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z	; Mem2VcsH
PUBLIC	?FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z ; FetchDMADataTouchDownSampled44
PUBLIC	?Clear@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAXXZ	; SoraLinearFifo1<vcs,128>::Clear
PUBLIC	?Push@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@_K@Z ; SoraLinearFifo1<vcs,128>::Push
PUBLIC	?__BB11APushSignalBlockToSyncFiFo@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z ; __BB11APushSignalBlockToSyncFiFo
PUBLIC	?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB ; `vector128_consts::middle<vs>'::`2'::mid
PUBLIC	?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B ; `Mem2VcsL'::`2'::m128FirstHalfMask
PUBLIC	?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B ; `Mem2VcsL'::`2'::m128SecondHalfMask
PUBLIC	?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B ; `Mem2VcsH'::`2'::m128FirstHalfMask
PUBLIC	?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B ; `Mem2VcsH'::`2'::m128SecondHalfMask
PUBLIC	?rgbDemapMin@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B ; `DemapLimit_11a'::`2'::rgbDemapMin
PUBLIC	?rgbDemapMax@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B ; `DemapLimit_11a'::`2'::rgbDemapMax
PUBLIC	?g11a_rguiDBPSLookUp@?1??ParseSignal@@YAHIPEAGPEAEPEAI@Z@4QBIB ; `ParseSignal'::`2'::g11a_rguiDBPSLookUp
PUBLIC	??_C@_0DM@LBDDFIFH@C?3?2SoraSDK1?47?2src?2bb?2dot11a?2SYNC@ ; `string'
PUBLIC	??_C@_0BD@OBAAEMJB@can?8t?5open?5file?$CB?5?6?$AA@ ; `string'
PUBLIC	??_C@_09DGPCGLPK@?$CF5d?5?5?$CF5d?6?$AA@	; `string'
;	COMDAT ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
_BSS	SEGMENT
?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B DB 010H DUP (?) ; `smin'::`2'::mid
_BSS	ENDS
;	COMDAT ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A
_BSS	SEGMENT
?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A DB 0170H DUP (?) ; `FetchDMADataTouchDownSampled44'::`2'::Resampler
_BSS	ENDS
;	COMDAT ??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51
_BSS	SEGMENT
??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51 DD 01H DUP (?) ; `FetchDMADataTouchDownSampled44'::`2'::`local static guard'
_BSS	ENDS
;	COMDAT ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51
_BSS	SEGMENT
??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51 DD 01H DUP (?)	; `smin'::`2'::`local static guard'
;	COMDAT ??_C@_09DGPCGLPK@?$CF5d?5?5?$CF5d?6?$AA@
CONST	SEGMENT
??_C@_09DGPCGLPK@?$CF5d?5?5?$CF5d?6?$AA@ DB '%5d  %5d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OBAAEMJB@can?8t?5open?5file?$CB?5?6?$AA@
CONST	SEGMENT
??_C@_0BD@OBAAEMJB@can?8t?5open?5file?$CB?5?6?$AA@ DB 'can''t open file! '
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LBDDFIFH@C?3?2SoraSDK1?47?2src?2bb?2dot11a?2SYNC@
CONST	SEGMENT
??_C@_0DM@LBDDFIFH@C?3?2SoraSDK1?47?2src?2bb?2dot11a?2SYNC@ DB 'C:\SoraSD'
	DB	'K1.7\src\bb\dot11a\SYNC_11A\Wisee_802.11a_Sync.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ?g11a_rguiDBPSLookUp@?1??ParseSignal@@YAHIPEAGPEAEPEAI@Z@4QBIB
CONST	SEGMENT
?g11a_rguiDBPSLookUp@?1??ParseSignal@@YAHIPEAGPEAEPEAI@Z@4QBIB DD 00H ; `ParseSignal'::`2'::g11a_rguiDBPSLookUp
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0c0H
	DD	060H
	DD	030H
	DD	018H
	DD	0d8H
	DD	090H
	DD	048H
	DD	024H
CONST	ENDS
;	COMDAT ?rgbDemapMax@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
CONST	SEGMENT
?rgbDemapMax@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B DW 07fH ; `DemapLimit_11a'::`2'::rgbDemapMax
	DW	07fH
	DW	07fH
	DW	07fH
	DW	07fH
	DW	07fH
	DW	07fH
	DW	07fH
CONST	ENDS
;	COMDAT ?rgbDemapMin@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
CONST	SEGMENT
?rgbDemapMin@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B DW 0ff80H ; `DemapLimit_11a'::`2'::rgbDemapMin
	DW	0ff80H
	DW	0ff80H
	DW	0ff80H
	DW	0ff80H
	DW	0ff80H
	DW	0ff80H
	DW	0ff80H
CONST	ENDS
;	COMDAT ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
CONST	SEGMENT
?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B DW 00H ; `Mem2VcsH'::`2'::m128SecondHalfMask
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
CONST	ENDS
;	COMDAT ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
CONST	SEGMENT
?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B DW 0ffffH ; `Mem2VcsH'::`2'::m128FirstHalfMask
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
CONST	SEGMENT
?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B DW 00H ; `Mem2VcsL'::`2'::m128SecondHalfMask
	DW	00H
	DW	00H
	DW	00H
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
CONST	ENDS
;	COMDAT ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
CONST	SEGMENT
?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B DW 0ffffH ; `Mem2VcsL'::`2'::m128FirstHalfMask
	DW	0ffffH
	DW	0ffffH
	DW	0ffffH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
CONST	SEGMENT
?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB DW 08000H ; `vector128_consts::middle<vs>'::`2'::mid
	DW	08000H
	DW	08000H
	DW	08000H
	DW	08000H
	DW	08000H
	DW	08000H
	DW	08000H
	ORG $+12
rgbLongPrePositive DB 00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
gAGCLut	DD	0fffffff9H
	DD	0fffffffaH
	DD	0fffffffbH
	DD	0fffffffcH
	DD	0fffffffdH
	DD	0fffffffeH
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\lbuf1.h
;	COMDAT ?Clear@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Clear@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAXXZ PROC	; SoraLinearFifo1<vcs,128>::Clear, COMDAT

; 56   :         w_count = r_count = 0;

	xor	eax, eax
	mov	DWORD PTR [rcx+2052], eax
	mov	DWORD PTR [rcx+2048], eax

; 57   :     }

	ret	0
?Clear@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAXXZ ENDP	; SoraLinearFifo1<vcs,128>::Clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Push@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@_K@Z
_TEXT	SEGMENT
this$ = 8
n$ = 16
?Push@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@_K@Z PROC ; SoraLinearFifo1<vcs,128>::Push, COMDAT

; 49   :         TYPE *ret = data + w_count;

	mov	eax, DWORD PTR [rcx+2048]

; 50   :         w_count += n;

	mov	edx, DWORD PTR [rcx+2048]
	add	rdx, 7
	shl	rax, 4
	mov	DWORD PTR [rcx+2048], edx
	add	rax, rcx

; 51   :         return ret;
; 52   :     }

	ret	0
?Push@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@_K@Z ENDP ; SoraLinearFifo1<vcs,128>::Push
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Peek@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@XZ
_TEXT	SEGMENT
this$ = 8
?Peek@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@XZ PROC ; SoraLinearFifo1<vcs,128>::Peek, COMDAT

; 44   :         return data + r_count;

	mov	eax, DWORD PTR [rcx+2052]
	shl	rax, 4
	add	rax, rcx

; 45   :     }

	ret	0
?Peek@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAPEAUvcs@@XZ ENDP ; SoraLinearFifo1<vcs,128>::Peek
_TEXT	ENDS
EXTRN	memcpy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Pop@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$?Pop@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAX_K@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Pop@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAX_K@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?Pop@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 48
n$ = 56
?Pop@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAX_K@Z PROC	; SoraLinearFifo1<vcs,128>::Pop, COMDAT

; 30   :     {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H

; 31   :         r_count += n;

	mov	eax, DWORD PTR [rcx+2052]
	mov	rbx, rcx
	add	rax, rdx
	mov	DWORD PTR [rcx+2052], eax

; 32   :         if (r_count == w_count)

	mov	edx, DWORD PTR [rcx+2052]
	mov	eax, DWORD PTR [rcx+2048]
	cmp	edx, eax
	jne	SHORT $LN2@Pop

; 33   :             r_count = w_count = 0;

	xor	eax, eax
	mov	DWORD PTR [rcx+2048], eax
	mov	DWORD PTR [rcx+2052], eax
$LN2@Pop:

; 34   :         if (r_count > FIELD_SIZE / 2)

	mov	eax, DWORD PTR [rcx+2052]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN1@Pop

; 35   :         {
; 36   :             memcpy(data + r_count - FIELD_SIZE / 2, data + r_count, (w_count - r_count) * sizeof(TYPE));

	mov	r8d, DWORD PTR [rcx+2048]
	mov	eax, DWORD PTR [rcx+2052]
	mov	edx, DWORD PTR [rcx+2052]
	shl	rdx, 4
	sub	r8d, eax
	add	rdx, rcx
	mov	ecx, DWORD PTR [rcx+2052]
	shl	r8, 4
	add	rcx, -64				; ffffffffffffffc0H
	shl	rcx, 4
	add	rcx, rbx
	call	memcpy

; 37   :             r_count -= FIELD_SIZE / 2;

	mov	r11d, DWORD PTR [rbx+2052]
	sub	r11, 64					; 00000040H
	mov	DWORD PTR [rbx+2052], r11d

; 38   :             w_count -= FIELD_SIZE / 2;

	mov	eax, DWORD PTR [rbx+2048]
	sub	rax, 64					; 00000040H
	mov	DWORD PTR [rbx+2048], eax
$LN1@Pop:

; 39   :         }
; 40   :     }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?Pop@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAAX_K@Z ENDP	; SoraLinearFifo1<vcs,128>::Pop
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?RCheck@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAA_N_K@Z
_TEXT	SEGMENT
this$ = 8
n$ = 16
?RCheck@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAA_N_K@Z PROC	; SoraLinearFifo1<vcs,128>::RCheck, COMDAT

; 26   :         return w_count - r_count >= n;

	mov	eax, DWORD PTR [rcx+2052]
	mov	r8d, DWORD PTR [rcx+2048]
	sub	r8d, eax
	cmp	r8, rdx
	setae	al

; 27   :     }

	ret	0
?RCheck@?$SoraLinearFifo1@Uvcs@@$0IA@@@QEAA_N_K@Z ENDP	; SoraLinearFifo1<vcs,128>::RCheck
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\vb.h
_TEXT	ENDS
;	COMDAT ?Clear@?$VB@$0BCA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Clear@?$VB@$0BCA@$0IA@@@QEAAXXZ PROC			; VB<288,128>::Clear, COMDAT

; 63   :         unsigned int i;
; 64   :         w_itBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rax

; 65   :         w_currentBlock = blocks;

	mov	QWORD PTR [rcx], rax
	mov	ecx, 128				; 00000080H
$LL3@Clear:

; 66   :         for (i = 0; i < VB_DCCOUNT; i++)
; 67   :         {
; 68   :             blocks[i].isValid = 0;

	mov	BYTE PTR [rax], 0
	add	rax, 320				; 00000140H
	sub	rcx, 1
	jne	SHORT $LL3@Clear

; 69   :         }
; 70   :     }

	fatret	0
?Clear@?$VB@$0BCA@$0IA@@@QEAAXXZ ENDP			; VB<288,128>::Clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Flush@?$VB@$0BCA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Flush@?$VB@$0BCA@$0IA@@@QEAAXXZ PROC			; VB<288,128>::Flush, COMDAT

; 55   :         w_currentBlock->isValid = 1;

	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1

; 56   :         w_currentBlock++;

	add	QWORD PTR [rcx], 320			; 00000140H

; 57   :         if (w_currentBlock == blocks + VB_DCCOUNT)

	lea	rax, QWORD PTR [rcx+41024]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN1@Flush

; 58   :             w_currentBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax
$LN1@Flush:

; 59   :     }

	fatret	0
?Flush@?$VB@$0BCA@$0IA@@@QEAAXXZ ENDP			; VB<288,128>::Flush
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Push@?$VB@$0BCA@$0IA@@@QEAAPEAEXZ
_TEXT	SEGMENT
this$ = 8
?Push@?$VB@$0BCA@$0IA@@@QEAAPEAEXZ PROC			; VB<288,128>::Push, COMDAT

; 45   :         unsigned char *ret = w_itBlock->data;

	mov	rdx, QWORD PTR [rcx+8]

; 46   : 
; 47   :         w_itBlock++;

	lea	r8, QWORD PTR [rdx+320]
	lea	rax, QWORD PTR [rdx+4]

; 48   :         if (w_itBlock == blocks + VB_DCCOUNT)

	lea	rdx, QWORD PTR [rcx+41024]
	mov	QWORD PTR [rcx+8], r8
	cmp	r8, rdx
	jne	SHORT $LN4@Push

; 49   :             w_itBlock = blocks;

	lea	rdx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rdx
$LN4@Push:

; 50   :         return ret;
; 51   :     }

	fatret	0
?Push@?$VB@$0BCA@$0IA@@@QEAAPEAEXZ ENDP			; VB<288,128>::Push
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?SpaceWait@?$VB@$0BCA@$0IA@@@QEAAX_KPECD@Z
_TEXT	SEGMENT
this$ = 8
nBlock$ = 16
pbWorkIndicator$ = 24
?SpaceWait@?$VB@$0BCA@$0IA@@@QEAAX_KPECD@Z PROC		; VB<288,128>::SpaceWait, COMDAT

; 37   :         VB_DCBLOCK *lastBlock = (w_currentBlock - blocks + nBlock - 1) % VB_DCCOUNT + blocks;

	mov	rdx, QWORD PTR [rcx]
	mov	r9, r8
	mov	rax, 7378697629483820647		; 6666666666666667H
	sub	rdx, rcx
	sub	rdx, 64					; 00000040H
	imul	rdx
	sar	rdx, 7
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	and	edx, 127				; 0000007fH
	lea	r8, QWORD PTR [rdx+rdx*4]
	shl	r8, 6

; 38   : 
; 39   :         while ((lastBlock->isValid & 0x1) && *pbWorkIndicator)

	movzx	eax, BYTE PTR [r8+rcx+64]
	test	al, 1
	je	SHORT $LN1@SpaceWait
	npad	3
$LL2@SpaceWait:
	movzx	eax, BYTE PTR [r9]
	test	al, al
	je	SHORT $LN1@SpaceWait

; 40   :             _mm_pause();

	pause
	movzx	eax, BYTE PTR [r8+rcx+64]
	test	al, 1
	jne	SHORT $LL2@SpaceWait
$LN1@SpaceWait:

; 41   :     }

	fatret	0
?SpaceWait@?$VB@$0BCA@$0IA@@@QEAAX_KPECD@Z ENDP		; VB<288,128>::SpaceWait
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Clear@?$VB@$0MA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Clear@?$VB@$0MA@$0IA@@@QEAAXXZ PROC			; VB<192,128>::Clear, COMDAT

; 63   :         unsigned int i;
; 64   :         w_itBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rax

; 65   :         w_currentBlock = blocks;

	mov	QWORD PTR [rcx], rax
	mov	ecx, 128				; 00000080H
$LL3@Clear@2:

; 66   :         for (i = 0; i < VB_DCCOUNT; i++)
; 67   :         {
; 68   :             blocks[i].isValid = 0;

	mov	BYTE PTR [rax], 0
	add	rax, 256				; 00000100H
	sub	rcx, 1
	jne	SHORT $LL3@Clear@2

; 69   :         }
; 70   :     }

	fatret	0
?Clear@?$VB@$0MA@$0IA@@@QEAAXXZ ENDP			; VB<192,128>::Clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Flush@?$VB@$0MA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Flush@?$VB@$0MA@$0IA@@@QEAAXXZ PROC			; VB<192,128>::Flush, COMDAT

; 55   :         w_currentBlock->isValid = 1;

	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1

; 56   :         w_currentBlock++;

	add	QWORD PTR [rcx], 256			; 00000100H

; 57   :         if (w_currentBlock == blocks + VB_DCCOUNT)

	lea	rax, QWORD PTR [rcx+32832]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN1@Flush@2

; 58   :             w_currentBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax
$LN1@Flush@2:

; 59   :     }

	fatret	0
?Flush@?$VB@$0MA@$0IA@@@QEAAXXZ ENDP			; VB<192,128>::Flush
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Push@?$VB@$0MA@$0IA@@@QEAAPEAEXZ
_TEXT	SEGMENT
this$ = 8
?Push@?$VB@$0MA@$0IA@@@QEAAPEAEXZ PROC			; VB<192,128>::Push, COMDAT

; 45   :         unsigned char *ret = w_itBlock->data;

	mov	rdx, QWORD PTR [rcx+8]

; 46   : 
; 47   :         w_itBlock++;

	lea	r8, QWORD PTR [rdx+256]
	lea	rax, QWORD PTR [rdx+4]

; 48   :         if (w_itBlock == blocks + VB_DCCOUNT)

	lea	rdx, QWORD PTR [rcx+32832]
	mov	QWORD PTR [rcx+8], r8
	cmp	r8, rdx
	jne	SHORT $LN4@Push@2

; 49   :             w_itBlock = blocks;

	lea	rdx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rdx
$LN4@Push@2:

; 50   :         return ret;
; 51   :     }

	fatret	0
?Push@?$VB@$0MA@$0IA@@@QEAAPEAEXZ ENDP			; VB<192,128>::Push
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?SpaceWait@?$VB@$0MA@$0IA@@@QEAAX_KPECD@Z
_TEXT	SEGMENT
this$ = 8
nBlock$ = 16
pbWorkIndicator$ = 24
?SpaceWait@?$VB@$0MA@$0IA@@@QEAAX_KPECD@Z PROC		; VB<192,128>::SpaceWait, COMDAT

; 37   :         VB_DCBLOCK *lastBlock = (w_currentBlock - blocks + nBlock - 1) % VB_DCCOUNT + blocks;

	mov	rdx, QWORD PTR [rcx]
	sub	rdx, rcx
	sub	rdx, 64					; 00000040H
	sar	rdx, 8
	and	edx, 127				; 0000007fH
	shl	rdx, 8

; 38   : 
; 39   :         while ((lastBlock->isValid & 0x1) && *pbWorkIndicator)

	movzx	eax, BYTE PTR [rdx+rcx+64]
	test	al, 1
	je	SHORT $LN1@SpaceWait@2
	npad	2
$LL2@SpaceWait@2:
	movzx	eax, BYTE PTR [r8]
	test	al, al
	je	SHORT $LN1@SpaceWait@2

; 40   :             _mm_pause();

	pause
	movzx	eax, BYTE PTR [rdx+rcx+64]
	test	al, 1
	jne	SHORT $LL2@SpaceWait@2
$LN1@SpaceWait@2:

; 41   :     }

	fatret	0
?SpaceWait@?$VB@$0MA@$0IA@@@QEAAX_KPECD@Z ENDP		; VB<192,128>::SpaceWait
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Clear@?$VB@$0GA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Clear@?$VB@$0GA@$0IA@@@QEAAXXZ PROC			; VB<96,128>::Clear, COMDAT

; 63   :         unsigned int i;
; 64   :         w_itBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rax

; 65   :         w_currentBlock = blocks;

	mov	QWORD PTR [rcx], rax
	mov	ecx, 128				; 00000080H
$LL3@Clear@3:

; 66   :         for (i = 0; i < VB_DCCOUNT; i++)
; 67   :         {
; 68   :             blocks[i].isValid = 0;

	mov	BYTE PTR [rax], 0
	sub	rax, -128				; ffffffffffffff80H
	sub	rcx, 1
	jne	SHORT $LL3@Clear@3

; 69   :         }
; 70   :     }

	fatret	0
?Clear@?$VB@$0GA@$0IA@@@QEAAXXZ ENDP			; VB<96,128>::Clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Flush@?$VB@$0GA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Flush@?$VB@$0GA@$0IA@@@QEAAXXZ PROC			; VB<96,128>::Flush, COMDAT

; 55   :         w_currentBlock->isValid = 1;

	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1

; 56   :         w_currentBlock++;

	sub	QWORD PTR [rcx], -128			; ffffffffffffff80H

; 57   :         if (w_currentBlock == blocks + VB_DCCOUNT)

	lea	rax, QWORD PTR [rcx+16448]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN1@Flush@3

; 58   :             w_currentBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax
$LN1@Flush@3:

; 59   :     }

	fatret	0
?Flush@?$VB@$0GA@$0IA@@@QEAAXXZ ENDP			; VB<96,128>::Flush
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Push@?$VB@$0GA@$0IA@@@QEAAPEAEXZ
_TEXT	SEGMENT
this$ = 8
?Push@?$VB@$0GA@$0IA@@@QEAAPEAEXZ PROC			; VB<96,128>::Push, COMDAT

; 45   :         unsigned char *ret = w_itBlock->data;

	mov	rdx, QWORD PTR [rcx+8]

; 46   : 
; 47   :         w_itBlock++;

	lea	r8, QWORD PTR [rdx+128]
	lea	rax, QWORD PTR [rdx+4]

; 48   :         if (w_itBlock == blocks + VB_DCCOUNT)

	lea	rdx, QWORD PTR [rcx+16448]
	mov	QWORD PTR [rcx+8], r8
	cmp	r8, rdx
	jne	SHORT $LN4@Push@3

; 49   :             w_itBlock = blocks;

	lea	rdx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rdx
$LN4@Push@3:

; 50   :         return ret;
; 51   :     }

	fatret	0
?Push@?$VB@$0GA@$0IA@@@QEAAPEAEXZ ENDP			; VB<96,128>::Push
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?SpaceWait@?$VB@$0GA@$0IA@@@QEAAX_KPECD@Z
_TEXT	SEGMENT
this$ = 8
nBlock$ = 16
pbWorkIndicator$ = 24
?SpaceWait@?$VB@$0GA@$0IA@@@QEAAX_KPECD@Z PROC		; VB<96,128>::SpaceWait, COMDAT

; 37   :         VB_DCBLOCK *lastBlock = (w_currentBlock - blocks + nBlock - 1) % VB_DCCOUNT + blocks;

	mov	rax, QWORD PTR [rcx]
	sub	rax, rcx
	sub	rax, 64					; 00000040H
	sar	rax, 7
	lea	r9, QWORD PTR [rax+rdx-1]
	and	r9d, 127				; 0000007fH
	shl	r9, 7

; 38   : 
; 39   :         while ((lastBlock->isValid & 0x1) && *pbWorkIndicator)

	movzx	eax, BYTE PTR [r9+rcx+64]
	test	al, 1
	je	SHORT $LN1@SpaceWait@3
$LL2@SpaceWait@3:
	movzx	eax, BYTE PTR [r8]
	test	al, al
	je	SHORT $LN1@SpaceWait@3

; 40   :             _mm_pause();

	pause
	movzx	eax, BYTE PTR [r9+rcx+64]
	test	al, 1
	jne	SHORT $LL2@SpaceWait@3
$LN1@SpaceWait@3:

; 41   :     }

	fatret	0
?SpaceWait@?$VB@$0GA@$0IA@@@QEAAX_KPECD@Z ENDP		; VB<96,128>::SpaceWait
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Clear@?$VB@$0DA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Clear@?$VB@$0DA@$0IA@@@QEAAXXZ PROC			; VB<48,128>::Clear, COMDAT

; 63   :         unsigned int i;
; 64   :         w_itBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rax

; 65   :         w_currentBlock = blocks;

	mov	QWORD PTR [rcx], rax
	mov	ecx, 128				; 00000080H
$LL3@Clear@4:

; 66   :         for (i = 0; i < VB_DCCOUNT; i++)
; 67   :         {
; 68   :             blocks[i].isValid = 0;

	mov	BYTE PTR [rax], 0
	add	rax, 64					; 00000040H
	sub	rcx, 1
	jne	SHORT $LL3@Clear@4

; 69   :         }
; 70   :     }

	fatret	0
?Clear@?$VB@$0DA@$0IA@@@QEAAXXZ ENDP			; VB<48,128>::Clear
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Flush@?$VB@$0DA@$0IA@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?Flush@?$VB@$0DA@$0IA@@@QEAAXXZ PROC			; VB<48,128>::Flush, COMDAT

; 55   :         w_currentBlock->isValid = 1;

	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1

; 56   :         w_currentBlock++;

	add	QWORD PTR [rcx], 64			; 00000040H

; 57   :         if (w_currentBlock == blocks + VB_DCCOUNT)

	lea	rax, QWORD PTR [rcx+8256]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN1@Flush@4

; 58   :             w_currentBlock = blocks;

	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax
$LN1@Flush@4:

; 59   :     }

	fatret	0
?Flush@?$VB@$0DA@$0IA@@@QEAAXXZ ENDP			; VB<48,128>::Flush
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Push@?$VB@$0DA@$0IA@@@QEAAPEAEXZ
_TEXT	SEGMENT
this$ = 8
?Push@?$VB@$0DA@$0IA@@@QEAAPEAEXZ PROC			; VB<48,128>::Push, COMDAT

; 45   :         unsigned char *ret = w_itBlock->data;

	mov	rdx, QWORD PTR [rcx+8]

; 46   : 
; 47   :         w_itBlock++;

	lea	r8, QWORD PTR [rdx+64]
	lea	rax, QWORD PTR [rdx+4]

; 48   :         if (w_itBlock == blocks + VB_DCCOUNT)

	lea	rdx, QWORD PTR [rcx+8256]
	mov	QWORD PTR [rcx+8], r8
	cmp	r8, rdx
	jne	SHORT $LN4@Push@4

; 49   :             w_itBlock = blocks;

	lea	rdx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx+8], rdx
$LN4@Push@4:

; 50   :         return ret;
; 51   :     }

	fatret	0
?Push@?$VB@$0DA@$0IA@@@QEAAPEAEXZ ENDP			; VB<48,128>::Push
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?SpaceWait@?$VB@$0DA@$0IA@@@QEAAX_KPECD@Z
_TEXT	SEGMENT
this$ = 8
nBlock$ = 16
pbWorkIndicator$ = 24
?SpaceWait@?$VB@$0DA@$0IA@@@QEAAX_KPECD@Z PROC		; VB<48,128>::SpaceWait, COMDAT

; 37   :         VB_DCBLOCK *lastBlock = (w_currentBlock - blocks + nBlock - 1) % VB_DCCOUNT + blocks;

	mov	rax, QWORD PTR [rcx]
	sub	rax, rcx
	sub	rax, 64					; 00000040H
	sar	rax, 6
	lea	r9, QWORD PTR [rax+rdx-1]
	and	r9d, 127				; 0000007fH
	inc	r9
	shl	r9, 6

; 38   : 
; 39   :         while ((lastBlock->isValid & 0x1) && *pbWorkIndicator)

	movzx	eax, BYTE PTR [r9+rcx]
	test	al, 1
	je	SHORT $LN1@SpaceWait@4
$LL2@SpaceWait@4:
	movzx	eax, BYTE PTR [r8]
	test	al, al
	je	SHORT $LN1@SpaceWait@4

; 40   :             _mm_pause();

	pause
	movzx	eax, BYTE PTR [r9+rcx]
	test	al, 1
	jne	SHORT $LL2@SpaceWait@4
$LN1@SpaceWait@4:

; 41   :     }

	fatret	0
?SpaceWait@?$VB@$0DA@$0IA@@@QEAAX_KPECD@Z ENDP		; VB<48,128>::SpaceWait
_TEXT	ENDS
PUBLIC	BB11APrepareRx
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_fd.c
;	COMDAT BB11APrepareRx
_TEXT	SEGMENT
pRxContextA$ = 8
pcFrame$ = 16
unFrameMaxSize$ = 24
BB11APrepareRx PROC					; COMDAT

; 569  : 	pRxContextA->ri_pbFrame = pcFrame;

	lea	rax, OFFSET FLAT:FrameBuffer

; 570  : 	pRxContextA->ri_uiFrameMaxSize = unFrameMaxSize;

	mov	DWORD PTR RxContext+72, 1048576		; 00100000H
	mov	QWORD PTR RxContext+64, rax

; 571  : }

	ret	0
BB11APrepareRx ENDP
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\asignal.h
_TEXT	ENDS
;	COMDAT ?ParseSignal@@YAHIPEAGPEAEPEAI@Z
_TEXT	SEGMENT
uiSignal$ = 8
pusLength$ = 16
pbRate$ = 24
puiDBPS$ = 32
?ParseSignal@@YAHIPEAGPEAEPEAI@Z PROC			; ParseSignal, COMDAT

; 11   : {

	mov	r10d, ecx

; 12   :     unsigned int uiParity;
; 13   :     // signal rate look up table
; 14   :     static const unsigned int g11a_rguiDBPSLookUp[16] = {
; 15   :         /* R1-4 */
; 16   :         /* 0000 */ 0,
; 17   :         /* 1000 */ 0,
; 18   :         /* 0100 */ 0,
; 19   :         /* 1100 */ 0,
; 20   :         /* 0010 */ 0,
; 21   :         /* 1010 */ 0,
; 22   :         /* 0110 */ 0,
; 23   :         /* 1110 */ 0,
; 24   : 
; 25   :         /* 0001 */ 192,
; 26   :         /* 1001 */ 96,
; 27   :         /* 0101 */ 48,
; 28   :         /* 1101 */ 24,
; 29   :         /* 0011 */ 216,
; 30   :         /* 1011 */ 144,
; 31   :         /* 0111 */ 72,
; 32   :         /* 1111 */ 36,
; 33   :     };
; 34   : 
; 35   : 
; 36   :     uiSignal &= 0xFFFFFF;

	and	r10d, 16777215				; 00ffffffH

; 37   :     if (uiSignal & 0xFC0010) // all these bits should be always zero

	test	r10d, 16515088				; 00fc0010H
	je	SHORT $LN3@ParseSigna
$LN6@ParseSigna:

; 38   :         return FALSE;

	xor	eax, eax

; 56   : }

	ret	0
$LN3@ParseSigna:

; 39   :     
; 40   :     uiParity = (uiSignal >> 16) ^ (uiSignal);

	mov	ecx, r10d
	shr	ecx, 16
	xor	ecx, r10d

; 41   :     uiParity = (uiParity >> 8) ^ (uiParity);

	mov	eax, ecx
	shr	eax, 8
	xor	ecx, eax

; 42   :     uiParity = (uiParity >> 4) ^ (uiParity);

	mov	eax, ecx
	shr	eax, 4
	xor	ecx, eax

; 43   :     uiParity = (uiParity >> 2) ^ (uiParity);

	mov	eax, ecx
	shr	eax, 2
	xor	ecx, eax

; 44   :     uiParity = (uiParity >> 1) ^ (uiParity);

	mov	eax, ecx
	shr	eax, 1

; 45   :     if (uiParity & 0x1)

	xor	eax, ecx
	test	al, 1

; 46   :         return FALSE;

	jne	SHORT $LN6@ParseSigna

; 47   : 
; 48   :     (*pbRate) = uiSignal & 0xF;

	movzx	eax, r10b
	and	al, 15
	mov	BYTE PTR [r8], al

; 49   :     if (!((*pbRate) & 0x8))

	test	al, 8

; 50   :         return FALSE;

	je	SHORT $LN6@ParseSigna

; 51   : 
; 52   :     (*pusLength) = (uiSignal >> 5) & 0xFFF;

	mov	eax, 4095				; 00000fffH
	shr	r10d, 5

; 53   :     (*puiDBPS) = g11a_rguiDBPSLookUp[*pbRate];

	lea	rcx, OFFSET FLAT:?g11a_rguiDBPSLookUp@?1??ParseSignal@@YAHIPEAGPEAEPEAI@Z@4QBIB ; `ParseSignal'::`2'::g11a_rguiDBPSLookUp
	and	r10w, ax
	mov	WORD PTR [rdx], r10w
	movzx	eax, BYTE PTR [r8]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR [r9], eax

; 54   : 
; 55   :     return TRUE;

	mov	eax, 1

; 56   : }

	ret	0
?ParseSignal@@YAHIPEAGPEAEPEAI@Z ENDP			; ParseSignal
_TEXT	ENDS
EXTRN	__ImageBase:BYTE
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ademap.h
;	COMDAT ?Demap64QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z
_TEXT	SEGMENT
pc$ = 8
pbOutput$ = 16
?Demap64QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z PROC		; Demap64QAM_11a, COMDAT

; 110  : {

	mov	r9, rdx
	mov	r10, rcx

; 111  :     int i;
; 112  :     unsigned char re, im;
; 113  :     
; 114  :     for (i = 64 - 26; i < 64; i++)

	mov	r8d, 38					; 00000026H
	lea	r11, OFFSET FLAT:__ImageBase
$LL10@Demap64QAM:

; 115  :     {
; 116  :         if (i == 64 - 21 || i == 64 - 7)

	cmp	r8, 43					; 0000002bH
	je	SHORT $LN9@Demap64QAM
	cmp	r8, 57					; 00000039H
	je	SHORT $LN9@Demap64QAM

; 117  :             continue;
; 118  :         re = (unsigned char)(pc[i].re);
; 119  :         im = (unsigned char)(pc[i].im);
; 120  :         pbOutput[0] = g11a_rgbDemapBPSK[re];

	movzx	ecx, BYTE PTR [r10+r8*4]
	movzx	edx, BYTE PTR [r10+r8*4+2]

; 121  :         pbOutput[1] = g11a_rgbDemap64QAM2[re];
; 122  :         pbOutput[2] = g11a_rgbDemap64QAM3[re];
; 123  :         pbOutput[3] = g11a_rgbDemapBPSK[im];
; 124  :         pbOutput[4] = g11a_rgbDemap64QAM2[im];
; 125  :         pbOutput[5] = g11a_rgbDemap64QAM3[im];
; 126  :         pbOutput += 6;

	add	r9, 6
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-6], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-5], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-1], al
$LN9@Demap64QAM:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL10@Demap64QAM

; 127  :     }
; 128  : 
; 129  :     for (i = 1; i <= 26; i++)

	mov	r8d, 1
	npad	5
$LL5@Demap64QAM:

; 130  :     {
; 131  :         if (i == 7 || i == 21)

	cmp	r8, 7
	je	SHORT $LN4@Demap64QAM
	cmp	r8, 21
	je	SHORT $LN4@Demap64QAM

; 132  :             continue;
; 133  :         re = (unsigned char)(pc[i].re);
; 134  :         im = (unsigned char)(pc[i].im);
; 135  :         pbOutput[0] = g11a_rgbDemapBPSK[re];

	movzx	ecx, BYTE PTR [r10+r8*4]
	movzx	edx, BYTE PTR [r10+r8*4+2]

; 136  :         pbOutput[1] = g11a_rgbDemap64QAM2[re];
; 137  :         pbOutput[2] = g11a_rgbDemap64QAM3[re];
; 138  :         pbOutput[3] = g11a_rgbDemapBPSK[im];
; 139  :         pbOutput[4] = g11a_rgbDemap64QAM2[im];
; 140  :         pbOutput[5] = g11a_rgbDemap64QAM3[im];
; 141  :         pbOutput += 6;

	add	r9, 6
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-6], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-5], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-1], al
$LN4@Demap64QAM:
	inc	r8
	cmp	r8, 26
	jle	SHORT $LL5@Demap64QAM

; 142  :     }
; 143  : }

	fatret	0
?Demap64QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z ENDP		; Demap64QAM_11a
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Demap16QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z
_TEXT	SEGMENT
pc$ = 8
pbOutput$ = 16
?Demap16QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z PROC		; Demap16QAM_11a, COMDAT

; 77   : {

	mov	r9, rdx
	mov	r10, rcx

; 78   :     int i;
; 79   :     unsigned char re, im;
; 80   :     
; 81   :     for (i = 64 - 26; i < 64; i++)

	mov	r8d, 38					; 00000026H
	lea	r11, OFFSET FLAT:__ImageBase
$LL10@Demap16QAM:

; 82   :     {
; 83   :         if (i == 64 - 21 || i == 64 - 7)

	cmp	r8, 43					; 0000002bH
	je	SHORT $LN9@Demap16QAM
	cmp	r8, 57					; 00000039H
	je	SHORT $LN9@Demap16QAM

; 84   :             continue;
; 85   :         re = (unsigned char)(pc[i].re);
; 86   :         im = (unsigned char)(pc[i].im);
; 87   :         pbOutput[0] = g11a_rgbDemapBPSK[re];

	movzx	ecx, BYTE PTR [r10+r8*4]
	movzx	edx, BYTE PTR [r10+r8*4+2]

; 88   :         pbOutput[1] = g11a_rgbDemap16QAM2[re];
; 89   :         pbOutput[2] = g11a_rgbDemapBPSK[im];
; 90   :         pbOutput[3] = g11a_rgbDemap16QAM2[im];
; 91   :         pbOutput += 4;

	add	r9, 4
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-1], al
$LN9@Demap16QAM:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL10@Demap16QAM

; 92   :     }
; 93   : 
; 94   :     for (i = 1; i <= 26; i++)

	mov	r8d, 1
$LL5@Demap16QAM:

; 95   :     {
; 96   :         if (i == 7 || i == 21)

	cmp	r8, 7
	je	SHORT $LN4@Demap16QAM
	cmp	r8, 21
	je	SHORT $LN4@Demap16QAM

; 97   :             continue;
; 98   :         re = (unsigned char)(pc[i].re);
; 99   :         im = (unsigned char)(pc[i].im);
; 100  :         pbOutput[0] = g11a_rgbDemapBPSK[re];

	movzx	ecx, BYTE PTR [r10+r8*4]
	movzx	edx, BYTE PTR [r10+r8*4+2]

; 101  :         pbOutput[1] = g11a_rgbDemap16QAM2[re];
; 102  :         pbOutput[2] = g11a_rgbDemapBPSK[im];
; 103  :         pbOutput[3] = g11a_rgbDemap16QAM2[im];
; 104  :         pbOutput += 4;

	add	r9, 4
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rcx+r11]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rdx+r11]
	mov	BYTE PTR [r9-1], al
$LN4@Demap16QAM:
	inc	r8
	cmp	r8, 26
	jle	SHORT $LL5@Demap16QAM

; 105  :     }
; 106  : }

	fatret	0
?Demap16QAM_11a@@YAXPEAU_COMPLEX16@@PEAE@Z ENDP		; Demap16QAM_11a
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?DemapQPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z
_TEXT	SEGMENT
pc$ = 8
pbOutput$ = 16
?DemapQPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z PROC		; DemapQPSK_11a, COMDAT

; 52   : {

	mov	r9, rcx

; 53   :     int i;
; 54   :     int j = 0;
; 55   :     
; 56   :     for (i = 64 - 26; i < 64; i++)

	mov	r8d, 38					; 00000026H
	lea	r10, OFFSET FLAT:?g11a_rgbDemapBPSK@@3QBEB ; g11a_rgbDemapBPSK
$LL10@DemapQPSK_:

; 57   :     {
; 58   :         if (i == 64 - 21 || i == 64 - 7)

	cmp	r8, 43					; 0000002bH
	je	SHORT $LN9@DemapQPSK_
	cmp	r8, 57					; 00000039H
	je	SHORT $LN9@DemapQPSK_

; 59   :             continue;
; 60   :         pbOutput[0] = g11a_rgbDemapBPSK[(unsigned char)(pc[i].re)];

	movzx	eax, BYTE PTR [rcx+r8*4]

; 61   :         pbOutput[1] = g11a_rgbDemapBPSK[(unsigned char)(pc[i].im)];
; 62   :         pbOutput += 2;

	add	rdx, 2
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rdx-2], al
	movzx	eax, BYTE PTR [rcx+r8*4+2]
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rdx-1], al
$LN9@DemapQPSK_:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL10@DemapQPSK_

; 63   :     }
; 64   : 
; 65   :     for (i = 1; i <= 26; i++)

	mov	ecx, 1
	npad	7
$LL5@DemapQPSK_:

; 66   :     {
; 67   :         if (i == 7 || i == 21)

	cmp	rcx, 7
	je	SHORT $LN4@DemapQPSK_
	cmp	rcx, 21
	je	SHORT $LN4@DemapQPSK_

; 68   :             continue;
; 69   :         pbOutput[0] = g11a_rgbDemapBPSK[(unsigned char)(pc[i].re)];

	movzx	eax, BYTE PTR [r9+rcx*4]

; 70   :         pbOutput[1] = g11a_rgbDemapBPSK[(unsigned char)(pc[i].im)];
; 71   :         pbOutput += 2;

	add	rdx, 2
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rdx-2], al
	movzx	eax, BYTE PTR [r9+rcx*4+2]
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rdx-1], al
$LN4@DemapQPSK_:
	inc	rcx
	cmp	rcx, 26
	jle	SHORT $LL5@DemapQPSK_

; 72   :     }
; 73   : }

	fatret	0
?DemapQPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z ENDP		; DemapQPSK_11a
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?DemapBPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z
_TEXT	SEGMENT
pc$ = 8
pbOutput$ = 16
?DemapBPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z PROC		; DemapBPSK_11a, COMDAT

; 28   : {

	mov	r9, rcx

; 29   :     int i;
; 30   :     int j = 0;
; 31   :     
; 32   :     for (i = 64 - 26; i < 64; i++)

	mov	r8d, 38					; 00000026H
	lea	r10, OFFSET FLAT:?g11a_rgbDemapBPSK@@3QBEB ; g11a_rgbDemapBPSK
$LL10@DemapBPSK_:

; 33   :     {
; 34   :         if (i == 64 - 21 || i == 64 - 7)

	cmp	r8, 43					; 0000002bH
	je	SHORT $LN9@DemapBPSK_
	cmp	r8, 57					; 00000039H
	je	SHORT $LN9@DemapBPSK_

; 35   :             continue;
; 36   :         pbOutput[0] = g11a_rgbDemapBPSK[(unsigned char)(pc[i].re)];

	movzx	eax, BYTE PTR [rcx+r8*4]

; 37   :         pbOutput++;

	inc	rdx
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rdx-1], al
$LN9@DemapBPSK_:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL10@DemapBPSK_

; 38   :     }
; 39   : 
; 40   :     for (i = 1; i <= 26; i++)

	mov	ecx, 1
	npad	6
$LL5@DemapBPSK_:

; 41   :     {
; 42   :         if (i == 7 || i == 21)

	cmp	rcx, 7
	je	SHORT $LN4@DemapBPSK_
	cmp	rcx, 21
	je	SHORT $LN4@DemapBPSK_

; 43   :             continue;
; 44   :         
; 45   :         pbOutput[0] = g11a_rgbDemapBPSK[(unsigned char)(pc[i].re)];

	movzx	eax, BYTE PTR [r9+rcx*4]

; 46   :         pbOutput++;

	inc	rdx
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rdx-1], al
$LN4@DemapBPSK_:
	inc	rcx
	cmp	rcx, 26
	jle	SHORT $LL5@DemapBPSK_

; 47   :     }
; 48   : }

	fatret	0
?DemapBPSK_11a@@YAXPEAU_COMPLEX16@@PEAE@Z ENDP		; DemapBPSK_11a
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\adeinterleave.h
_TEXT	ENDS
;	COMDAT ?Deinterleave64QAM@@YAXPEAE0@Z
_TEXT	SEGMENT
pbInput$ = 8
pbOutput$ = 16
?Deinterleave64QAM@@YAXPEAE0@Z PROC			; Deinterleave64QAM, COMDAT

; 358  :     pbOutput[0] = pbInput[0];

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 359  :     pbOutput[1] = pbInput[20];

	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+1], al

; 360  :     pbOutput[2] = pbInput[37];

	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+2], al

; 361  :     pbOutput[3] = pbInput[54];

	movzx	eax, BYTE PTR [rcx+54]
	mov	BYTE PTR [rdx+3], al

; 362  :     pbOutput[4] = pbInput[74];

	movzx	eax, BYTE PTR [rcx+74]
	mov	BYTE PTR [rdx+4], al

; 363  :     pbOutput[5] = pbInput[91];

	movzx	eax, BYTE PTR [rcx+91]
	mov	BYTE PTR [rdx+5], al

; 364  :     pbOutput[6] = pbInput[108];

	movzx	eax, BYTE PTR [rcx+108]
	mov	BYTE PTR [rdx+6], al

; 365  :     pbOutput[7] = pbInput[128];

	movzx	eax, BYTE PTR [rcx+128]
	mov	BYTE PTR [rdx+7], al

; 366  :     pbOutput[8] = pbInput[145];

	movzx	eax, BYTE PTR [rcx+145]
	mov	BYTE PTR [rdx+8], al

; 367  :     pbOutput[9] = pbInput[162];

	movzx	eax, BYTE PTR [rcx+162]
	mov	BYTE PTR [rdx+9], al

; 368  :     pbOutput[10] = pbInput[182];

	movzx	eax, BYTE PTR [rcx+182]
	mov	BYTE PTR [rdx+10], al

; 369  :     pbOutput[11] = pbInput[199];

	movzx	eax, BYTE PTR [rcx+199]
	mov	BYTE PTR [rdx+11], al

; 370  :     pbOutput[12] = pbInput[216];

	movzx	eax, BYTE PTR [rcx+216]
	mov	BYTE PTR [rdx+12], al

; 371  :     pbOutput[13] = pbInput[236];

	movzx	eax, BYTE PTR [rcx+236]
	mov	BYTE PTR [rdx+13], al

; 372  :     pbOutput[14] = pbInput[253];

	movzx	eax, BYTE PTR [rcx+253]
	mov	BYTE PTR [rdx+14], al

; 373  :     pbOutput[15] = pbInput[270];

	movzx	eax, BYTE PTR [rcx+270]
	mov	BYTE PTR [rdx+15], al

; 374  :     pbOutput[16] = pbInput[1];

	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al

; 375  :     pbOutput[17] = pbInput[18];

	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+17], al

; 376  :     pbOutput[18] = pbInput[38];

	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+18], al

; 377  :     pbOutput[19] = pbInput[55];

	movzx	eax, BYTE PTR [rcx+55]
	mov	BYTE PTR [rdx+19], al

; 378  :     pbOutput[20] = pbInput[72];

	movzx	eax, BYTE PTR [rcx+72]
	mov	BYTE PTR [rdx+20], al

; 379  :     pbOutput[21] = pbInput[92];

	movzx	eax, BYTE PTR [rcx+92]
	mov	BYTE PTR [rdx+21], al

; 380  :     pbOutput[22] = pbInput[109];

	movzx	eax, BYTE PTR [rcx+109]
	mov	BYTE PTR [rdx+22], al

; 381  :     pbOutput[23] = pbInput[126];

	movzx	eax, BYTE PTR [rcx+126]
	mov	BYTE PTR [rdx+23], al

; 382  :     pbOutput[24] = pbInput[146];

	movzx	eax, BYTE PTR [rcx+146]
	mov	BYTE PTR [rdx+24], al

; 383  :     pbOutput[25] = pbInput[163];

	movzx	eax, BYTE PTR [rcx+163]
	mov	BYTE PTR [rdx+25], al

; 384  :     pbOutput[26] = pbInput[180];

	movzx	eax, BYTE PTR [rcx+180]
	mov	BYTE PTR [rdx+26], al

; 385  :     pbOutput[27] = pbInput[200];

	movzx	eax, BYTE PTR [rcx+200]
	mov	BYTE PTR [rdx+27], al

; 386  :     pbOutput[28] = pbInput[217];

	movzx	eax, BYTE PTR [rcx+217]
	mov	BYTE PTR [rdx+28], al

; 387  :     pbOutput[29] = pbInput[234];

	movzx	eax, BYTE PTR [rcx+234]
	mov	BYTE PTR [rdx+29], al

; 388  :     pbOutput[30] = pbInput[254];

	movzx	eax, BYTE PTR [rcx+254]
	mov	BYTE PTR [rdx+30], al

; 389  :     pbOutput[31] = pbInput[271];

	movzx	eax, BYTE PTR [rcx+271]
	mov	BYTE PTR [rdx+31], al

; 390  :     pbOutput[32] = pbInput[2];

	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al

; 391  :     pbOutput[33] = pbInput[19];

	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+33], al

; 392  :     pbOutput[34] = pbInput[36];

	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+34], al

; 393  :     pbOutput[35] = pbInput[56];

	movzx	eax, BYTE PTR [rcx+56]
	mov	BYTE PTR [rdx+35], al

; 394  :     pbOutput[36] = pbInput[73];

	movzx	eax, BYTE PTR [rcx+73]
	mov	BYTE PTR [rdx+36], al

; 395  :     pbOutput[37] = pbInput[90];

	movzx	eax, BYTE PTR [rcx+90]
	mov	BYTE PTR [rdx+37], al

; 396  :     pbOutput[38] = pbInput[110];

	movzx	eax, BYTE PTR [rcx+110]
	mov	BYTE PTR [rdx+38], al

; 397  :     pbOutput[39] = pbInput[127];

	movzx	eax, BYTE PTR [rcx+127]
	mov	BYTE PTR [rdx+39], al

; 398  :     pbOutput[40] = pbInput[144];

	movzx	eax, BYTE PTR [rcx+144]
	mov	BYTE PTR [rdx+40], al

; 399  :     pbOutput[41] = pbInput[164];

	movzx	eax, BYTE PTR [rcx+164]
	mov	BYTE PTR [rdx+41], al

; 400  :     pbOutput[42] = pbInput[181];

	movzx	eax, BYTE PTR [rcx+181]
	mov	BYTE PTR [rdx+42], al

; 401  :     pbOutput[43] = pbInput[198];

	movzx	eax, BYTE PTR [rcx+198]
	mov	BYTE PTR [rdx+43], al

; 402  :     pbOutput[44] = pbInput[218];

	movzx	eax, BYTE PTR [rcx+218]
	mov	BYTE PTR [rdx+44], al

; 403  :     pbOutput[45] = pbInput[235];

	movzx	eax, BYTE PTR [rcx+235]
	mov	BYTE PTR [rdx+45], al

; 404  :     pbOutput[46] = pbInput[252];

	movzx	eax, BYTE PTR [rcx+252]
	mov	BYTE PTR [rdx+46], al

; 405  :     pbOutput[47] = pbInput[272];

	movzx	eax, BYTE PTR [rcx+272]
	mov	BYTE PTR [rdx+47], al

; 406  :     pbOutput[48] = pbInput[3];

	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+48], al

; 407  :     pbOutput[49] = pbInput[23];

	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+49], al

; 408  :     pbOutput[50] = pbInput[40];

	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+50], al

; 409  :     pbOutput[51] = pbInput[57];

	movzx	eax, BYTE PTR [rcx+57]
	mov	BYTE PTR [rdx+51], al

; 410  :     pbOutput[52] = pbInput[77];

	movzx	eax, BYTE PTR [rcx+77]
	mov	BYTE PTR [rdx+52], al

; 411  :     pbOutput[53] = pbInput[94];

	movzx	eax, BYTE PTR [rcx+94]
	mov	BYTE PTR [rdx+53], al

; 412  :     pbOutput[54] = pbInput[111];

	movzx	eax, BYTE PTR [rcx+111]
	mov	BYTE PTR [rdx+54], al

; 413  :     pbOutput[55] = pbInput[131];

	movzx	eax, BYTE PTR [rcx+131]
	mov	BYTE PTR [rdx+55], al

; 414  :     pbOutput[56] = pbInput[148];

	movzx	eax, BYTE PTR [rcx+148]
	mov	BYTE PTR [rdx+56], al

; 415  :     pbOutput[57] = pbInput[165];

	movzx	eax, BYTE PTR [rcx+165]
	mov	BYTE PTR [rdx+57], al

; 416  :     pbOutput[58] = pbInput[185];

	movzx	eax, BYTE PTR [rcx+185]
	mov	BYTE PTR [rdx+58], al

; 417  :     pbOutput[59] = pbInput[202];

	movzx	eax, BYTE PTR [rcx+202]
	mov	BYTE PTR [rdx+59], al

; 418  :     pbOutput[60] = pbInput[219];

	movzx	eax, BYTE PTR [rcx+219]
	mov	BYTE PTR [rdx+60], al

; 419  :     pbOutput[61] = pbInput[239];

	movzx	eax, BYTE PTR [rcx+239]
	mov	BYTE PTR [rdx+61], al

; 420  :     pbOutput[62] = pbInput[256];

	movzx	eax, BYTE PTR [rcx+256]
	mov	BYTE PTR [rdx+62], al

; 421  :     pbOutput[63] = pbInput[273];

	movzx	eax, BYTE PTR [rcx+273]
	mov	BYTE PTR [rdx+63], al

; 422  :     pbOutput[64] = pbInput[4];

	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+64], al

; 423  :     pbOutput[65] = pbInput[21];

	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+65], al

; 424  :     pbOutput[66] = pbInput[41];

	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+66], al

; 425  :     pbOutput[67] = pbInput[58];

	movzx	eax, BYTE PTR [rcx+58]
	mov	BYTE PTR [rdx+67], al

; 426  :     pbOutput[68] = pbInput[75];

	movzx	eax, BYTE PTR [rcx+75]
	mov	BYTE PTR [rdx+68], al

; 427  :     pbOutput[69] = pbInput[95];

	movzx	eax, BYTE PTR [rcx+95]
	mov	BYTE PTR [rdx+69], al

; 428  :     pbOutput[70] = pbInput[112];

	movzx	eax, BYTE PTR [rcx+112]
	mov	BYTE PTR [rdx+70], al

; 429  :     pbOutput[71] = pbInput[129];

	movzx	eax, BYTE PTR [rcx+129]
	mov	BYTE PTR [rdx+71], al

; 430  :     pbOutput[72] = pbInput[149];

	movzx	eax, BYTE PTR [rcx+149]
	mov	BYTE PTR [rdx+72], al

; 431  :     pbOutput[73] = pbInput[166];

	movzx	eax, BYTE PTR [rcx+166]
	mov	BYTE PTR [rdx+73], al

; 432  :     pbOutput[74] = pbInput[183];

	movzx	eax, BYTE PTR [rcx+183]
	mov	BYTE PTR [rdx+74], al

; 433  :     pbOutput[75] = pbInput[203];

	movzx	eax, BYTE PTR [rcx+203]
	mov	BYTE PTR [rdx+75], al

; 434  :     pbOutput[76] = pbInput[220];

	movzx	eax, BYTE PTR [rcx+220]
	mov	BYTE PTR [rdx+76], al

; 435  :     pbOutput[77] = pbInput[237];

	movzx	eax, BYTE PTR [rcx+237]
	mov	BYTE PTR [rdx+77], al

; 436  :     pbOutput[78] = pbInput[257];

	movzx	eax, BYTE PTR [rcx+257]
	mov	BYTE PTR [rdx+78], al

; 437  :     pbOutput[79] = pbInput[274];

	movzx	eax, BYTE PTR [rcx+274]
	mov	BYTE PTR [rdx+79], al

; 438  :     pbOutput[80] = pbInput[5];

	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+80], al

; 439  :     pbOutput[81] = pbInput[22];

	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+81], al

; 440  :     pbOutput[82] = pbInput[39];

	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+82], al

; 441  :     pbOutput[83] = pbInput[59];

	movzx	eax, BYTE PTR [rcx+59]
	mov	BYTE PTR [rdx+83], al

; 442  :     pbOutput[84] = pbInput[76];

	movzx	eax, BYTE PTR [rcx+76]
	mov	BYTE PTR [rdx+84], al

; 443  :     pbOutput[85] = pbInput[93];

	movzx	eax, BYTE PTR [rcx+93]
	mov	BYTE PTR [rdx+85], al

; 444  :     pbOutput[86] = pbInput[113];

	movzx	eax, BYTE PTR [rcx+113]
	mov	BYTE PTR [rdx+86], al

; 445  :     pbOutput[87] = pbInput[130];

	movzx	eax, BYTE PTR [rcx+130]
	mov	BYTE PTR [rdx+87], al

; 446  :     pbOutput[88] = pbInput[147];

	movzx	eax, BYTE PTR [rcx+147]
	mov	BYTE PTR [rdx+88], al

; 447  :     pbOutput[89] = pbInput[167];

	movzx	eax, BYTE PTR [rcx+167]
	mov	BYTE PTR [rdx+89], al

; 448  :     pbOutput[90] = pbInput[184];

	movzx	eax, BYTE PTR [rcx+184]
	mov	BYTE PTR [rdx+90], al

; 449  :     pbOutput[91] = pbInput[201];

	movzx	eax, BYTE PTR [rcx+201]
	mov	BYTE PTR [rdx+91], al

; 450  :     pbOutput[92] = pbInput[221];

	movzx	eax, BYTE PTR [rcx+221]
	mov	BYTE PTR [rdx+92], al

; 451  :     pbOutput[93] = pbInput[238];

	movzx	eax, BYTE PTR [rcx+238]
	mov	BYTE PTR [rdx+93], al

; 452  :     pbOutput[94] = pbInput[255];

	movzx	eax, BYTE PTR [rcx+255]
	mov	BYTE PTR [rdx+94], al

; 453  :     pbOutput[95] = pbInput[275];

	movzx	eax, BYTE PTR [rcx+275]
	mov	BYTE PTR [rdx+95], al

; 454  :     pbOutput[96] = pbInput[6];

	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+96], al

; 455  :     pbOutput[97] = pbInput[26];

	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+97], al

; 456  :     pbOutput[98] = pbInput[43];

	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+98], al

; 457  :     pbOutput[99] = pbInput[60];

	movzx	eax, BYTE PTR [rcx+60]
	mov	BYTE PTR [rdx+99], al

; 458  :     pbOutput[100] = pbInput[80];

	movzx	eax, BYTE PTR [rcx+80]
	mov	BYTE PTR [rdx+100], al

; 459  :     pbOutput[101] = pbInput[97];

	movzx	eax, BYTE PTR [rcx+97]
	mov	BYTE PTR [rdx+101], al

; 460  :     pbOutput[102] = pbInput[114];

	movzx	eax, BYTE PTR [rcx+114]
	mov	BYTE PTR [rdx+102], al

; 461  :     pbOutput[103] = pbInput[134];

	movzx	eax, BYTE PTR [rcx+134]
	mov	BYTE PTR [rdx+103], al

; 462  :     pbOutput[104] = pbInput[151];

	movzx	eax, BYTE PTR [rcx+151]
	mov	BYTE PTR [rdx+104], al

; 463  :     pbOutput[105] = pbInput[168];

	movzx	eax, BYTE PTR [rcx+168]
	mov	BYTE PTR [rdx+105], al

; 464  :     pbOutput[106] = pbInput[188];

	movzx	eax, BYTE PTR [rcx+188]
	mov	BYTE PTR [rdx+106], al

; 465  :     pbOutput[107] = pbInput[205];

	movzx	eax, BYTE PTR [rcx+205]
	mov	BYTE PTR [rdx+107], al

; 466  :     pbOutput[108] = pbInput[222];

	movzx	eax, BYTE PTR [rcx+222]
	mov	BYTE PTR [rdx+108], al

; 467  :     pbOutput[109] = pbInput[242];

	movzx	eax, BYTE PTR [rcx+242]
	mov	BYTE PTR [rdx+109], al

; 468  :     pbOutput[110] = pbInput[259];

	movzx	eax, BYTE PTR [rcx+259]
	mov	BYTE PTR [rdx+110], al

; 469  :     pbOutput[111] = pbInput[276];

	movzx	eax, BYTE PTR [rcx+276]
	mov	BYTE PTR [rdx+111], al

; 470  :     pbOutput[112] = pbInput[7];

	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+112], al

; 471  :     pbOutput[113] = pbInput[24];

	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+113], al

; 472  :     pbOutput[114] = pbInput[44];

	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+114], al

; 473  :     pbOutput[115] = pbInput[61];

	movzx	eax, BYTE PTR [rcx+61]
	mov	BYTE PTR [rdx+115], al

; 474  :     pbOutput[116] = pbInput[78];

	movzx	eax, BYTE PTR [rcx+78]
	mov	BYTE PTR [rdx+116], al

; 475  :     pbOutput[117] = pbInput[98];

	movzx	eax, BYTE PTR [rcx+98]
	mov	BYTE PTR [rdx+117], al

; 476  :     pbOutput[118] = pbInput[115];

	movzx	eax, BYTE PTR [rcx+115]
	mov	BYTE PTR [rdx+118], al

; 477  :     pbOutput[119] = pbInput[132];

	movzx	eax, BYTE PTR [rcx+132]
	mov	BYTE PTR [rdx+119], al

; 478  :     pbOutput[120] = pbInput[152];

	movzx	eax, BYTE PTR [rcx+152]
	mov	BYTE PTR [rdx+120], al

; 479  :     pbOutput[121] = pbInput[169];

	movzx	eax, BYTE PTR [rcx+169]
	mov	BYTE PTR [rdx+121], al

; 480  :     pbOutput[122] = pbInput[186];

	movzx	eax, BYTE PTR [rcx+186]
	mov	BYTE PTR [rdx+122], al

; 481  :     pbOutput[123] = pbInput[206];

	movzx	eax, BYTE PTR [rcx+206]
	mov	BYTE PTR [rdx+123], al

; 482  :     pbOutput[124] = pbInput[223];

	movzx	eax, BYTE PTR [rcx+223]
	mov	BYTE PTR [rdx+124], al

; 483  :     pbOutput[125] = pbInput[240];

	movzx	eax, BYTE PTR [rcx+240]
	mov	BYTE PTR [rdx+125], al

; 484  :     pbOutput[126] = pbInput[260];

	movzx	eax, BYTE PTR [rcx+260]
	mov	BYTE PTR [rdx+126], al

; 485  :     pbOutput[127] = pbInput[277];

	movzx	eax, BYTE PTR [rcx+277]
	mov	BYTE PTR [rdx+127], al

; 486  :     pbOutput[128] = pbInput[8];

	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+128], al

; 487  :     pbOutput[129] = pbInput[25];

	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+129], al

; 488  :     pbOutput[130] = pbInput[42];

	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+130], al

; 489  :     pbOutput[131] = pbInput[62];

	movzx	eax, BYTE PTR [rcx+62]
	mov	BYTE PTR [rdx+131], al

; 490  :     pbOutput[132] = pbInput[79];

	movzx	eax, BYTE PTR [rcx+79]
	mov	BYTE PTR [rdx+132], al

; 491  :     pbOutput[133] = pbInput[96];

	movzx	eax, BYTE PTR [rcx+96]
	mov	BYTE PTR [rdx+133], al

; 492  :     pbOutput[134] = pbInput[116];

	movzx	eax, BYTE PTR [rcx+116]
	mov	BYTE PTR [rdx+134], al

; 493  :     pbOutput[135] = pbInput[133];

	movzx	eax, BYTE PTR [rcx+133]
	mov	BYTE PTR [rdx+135], al

; 494  :     pbOutput[136] = pbInput[150];

	movzx	eax, BYTE PTR [rcx+150]
	mov	BYTE PTR [rdx+136], al

; 495  :     pbOutput[137] = pbInput[170];

	movzx	eax, BYTE PTR [rcx+170]
	mov	BYTE PTR [rdx+137], al

; 496  :     pbOutput[138] = pbInput[187];

	movzx	eax, BYTE PTR [rcx+187]
	mov	BYTE PTR [rdx+138], al

; 497  :     pbOutput[139] = pbInput[204];

	movzx	eax, BYTE PTR [rcx+204]
	mov	BYTE PTR [rdx+139], al

; 498  :     pbOutput[140] = pbInput[224];

	movzx	eax, BYTE PTR [rcx+224]
	mov	BYTE PTR [rdx+140], al

; 499  :     pbOutput[141] = pbInput[241];

	movzx	eax, BYTE PTR [rcx+241]
	mov	BYTE PTR [rdx+141], al

; 500  :     pbOutput[142] = pbInput[258];

	movzx	eax, BYTE PTR [rcx+258]
	mov	BYTE PTR [rdx+142], al

; 501  :     pbOutput[143] = pbInput[278];

	movzx	eax, BYTE PTR [rcx+278]
	mov	BYTE PTR [rdx+143], al

; 502  :     pbOutput[144] = pbInput[9];

	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+144], al

; 503  :     pbOutput[145] = pbInput[29];

	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+145], al

; 504  :     pbOutput[146] = pbInput[46];

	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+146], al

; 505  :     pbOutput[147] = pbInput[63];

	movzx	eax, BYTE PTR [rcx+63]
	mov	BYTE PTR [rdx+147], al

; 506  :     pbOutput[148] = pbInput[83];

	movzx	eax, BYTE PTR [rcx+83]
	mov	BYTE PTR [rdx+148], al

; 507  :     pbOutput[149] = pbInput[100];

	movzx	eax, BYTE PTR [rcx+100]
	mov	BYTE PTR [rdx+149], al

; 508  :     pbOutput[150] = pbInput[117];

	movzx	eax, BYTE PTR [rcx+117]
	mov	BYTE PTR [rdx+150], al

; 509  :     pbOutput[151] = pbInput[137];

	movzx	eax, BYTE PTR [rcx+137]
	mov	BYTE PTR [rdx+151], al

; 510  :     pbOutput[152] = pbInput[154];

	movzx	eax, BYTE PTR [rcx+154]
	mov	BYTE PTR [rdx+152], al

; 511  :     pbOutput[153] = pbInput[171];

	movzx	eax, BYTE PTR [rcx+171]
	mov	BYTE PTR [rdx+153], al

; 512  :     pbOutput[154] = pbInput[191];

	movzx	eax, BYTE PTR [rcx+191]
	mov	BYTE PTR [rdx+154], al

; 513  :     pbOutput[155] = pbInput[208];

	movzx	eax, BYTE PTR [rcx+208]
	mov	BYTE PTR [rdx+155], al

; 514  :     pbOutput[156] = pbInput[225];

	movzx	eax, BYTE PTR [rcx+225]
	mov	BYTE PTR [rdx+156], al

; 515  :     pbOutput[157] = pbInput[245];

	movzx	eax, BYTE PTR [rcx+245]
	mov	BYTE PTR [rdx+157], al

; 516  :     pbOutput[158] = pbInput[262];

	movzx	eax, BYTE PTR [rcx+262]
	mov	BYTE PTR [rdx+158], al

; 517  :     pbOutput[159] = pbInput[279];

	movzx	eax, BYTE PTR [rcx+279]
	mov	BYTE PTR [rdx+159], al

; 518  :     pbOutput[160] = pbInput[10];

	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+160], al

; 519  :     pbOutput[161] = pbInput[27];

	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+161], al

; 520  :     pbOutput[162] = pbInput[47];

	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+162], al

; 521  :     pbOutput[163] = pbInput[64];

	movzx	eax, BYTE PTR [rcx+64]
	mov	BYTE PTR [rdx+163], al

; 522  :     pbOutput[164] = pbInput[81];

	movzx	eax, BYTE PTR [rcx+81]
	mov	BYTE PTR [rdx+164], al

; 523  :     pbOutput[165] = pbInput[101];

	movzx	eax, BYTE PTR [rcx+101]
	mov	BYTE PTR [rdx+165], al

; 524  :     pbOutput[166] = pbInput[118];

	movzx	eax, BYTE PTR [rcx+118]
	mov	BYTE PTR [rdx+166], al

; 525  :     pbOutput[167] = pbInput[135];

	movzx	eax, BYTE PTR [rcx+135]
	mov	BYTE PTR [rdx+167], al

; 526  :     pbOutput[168] = pbInput[155];

	movzx	eax, BYTE PTR [rcx+155]
	mov	BYTE PTR [rdx+168], al

; 527  :     pbOutput[169] = pbInput[172];

	movzx	eax, BYTE PTR [rcx+172]
	mov	BYTE PTR [rdx+169], al

; 528  :     pbOutput[170] = pbInput[189];

	movzx	eax, BYTE PTR [rcx+189]
	mov	BYTE PTR [rdx+170], al

; 529  :     pbOutput[171] = pbInput[209];

	movzx	eax, BYTE PTR [rcx+209]
	mov	BYTE PTR [rdx+171], al

; 530  :     pbOutput[172] = pbInput[226];

	movzx	eax, BYTE PTR [rcx+226]
	mov	BYTE PTR [rdx+172], al

; 531  :     pbOutput[173] = pbInput[243];

	movzx	eax, BYTE PTR [rcx+243]
	mov	BYTE PTR [rdx+173], al

; 532  :     pbOutput[174] = pbInput[263];

	movzx	eax, BYTE PTR [rcx+263]
	mov	BYTE PTR [rdx+174], al

; 533  :     pbOutput[175] = pbInput[280];

	movzx	eax, BYTE PTR [rcx+280]
	mov	BYTE PTR [rdx+175], al

; 534  :     pbOutput[176] = pbInput[11];

	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+176], al

; 535  :     pbOutput[177] = pbInput[28];

	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+177], al

; 536  :     pbOutput[178] = pbInput[45];

	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+178], al

; 537  :     pbOutput[179] = pbInput[65];

	movzx	eax, BYTE PTR [rcx+65]
	mov	BYTE PTR [rdx+179], al

; 538  :     pbOutput[180] = pbInput[82];

	movzx	eax, BYTE PTR [rcx+82]
	mov	BYTE PTR [rdx+180], al

; 539  :     pbOutput[181] = pbInput[99];

	movzx	eax, BYTE PTR [rcx+99]
	mov	BYTE PTR [rdx+181], al

; 540  :     pbOutput[182] = pbInput[119];

	movzx	eax, BYTE PTR [rcx+119]
	mov	BYTE PTR [rdx+182], al

; 541  :     pbOutput[183] = pbInput[136];

	movzx	eax, BYTE PTR [rcx+136]
	mov	BYTE PTR [rdx+183], al

; 542  :     pbOutput[184] = pbInput[153];

	movzx	eax, BYTE PTR [rcx+153]
	mov	BYTE PTR [rdx+184], al

; 543  :     pbOutput[185] = pbInput[173];

	movzx	eax, BYTE PTR [rcx+173]
	mov	BYTE PTR [rdx+185], al

; 544  :     pbOutput[186] = pbInput[190];

	movzx	eax, BYTE PTR [rcx+190]
	mov	BYTE PTR [rdx+186], al

; 545  :     pbOutput[187] = pbInput[207];

	movzx	eax, BYTE PTR [rcx+207]
	mov	BYTE PTR [rdx+187], al

; 546  :     pbOutput[188] = pbInput[227];

	movzx	eax, BYTE PTR [rcx+227]
	mov	BYTE PTR [rdx+188], al

; 547  :     pbOutput[189] = pbInput[244];

	movzx	eax, BYTE PTR [rcx+244]
	mov	BYTE PTR [rdx+189], al

; 548  :     pbOutput[190] = pbInput[261];

	movzx	eax, BYTE PTR [rcx+261]
	mov	BYTE PTR [rdx+190], al

; 549  :     pbOutput[191] = pbInput[281];

	movzx	eax, BYTE PTR [rcx+281]
	mov	BYTE PTR [rdx+191], al

; 550  :     pbOutput[192] = pbInput[12];

	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+192], al

; 551  :     pbOutput[193] = pbInput[32];

	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+193], al

; 552  :     pbOutput[194] = pbInput[49];

	movzx	eax, BYTE PTR [rcx+49]
	mov	BYTE PTR [rdx+194], al

; 553  :     pbOutput[195] = pbInput[66];

	movzx	eax, BYTE PTR [rcx+66]
	mov	BYTE PTR [rdx+195], al

; 554  :     pbOutput[196] = pbInput[86];

	movzx	eax, BYTE PTR [rcx+86]
	mov	BYTE PTR [rdx+196], al

; 555  :     pbOutput[197] = pbInput[103];

	movzx	eax, BYTE PTR [rcx+103]
	mov	BYTE PTR [rdx+197], al

; 556  :     pbOutput[198] = pbInput[120];

	movzx	eax, BYTE PTR [rcx+120]
	mov	BYTE PTR [rdx+198], al

; 557  :     pbOutput[199] = pbInput[140];

	movzx	eax, BYTE PTR [rcx+140]
	mov	BYTE PTR [rdx+199], al

; 558  :     pbOutput[200] = pbInput[157];

	movzx	eax, BYTE PTR [rcx+157]
	mov	BYTE PTR [rdx+200], al

; 559  :     pbOutput[201] = pbInput[174];

	movzx	eax, BYTE PTR [rcx+174]
	mov	BYTE PTR [rdx+201], al

; 560  :     pbOutput[202] = pbInput[194];

	movzx	eax, BYTE PTR [rcx+194]
	mov	BYTE PTR [rdx+202], al

; 561  :     pbOutput[203] = pbInput[211];

	movzx	eax, BYTE PTR [rcx+211]
	mov	BYTE PTR [rdx+203], al

; 562  :     pbOutput[204] = pbInput[228];

	movzx	eax, BYTE PTR [rcx+228]
	mov	BYTE PTR [rdx+204], al

; 563  :     pbOutput[205] = pbInput[248];

	movzx	eax, BYTE PTR [rcx+248]
	mov	BYTE PTR [rdx+205], al

; 564  :     pbOutput[206] = pbInput[265];

	movzx	eax, BYTE PTR [rcx+265]
	mov	BYTE PTR [rdx+206], al

; 565  :     pbOutput[207] = pbInput[282];

	movzx	eax, BYTE PTR [rcx+282]
	mov	BYTE PTR [rdx+207], al

; 566  :     pbOutput[208] = pbInput[13];

	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+208], al

; 567  :     pbOutput[209] = pbInput[30];

	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+209], al

; 568  :     pbOutput[210] = pbInput[50];

	movzx	eax, BYTE PTR [rcx+50]
	mov	BYTE PTR [rdx+210], al

; 569  :     pbOutput[211] = pbInput[67];

	movzx	eax, BYTE PTR [rcx+67]
	mov	BYTE PTR [rdx+211], al

; 570  :     pbOutput[212] = pbInput[84];

	movzx	eax, BYTE PTR [rcx+84]
	mov	BYTE PTR [rdx+212], al

; 571  :     pbOutput[213] = pbInput[104];

	movzx	eax, BYTE PTR [rcx+104]
	mov	BYTE PTR [rdx+213], al

; 572  :     pbOutput[214] = pbInput[121];

	movzx	eax, BYTE PTR [rcx+121]
	mov	BYTE PTR [rdx+214], al

; 573  :     pbOutput[215] = pbInput[138];

	movzx	eax, BYTE PTR [rcx+138]
	mov	BYTE PTR [rdx+215], al

; 574  :     pbOutput[216] = pbInput[158];

	movzx	eax, BYTE PTR [rcx+158]
	mov	BYTE PTR [rdx+216], al

; 575  :     pbOutput[217] = pbInput[175];

	movzx	eax, BYTE PTR [rcx+175]
	mov	BYTE PTR [rdx+217], al

; 576  :     pbOutput[218] = pbInput[192];

	movzx	eax, BYTE PTR [rcx+192]
	mov	BYTE PTR [rdx+218], al

; 577  :     pbOutput[219] = pbInput[212];

	movzx	eax, BYTE PTR [rcx+212]
	mov	BYTE PTR [rdx+219], al

; 578  :     pbOutput[220] = pbInput[229];

	movzx	eax, BYTE PTR [rcx+229]
	mov	BYTE PTR [rdx+220], al

; 579  :     pbOutput[221] = pbInput[246];

	movzx	eax, BYTE PTR [rcx+246]
	mov	BYTE PTR [rdx+221], al

; 580  :     pbOutput[222] = pbInput[266];

	movzx	eax, BYTE PTR [rcx+266]
	mov	BYTE PTR [rdx+222], al

; 581  :     pbOutput[223] = pbInput[283];

	movzx	eax, BYTE PTR [rcx+283]
	mov	BYTE PTR [rdx+223], al

; 582  :     pbOutput[224] = pbInput[14];

	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+224], al

; 583  :     pbOutput[225] = pbInput[31];

	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+225], al

; 584  :     pbOutput[226] = pbInput[48];

	movzx	eax, BYTE PTR [rcx+48]
	mov	BYTE PTR [rdx+226], al

; 585  :     pbOutput[227] = pbInput[68];

	movzx	eax, BYTE PTR [rcx+68]
	mov	BYTE PTR [rdx+227], al

; 586  :     pbOutput[228] = pbInput[85];

	movzx	eax, BYTE PTR [rcx+85]
	mov	BYTE PTR [rdx+228], al

; 587  :     pbOutput[229] = pbInput[102];

	movzx	eax, BYTE PTR [rcx+102]
	mov	BYTE PTR [rdx+229], al

; 588  :     pbOutput[230] = pbInput[122];

	movzx	eax, BYTE PTR [rcx+122]
	mov	BYTE PTR [rdx+230], al

; 589  :     pbOutput[231] = pbInput[139];

	movzx	eax, BYTE PTR [rcx+139]
	mov	BYTE PTR [rdx+231], al

; 590  :     pbOutput[232] = pbInput[156];

	movzx	eax, BYTE PTR [rcx+156]
	mov	BYTE PTR [rdx+232], al

; 591  :     pbOutput[233] = pbInput[176];

	movzx	eax, BYTE PTR [rcx+176]
	mov	BYTE PTR [rdx+233], al

; 592  :     pbOutput[234] = pbInput[193];

	movzx	eax, BYTE PTR [rcx+193]
	mov	BYTE PTR [rdx+234], al

; 593  :     pbOutput[235] = pbInput[210];

	movzx	eax, BYTE PTR [rcx+210]
	mov	BYTE PTR [rdx+235], al

; 594  :     pbOutput[236] = pbInput[230];

	movzx	eax, BYTE PTR [rcx+230]
	mov	BYTE PTR [rdx+236], al

; 595  :     pbOutput[237] = pbInput[247];

	movzx	eax, BYTE PTR [rcx+247]
	mov	BYTE PTR [rdx+237], al

; 596  :     pbOutput[238] = pbInput[264];

	movzx	eax, BYTE PTR [rcx+264]
	mov	BYTE PTR [rdx+238], al

; 597  :     pbOutput[239] = pbInput[284];

	movzx	eax, BYTE PTR [rcx+284]
	mov	BYTE PTR [rdx+239], al

; 598  :     pbOutput[240] = pbInput[15];

	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+240], al

; 599  :     pbOutput[241] = pbInput[35];

	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+241], al

; 600  :     pbOutput[242] = pbInput[52];

	movzx	eax, BYTE PTR [rcx+52]
	mov	BYTE PTR [rdx+242], al

; 601  :     pbOutput[243] = pbInput[69];

	movzx	eax, BYTE PTR [rcx+69]
	mov	BYTE PTR [rdx+243], al

; 602  :     pbOutput[244] = pbInput[89];

	movzx	eax, BYTE PTR [rcx+89]
	mov	BYTE PTR [rdx+244], al

; 603  :     pbOutput[245] = pbInput[106];

	movzx	eax, BYTE PTR [rcx+106]
	mov	BYTE PTR [rdx+245], al

; 604  :     pbOutput[246] = pbInput[123];

	movzx	eax, BYTE PTR [rcx+123]
	mov	BYTE PTR [rdx+246], al

; 605  :     pbOutput[247] = pbInput[143];

	movzx	eax, BYTE PTR [rcx+143]
	mov	BYTE PTR [rdx+247], al

; 606  :     pbOutput[248] = pbInput[160];

	movzx	eax, BYTE PTR [rcx+160]
	mov	BYTE PTR [rdx+248], al

; 607  :     pbOutput[249] = pbInput[177];

	movzx	eax, BYTE PTR [rcx+177]
	mov	BYTE PTR [rdx+249], al

; 608  :     pbOutput[250] = pbInput[197];

	movzx	eax, BYTE PTR [rcx+197]
	mov	BYTE PTR [rdx+250], al

; 609  :     pbOutput[251] = pbInput[214];

	movzx	eax, BYTE PTR [rcx+214]
	mov	BYTE PTR [rdx+251], al

; 610  :     pbOutput[252] = pbInput[231];

	movzx	eax, BYTE PTR [rcx+231]
	mov	BYTE PTR [rdx+252], al

; 611  :     pbOutput[253] = pbInput[251];

	movzx	eax, BYTE PTR [rcx+251]
	mov	BYTE PTR [rdx+253], al

; 612  :     pbOutput[254] = pbInput[268];

	movzx	eax, BYTE PTR [rcx+268]
	mov	BYTE PTR [rdx+254], al

; 613  :     pbOutput[255] = pbInput[285];

	movzx	eax, BYTE PTR [rcx+285]
	mov	BYTE PTR [rdx+255], al

; 614  :     pbOutput[256] = pbInput[16];

	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+256], al

; 615  :     pbOutput[257] = pbInput[33];

	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+257], al

; 616  :     pbOutput[258] = pbInput[53];

	movzx	eax, BYTE PTR [rcx+53]
	mov	BYTE PTR [rdx+258], al

; 617  :     pbOutput[259] = pbInput[70];

	movzx	eax, BYTE PTR [rcx+70]
	mov	BYTE PTR [rdx+259], al

; 618  :     pbOutput[260] = pbInput[87];

	movzx	eax, BYTE PTR [rcx+87]
	mov	BYTE PTR [rdx+260], al

; 619  :     pbOutput[261] = pbInput[107];

	movzx	eax, BYTE PTR [rcx+107]
	mov	BYTE PTR [rdx+261], al

; 620  :     pbOutput[262] = pbInput[124];

	movzx	eax, BYTE PTR [rcx+124]
	mov	BYTE PTR [rdx+262], al

; 621  :     pbOutput[263] = pbInput[141];

	movzx	eax, BYTE PTR [rcx+141]
	mov	BYTE PTR [rdx+263], al

; 622  :     pbOutput[264] = pbInput[161];

	movzx	eax, BYTE PTR [rcx+161]
	mov	BYTE PTR [rdx+264], al

; 623  :     pbOutput[265] = pbInput[178];

	movzx	eax, BYTE PTR [rcx+178]
	mov	BYTE PTR [rdx+265], al

; 624  :     pbOutput[266] = pbInput[195];

	movzx	eax, BYTE PTR [rcx+195]
	mov	BYTE PTR [rdx+266], al

; 625  :     pbOutput[267] = pbInput[215];

	movzx	eax, BYTE PTR [rcx+215]
	mov	BYTE PTR [rdx+267], al

; 626  :     pbOutput[268] = pbInput[232];

	movzx	eax, BYTE PTR [rcx+232]
	mov	BYTE PTR [rdx+268], al

; 627  :     pbOutput[269] = pbInput[249];

	movzx	eax, BYTE PTR [rcx+249]
	mov	BYTE PTR [rdx+269], al

; 628  :     pbOutput[270] = pbInput[269];

	movzx	eax, BYTE PTR [rcx+269]
	mov	BYTE PTR [rdx+270], al

; 629  :     pbOutput[271] = pbInput[286];

	movzx	eax, BYTE PTR [rcx+286]
	mov	BYTE PTR [rdx+271], al

; 630  :     pbOutput[272] = pbInput[17];

	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+272], al

; 631  :     pbOutput[273] = pbInput[34];

	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+273], al

; 632  :     pbOutput[274] = pbInput[51];

	movzx	eax, BYTE PTR [rcx+51]
	mov	BYTE PTR [rdx+274], al

; 633  :     pbOutput[275] = pbInput[71];

	movzx	eax, BYTE PTR [rcx+71]
	mov	BYTE PTR [rdx+275], al

; 634  :     pbOutput[276] = pbInput[88];

	movzx	eax, BYTE PTR [rcx+88]
	mov	BYTE PTR [rdx+276], al

; 635  :     pbOutput[277] = pbInput[105];

	movzx	eax, BYTE PTR [rcx+105]
	mov	BYTE PTR [rdx+277], al

; 636  :     pbOutput[278] = pbInput[125];

	movzx	eax, BYTE PTR [rcx+125]
	mov	BYTE PTR [rdx+278], al

; 637  :     pbOutput[279] = pbInput[142];

	movzx	eax, BYTE PTR [rcx+142]
	mov	BYTE PTR [rdx+279], al

; 638  :     pbOutput[280] = pbInput[159];

	movzx	eax, BYTE PTR [rcx+159]
	mov	BYTE PTR [rdx+280], al

; 639  :     pbOutput[281] = pbInput[179];

	movzx	eax, BYTE PTR [rcx+179]
	mov	BYTE PTR [rdx+281], al

; 640  :     pbOutput[282] = pbInput[196];

	movzx	eax, BYTE PTR [rcx+196]
	mov	BYTE PTR [rdx+282], al

; 641  :     pbOutput[283] = pbInput[213];

	movzx	eax, BYTE PTR [rcx+213]
	mov	BYTE PTR [rdx+283], al

; 642  :     pbOutput[284] = pbInput[233];

	movzx	eax, BYTE PTR [rcx+233]
	mov	BYTE PTR [rdx+284], al

; 643  :     pbOutput[285] = pbInput[250];

	movzx	eax, BYTE PTR [rcx+250]
	mov	BYTE PTR [rdx+285], al

; 644  :     pbOutput[286] = pbInput[267];

	movzx	eax, BYTE PTR [rcx+267]
	mov	BYTE PTR [rdx+286], al

; 645  :     pbOutput[287] = pbInput[287];

	movzx	eax, BYTE PTR [rcx+287]
	mov	BYTE PTR [rdx+287], al

; 646  : }

	ret	0
?Deinterleave64QAM@@YAXPEAE0@Z ENDP			; Deinterleave64QAM
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Deinterleave16QAM@@YAXPEAE0@Z
_TEXT	SEGMENT
pbInput$ = 8
pbOutput$ = 16
?Deinterleave16QAM@@YAXPEAE0@Z PROC			; Deinterleave16QAM, COMDAT

; 161  :     pbOutput[0] = pbInput[0];

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 162  :     pbOutput[1] = pbInput[13];

	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+1], al

; 163  :     pbOutput[2] = pbInput[24];

	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+2], al

; 164  :     pbOutput[3] = pbInput[37];

	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+3], al

; 165  :     pbOutput[4] = pbInput[48];

	movzx	eax, BYTE PTR [rcx+48]
	mov	BYTE PTR [rdx+4], al

; 166  :     pbOutput[5] = pbInput[61];

	movzx	eax, BYTE PTR [rcx+61]
	mov	BYTE PTR [rdx+5], al

; 167  :     pbOutput[6] = pbInput[72];

	movzx	eax, BYTE PTR [rcx+72]
	mov	BYTE PTR [rdx+6], al

; 168  :     pbOutput[7] = pbInput[85];

	movzx	eax, BYTE PTR [rcx+85]
	mov	BYTE PTR [rdx+7], al

; 169  :     pbOutput[8] = pbInput[96];

	movzx	eax, BYTE PTR [rcx+96]
	mov	BYTE PTR [rdx+8], al

; 170  :     pbOutput[9] = pbInput[109];

	movzx	eax, BYTE PTR [rcx+109]
	mov	BYTE PTR [rdx+9], al

; 171  :     pbOutput[10] = pbInput[120];

	movzx	eax, BYTE PTR [rcx+120]
	mov	BYTE PTR [rdx+10], al

; 172  :     pbOutput[11] = pbInput[133];

	movzx	eax, BYTE PTR [rcx+133]
	mov	BYTE PTR [rdx+11], al

; 173  :     pbOutput[12] = pbInput[144];

	movzx	eax, BYTE PTR [rcx+144]
	mov	BYTE PTR [rdx+12], al

; 174  :     pbOutput[13] = pbInput[157];

	movzx	eax, BYTE PTR [rcx+157]
	mov	BYTE PTR [rdx+13], al

; 175  :     pbOutput[14] = pbInput[168];

	movzx	eax, BYTE PTR [rcx+168]
	mov	BYTE PTR [rdx+14], al

; 176  :     pbOutput[15] = pbInput[181];

	movzx	eax, BYTE PTR [rcx+181]
	mov	BYTE PTR [rdx+15], al

; 177  :     pbOutput[16] = pbInput[1];

	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al

; 178  :     pbOutput[17] = pbInput[12];

	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+17], al

; 179  :     pbOutput[18] = pbInput[25];

	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+18], al

; 180  :     pbOutput[19] = pbInput[36];

	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+19], al

; 181  :     pbOutput[20] = pbInput[49];

	movzx	eax, BYTE PTR [rcx+49]
	mov	BYTE PTR [rdx+20], al

; 182  :     pbOutput[21] = pbInput[60];

	movzx	eax, BYTE PTR [rcx+60]
	mov	BYTE PTR [rdx+21], al

; 183  :     pbOutput[22] = pbInput[73];

	movzx	eax, BYTE PTR [rcx+73]
	mov	BYTE PTR [rdx+22], al

; 184  :     pbOutput[23] = pbInput[84];

	movzx	eax, BYTE PTR [rcx+84]
	mov	BYTE PTR [rdx+23], al

; 185  :     pbOutput[24] = pbInput[97];

	movzx	eax, BYTE PTR [rcx+97]
	mov	BYTE PTR [rdx+24], al

; 186  :     pbOutput[25] = pbInput[108];

	movzx	eax, BYTE PTR [rcx+108]
	mov	BYTE PTR [rdx+25], al

; 187  :     pbOutput[26] = pbInput[121];

	movzx	eax, BYTE PTR [rcx+121]
	mov	BYTE PTR [rdx+26], al

; 188  :     pbOutput[27] = pbInput[132];

	movzx	eax, BYTE PTR [rcx+132]
	mov	BYTE PTR [rdx+27], al

; 189  :     pbOutput[28] = pbInput[145];

	movzx	eax, BYTE PTR [rcx+145]
	mov	BYTE PTR [rdx+28], al

; 190  :     pbOutput[29] = pbInput[156];

	movzx	eax, BYTE PTR [rcx+156]
	mov	BYTE PTR [rdx+29], al

; 191  :     pbOutput[30] = pbInput[169];

	movzx	eax, BYTE PTR [rcx+169]
	mov	BYTE PTR [rdx+30], al

; 192  :     pbOutput[31] = pbInput[180];

	movzx	eax, BYTE PTR [rcx+180]
	mov	BYTE PTR [rdx+31], al

; 193  :     pbOutput[32] = pbInput[2];

	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al

; 194  :     pbOutput[33] = pbInput[15];

	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+33], al

; 195  :     pbOutput[34] = pbInput[26];

	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+34], al

; 196  :     pbOutput[35] = pbInput[39];

	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+35], al

; 197  :     pbOutput[36] = pbInput[50];

	movzx	eax, BYTE PTR [rcx+50]
	mov	BYTE PTR [rdx+36], al

; 198  :     pbOutput[37] = pbInput[63];

	movzx	eax, BYTE PTR [rcx+63]
	mov	BYTE PTR [rdx+37], al

; 199  :     pbOutput[38] = pbInput[74];

	movzx	eax, BYTE PTR [rcx+74]
	mov	BYTE PTR [rdx+38], al

; 200  :     pbOutput[39] = pbInput[87];

	movzx	eax, BYTE PTR [rcx+87]
	mov	BYTE PTR [rdx+39], al

; 201  :     pbOutput[40] = pbInput[98];

	movzx	eax, BYTE PTR [rcx+98]
	mov	BYTE PTR [rdx+40], al

; 202  :     pbOutput[41] = pbInput[111];

	movzx	eax, BYTE PTR [rcx+111]
	mov	BYTE PTR [rdx+41], al

; 203  :     pbOutput[42] = pbInput[122];

	movzx	eax, BYTE PTR [rcx+122]
	mov	BYTE PTR [rdx+42], al

; 204  :     pbOutput[43] = pbInput[135];

	movzx	eax, BYTE PTR [rcx+135]
	mov	BYTE PTR [rdx+43], al

; 205  :     pbOutput[44] = pbInput[146];

	movzx	eax, BYTE PTR [rcx+146]
	mov	BYTE PTR [rdx+44], al

; 206  :     pbOutput[45] = pbInput[159];

	movzx	eax, BYTE PTR [rcx+159]
	mov	BYTE PTR [rdx+45], al

; 207  :     pbOutput[46] = pbInput[170];

	movzx	eax, BYTE PTR [rcx+170]
	mov	BYTE PTR [rdx+46], al

; 208  :     pbOutput[47] = pbInput[183];

	movzx	eax, BYTE PTR [rcx+183]
	mov	BYTE PTR [rdx+47], al

; 209  :     pbOutput[48] = pbInput[3];

	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+48], al

; 210  :     pbOutput[49] = pbInput[14];

	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+49], al

; 211  :     pbOutput[50] = pbInput[27];

	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+50], al

; 212  :     pbOutput[51] = pbInput[38];

	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+51], al

; 213  :     pbOutput[52] = pbInput[51];

	movzx	eax, BYTE PTR [rcx+51]
	mov	BYTE PTR [rdx+52], al

; 214  :     pbOutput[53] = pbInput[62];

	movzx	eax, BYTE PTR [rcx+62]
	mov	BYTE PTR [rdx+53], al

; 215  :     pbOutput[54] = pbInput[75];

	movzx	eax, BYTE PTR [rcx+75]
	mov	BYTE PTR [rdx+54], al

; 216  :     pbOutput[55] = pbInput[86];

	movzx	eax, BYTE PTR [rcx+86]
	mov	BYTE PTR [rdx+55], al

; 217  :     pbOutput[56] = pbInput[99];

	movzx	eax, BYTE PTR [rcx+99]
	mov	BYTE PTR [rdx+56], al

; 218  :     pbOutput[57] = pbInput[110];

	movzx	eax, BYTE PTR [rcx+110]
	mov	BYTE PTR [rdx+57], al

; 219  :     pbOutput[58] = pbInput[123];

	movzx	eax, BYTE PTR [rcx+123]
	mov	BYTE PTR [rdx+58], al

; 220  :     pbOutput[59] = pbInput[134];

	movzx	eax, BYTE PTR [rcx+134]
	mov	BYTE PTR [rdx+59], al

; 221  :     pbOutput[60] = pbInput[147];

	movzx	eax, BYTE PTR [rcx+147]
	mov	BYTE PTR [rdx+60], al

; 222  :     pbOutput[61] = pbInput[158];

	movzx	eax, BYTE PTR [rcx+158]
	mov	BYTE PTR [rdx+61], al

; 223  :     pbOutput[62] = pbInput[171];

	movzx	eax, BYTE PTR [rcx+171]
	mov	BYTE PTR [rdx+62], al

; 224  :     pbOutput[63] = pbInput[182];

	movzx	eax, BYTE PTR [rcx+182]
	mov	BYTE PTR [rdx+63], al

; 225  :     pbOutput[64] = pbInput[4];

	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+64], al

; 226  :     pbOutput[65] = pbInput[17];

	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+65], al

; 227  :     pbOutput[66] = pbInput[28];

	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+66], al

; 228  :     pbOutput[67] = pbInput[41];

	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+67], al

; 229  :     pbOutput[68] = pbInput[52];

	movzx	eax, BYTE PTR [rcx+52]
	mov	BYTE PTR [rdx+68], al

; 230  :     pbOutput[69] = pbInput[65];

	movzx	eax, BYTE PTR [rcx+65]
	mov	BYTE PTR [rdx+69], al

; 231  :     pbOutput[70] = pbInput[76];

	movzx	eax, BYTE PTR [rcx+76]
	mov	BYTE PTR [rdx+70], al

; 232  :     pbOutput[71] = pbInput[89];

	movzx	eax, BYTE PTR [rcx+89]
	mov	BYTE PTR [rdx+71], al

; 233  :     pbOutput[72] = pbInput[100];

	movzx	eax, BYTE PTR [rcx+100]
	mov	BYTE PTR [rdx+72], al

; 234  :     pbOutput[73] = pbInput[113];

	movzx	eax, BYTE PTR [rcx+113]
	mov	BYTE PTR [rdx+73], al

; 235  :     pbOutput[74] = pbInput[124];

	movzx	eax, BYTE PTR [rcx+124]
	mov	BYTE PTR [rdx+74], al

; 236  :     pbOutput[75] = pbInput[137];

	movzx	eax, BYTE PTR [rcx+137]
	mov	BYTE PTR [rdx+75], al

; 237  :     pbOutput[76] = pbInput[148];

	movzx	eax, BYTE PTR [rcx+148]
	mov	BYTE PTR [rdx+76], al

; 238  :     pbOutput[77] = pbInput[161];

	movzx	eax, BYTE PTR [rcx+161]
	mov	BYTE PTR [rdx+77], al

; 239  :     pbOutput[78] = pbInput[172];

	movzx	eax, BYTE PTR [rcx+172]
	mov	BYTE PTR [rdx+78], al

; 240  :     pbOutput[79] = pbInput[185];

	movzx	eax, BYTE PTR [rcx+185]
	mov	BYTE PTR [rdx+79], al

; 241  :     pbOutput[80] = pbInput[5];

	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+80], al

; 242  :     pbOutput[81] = pbInput[16];

	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+81], al

; 243  :     pbOutput[82] = pbInput[29];

	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+82], al

; 244  :     pbOutput[83] = pbInput[40];

	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+83], al

; 245  :     pbOutput[84] = pbInput[53];

	movzx	eax, BYTE PTR [rcx+53]
	mov	BYTE PTR [rdx+84], al

; 246  :     pbOutput[85] = pbInput[64];

	movzx	eax, BYTE PTR [rcx+64]
	mov	BYTE PTR [rdx+85], al

; 247  :     pbOutput[86] = pbInput[77];

	movzx	eax, BYTE PTR [rcx+77]
	mov	BYTE PTR [rdx+86], al

; 248  :     pbOutput[87] = pbInput[88];

	movzx	eax, BYTE PTR [rcx+88]
	mov	BYTE PTR [rdx+87], al

; 249  :     pbOutput[88] = pbInput[101];

	movzx	eax, BYTE PTR [rcx+101]
	mov	BYTE PTR [rdx+88], al

; 250  :     pbOutput[89] = pbInput[112];

	movzx	eax, BYTE PTR [rcx+112]
	mov	BYTE PTR [rdx+89], al

; 251  :     pbOutput[90] = pbInput[125];

	movzx	eax, BYTE PTR [rcx+125]
	mov	BYTE PTR [rdx+90], al

; 252  :     pbOutput[91] = pbInput[136];

	movzx	eax, BYTE PTR [rcx+136]
	mov	BYTE PTR [rdx+91], al

; 253  :     pbOutput[92] = pbInput[149];

	movzx	eax, BYTE PTR [rcx+149]
	mov	BYTE PTR [rdx+92], al

; 254  :     pbOutput[93] = pbInput[160];

	movzx	eax, BYTE PTR [rcx+160]
	mov	BYTE PTR [rdx+93], al

; 255  :     pbOutput[94] = pbInput[173];

	movzx	eax, BYTE PTR [rcx+173]
	mov	BYTE PTR [rdx+94], al

; 256  :     pbOutput[95] = pbInput[184];

	movzx	eax, BYTE PTR [rcx+184]
	mov	BYTE PTR [rdx+95], al

; 257  :     pbOutput[96] = pbInput[6];

	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+96], al

; 258  :     pbOutput[97] = pbInput[19];

	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+97], al

; 259  :     pbOutput[98] = pbInput[30];

	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+98], al

; 260  :     pbOutput[99] = pbInput[43];

	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+99], al

; 261  :     pbOutput[100] = pbInput[54];

	movzx	eax, BYTE PTR [rcx+54]
	mov	BYTE PTR [rdx+100], al

; 262  :     pbOutput[101] = pbInput[67];

	movzx	eax, BYTE PTR [rcx+67]
	mov	BYTE PTR [rdx+101], al

; 263  :     pbOutput[102] = pbInput[78];

	movzx	eax, BYTE PTR [rcx+78]
	mov	BYTE PTR [rdx+102], al

; 264  :     pbOutput[103] = pbInput[91];

	movzx	eax, BYTE PTR [rcx+91]
	mov	BYTE PTR [rdx+103], al

; 265  :     pbOutput[104] = pbInput[102];

	movzx	eax, BYTE PTR [rcx+102]
	mov	BYTE PTR [rdx+104], al

; 266  :     pbOutput[105] = pbInput[115];

	movzx	eax, BYTE PTR [rcx+115]
	mov	BYTE PTR [rdx+105], al

; 267  :     pbOutput[106] = pbInput[126];

	movzx	eax, BYTE PTR [rcx+126]
	mov	BYTE PTR [rdx+106], al

; 268  :     pbOutput[107] = pbInput[139];

	movzx	eax, BYTE PTR [rcx+139]
	mov	BYTE PTR [rdx+107], al

; 269  :     pbOutput[108] = pbInput[150];

	movzx	eax, BYTE PTR [rcx+150]
	mov	BYTE PTR [rdx+108], al

; 270  :     pbOutput[109] = pbInput[163];

	movzx	eax, BYTE PTR [rcx+163]
	mov	BYTE PTR [rdx+109], al

; 271  :     pbOutput[110] = pbInput[174];

	movzx	eax, BYTE PTR [rcx+174]
	mov	BYTE PTR [rdx+110], al

; 272  :     pbOutput[111] = pbInput[187];

	movzx	eax, BYTE PTR [rcx+187]
	mov	BYTE PTR [rdx+111], al

; 273  :     pbOutput[112] = pbInput[7];

	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+112], al

; 274  :     pbOutput[113] = pbInput[18];

	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+113], al

; 275  :     pbOutput[114] = pbInput[31];

	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+114], al

; 276  :     pbOutput[115] = pbInput[42];

	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+115], al

; 277  :     pbOutput[116] = pbInput[55];

	movzx	eax, BYTE PTR [rcx+55]
	mov	BYTE PTR [rdx+116], al

; 278  :     pbOutput[117] = pbInput[66];

	movzx	eax, BYTE PTR [rcx+66]
	mov	BYTE PTR [rdx+117], al

; 279  :     pbOutput[118] = pbInput[79];

	movzx	eax, BYTE PTR [rcx+79]
	mov	BYTE PTR [rdx+118], al

; 280  :     pbOutput[119] = pbInput[90];

	movzx	eax, BYTE PTR [rcx+90]
	mov	BYTE PTR [rdx+119], al

; 281  :     pbOutput[120] = pbInput[103];

	movzx	eax, BYTE PTR [rcx+103]
	mov	BYTE PTR [rdx+120], al

; 282  :     pbOutput[121] = pbInput[114];

	movzx	eax, BYTE PTR [rcx+114]
	mov	BYTE PTR [rdx+121], al

; 283  :     pbOutput[122] = pbInput[127];

	movzx	eax, BYTE PTR [rcx+127]
	mov	BYTE PTR [rdx+122], al

; 284  :     pbOutput[123] = pbInput[138];

	movzx	eax, BYTE PTR [rcx+138]
	mov	BYTE PTR [rdx+123], al

; 285  :     pbOutput[124] = pbInput[151];

	movzx	eax, BYTE PTR [rcx+151]
	mov	BYTE PTR [rdx+124], al

; 286  :     pbOutput[125] = pbInput[162];

	movzx	eax, BYTE PTR [rcx+162]
	mov	BYTE PTR [rdx+125], al

; 287  :     pbOutput[126] = pbInput[175];

	movzx	eax, BYTE PTR [rcx+175]
	mov	BYTE PTR [rdx+126], al

; 288  :     pbOutput[127] = pbInput[186];

	movzx	eax, BYTE PTR [rcx+186]
	mov	BYTE PTR [rdx+127], al

; 289  :     pbOutput[128] = pbInput[8];

	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+128], al

; 290  :     pbOutput[129] = pbInput[21];

	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+129], al

; 291  :     pbOutput[130] = pbInput[32];

	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+130], al

; 292  :     pbOutput[131] = pbInput[45];

	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+131], al

; 293  :     pbOutput[132] = pbInput[56];

	movzx	eax, BYTE PTR [rcx+56]
	mov	BYTE PTR [rdx+132], al

; 294  :     pbOutput[133] = pbInput[69];

	movzx	eax, BYTE PTR [rcx+69]
	mov	BYTE PTR [rdx+133], al

; 295  :     pbOutput[134] = pbInput[80];

	movzx	eax, BYTE PTR [rcx+80]
	mov	BYTE PTR [rdx+134], al

; 296  :     pbOutput[135] = pbInput[93];

	movzx	eax, BYTE PTR [rcx+93]
	mov	BYTE PTR [rdx+135], al

; 297  :     pbOutput[136] = pbInput[104];

	movzx	eax, BYTE PTR [rcx+104]
	mov	BYTE PTR [rdx+136], al

; 298  :     pbOutput[137] = pbInput[117];

	movzx	eax, BYTE PTR [rcx+117]
	mov	BYTE PTR [rdx+137], al

; 299  :     pbOutput[138] = pbInput[128];

	movzx	eax, BYTE PTR [rcx+128]
	mov	BYTE PTR [rdx+138], al

; 300  :     pbOutput[139] = pbInput[141];

	movzx	eax, BYTE PTR [rcx+141]
	mov	BYTE PTR [rdx+139], al

; 301  :     pbOutput[140] = pbInput[152];

	movzx	eax, BYTE PTR [rcx+152]
	mov	BYTE PTR [rdx+140], al

; 302  :     pbOutput[141] = pbInput[165];

	movzx	eax, BYTE PTR [rcx+165]
	mov	BYTE PTR [rdx+141], al

; 303  :     pbOutput[142] = pbInput[176];

	movzx	eax, BYTE PTR [rcx+176]
	mov	BYTE PTR [rdx+142], al

; 304  :     pbOutput[143] = pbInput[189];

	movzx	eax, BYTE PTR [rcx+189]
	mov	BYTE PTR [rdx+143], al

; 305  :     pbOutput[144] = pbInput[9];

	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+144], al

; 306  :     pbOutput[145] = pbInput[20];

	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+145], al

; 307  :     pbOutput[146] = pbInput[33];

	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+146], al

; 308  :     pbOutput[147] = pbInput[44];

	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+147], al

; 309  :     pbOutput[148] = pbInput[57];

	movzx	eax, BYTE PTR [rcx+57]
	mov	BYTE PTR [rdx+148], al

; 310  :     pbOutput[149] = pbInput[68];

	movzx	eax, BYTE PTR [rcx+68]
	mov	BYTE PTR [rdx+149], al

; 311  :     pbOutput[150] = pbInput[81];

	movzx	eax, BYTE PTR [rcx+81]
	mov	BYTE PTR [rdx+150], al

; 312  :     pbOutput[151] = pbInput[92];

	movzx	eax, BYTE PTR [rcx+92]
	mov	BYTE PTR [rdx+151], al

; 313  :     pbOutput[152] = pbInput[105];

	movzx	eax, BYTE PTR [rcx+105]
	mov	BYTE PTR [rdx+152], al

; 314  :     pbOutput[153] = pbInput[116];

	movzx	eax, BYTE PTR [rcx+116]
	mov	BYTE PTR [rdx+153], al

; 315  :     pbOutput[154] = pbInput[129];

	movzx	eax, BYTE PTR [rcx+129]
	mov	BYTE PTR [rdx+154], al

; 316  :     pbOutput[155] = pbInput[140];

	movzx	eax, BYTE PTR [rcx+140]
	mov	BYTE PTR [rdx+155], al

; 317  :     pbOutput[156] = pbInput[153];

	movzx	eax, BYTE PTR [rcx+153]
	mov	BYTE PTR [rdx+156], al

; 318  :     pbOutput[157] = pbInput[164];

	movzx	eax, BYTE PTR [rcx+164]
	mov	BYTE PTR [rdx+157], al

; 319  :     pbOutput[158] = pbInput[177];

	movzx	eax, BYTE PTR [rcx+177]
	mov	BYTE PTR [rdx+158], al

; 320  :     pbOutput[159] = pbInput[188];

	movzx	eax, BYTE PTR [rcx+188]
	mov	BYTE PTR [rdx+159], al

; 321  :     pbOutput[160] = pbInput[10];

	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+160], al

; 322  :     pbOutput[161] = pbInput[23];

	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+161], al

; 323  :     pbOutput[162] = pbInput[34];

	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+162], al

; 324  :     pbOutput[163] = pbInput[47];

	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+163], al

; 325  :     pbOutput[164] = pbInput[58];

	movzx	eax, BYTE PTR [rcx+58]
	mov	BYTE PTR [rdx+164], al

; 326  :     pbOutput[165] = pbInput[71];

	movzx	eax, BYTE PTR [rcx+71]
	mov	BYTE PTR [rdx+165], al

; 327  :     pbOutput[166] = pbInput[82];

	movzx	eax, BYTE PTR [rcx+82]
	mov	BYTE PTR [rdx+166], al

; 328  :     pbOutput[167] = pbInput[95];

	movzx	eax, BYTE PTR [rcx+95]
	mov	BYTE PTR [rdx+167], al

; 329  :     pbOutput[168] = pbInput[106];

	movzx	eax, BYTE PTR [rcx+106]
	mov	BYTE PTR [rdx+168], al

; 330  :     pbOutput[169] = pbInput[119];

	movzx	eax, BYTE PTR [rcx+119]
	mov	BYTE PTR [rdx+169], al

; 331  :     pbOutput[170] = pbInput[130];

	movzx	eax, BYTE PTR [rcx+130]
	mov	BYTE PTR [rdx+170], al

; 332  :     pbOutput[171] = pbInput[143];

	movzx	eax, BYTE PTR [rcx+143]
	mov	BYTE PTR [rdx+171], al

; 333  :     pbOutput[172] = pbInput[154];

	movzx	eax, BYTE PTR [rcx+154]
	mov	BYTE PTR [rdx+172], al

; 334  :     pbOutput[173] = pbInput[167];

	movzx	eax, BYTE PTR [rcx+167]
	mov	BYTE PTR [rdx+173], al

; 335  :     pbOutput[174] = pbInput[178];

	movzx	eax, BYTE PTR [rcx+178]
	mov	BYTE PTR [rdx+174], al

; 336  :     pbOutput[175] = pbInput[191];

	movzx	eax, BYTE PTR [rcx+191]
	mov	BYTE PTR [rdx+175], al

; 337  :     pbOutput[176] = pbInput[11];

	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+176], al

; 338  :     pbOutput[177] = pbInput[22];

	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+177], al

; 339  :     pbOutput[178] = pbInput[35];

	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+178], al

; 340  :     pbOutput[179] = pbInput[46];

	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+179], al

; 341  :     pbOutput[180] = pbInput[59];

	movzx	eax, BYTE PTR [rcx+59]
	mov	BYTE PTR [rdx+180], al

; 342  :     pbOutput[181] = pbInput[70];

	movzx	eax, BYTE PTR [rcx+70]
	mov	BYTE PTR [rdx+181], al

; 343  :     pbOutput[182] = pbInput[83];

	movzx	eax, BYTE PTR [rcx+83]
	mov	BYTE PTR [rdx+182], al

; 344  :     pbOutput[183] = pbInput[94];

	movzx	eax, BYTE PTR [rcx+94]
	mov	BYTE PTR [rdx+183], al

; 345  :     pbOutput[184] = pbInput[107];

	movzx	eax, BYTE PTR [rcx+107]
	mov	BYTE PTR [rdx+184], al

; 346  :     pbOutput[185] = pbInput[118];

	movzx	eax, BYTE PTR [rcx+118]
	mov	BYTE PTR [rdx+185], al

; 347  :     pbOutput[186] = pbInput[131];

	movzx	eax, BYTE PTR [rcx+131]
	mov	BYTE PTR [rdx+186], al

; 348  :     pbOutput[187] = pbInput[142];

	movzx	eax, BYTE PTR [rcx+142]
	mov	BYTE PTR [rdx+187], al

; 349  :     pbOutput[188] = pbInput[155];

	movzx	eax, BYTE PTR [rcx+155]
	mov	BYTE PTR [rdx+188], al

; 350  :     pbOutput[189] = pbInput[166];

	movzx	eax, BYTE PTR [rcx+166]
	mov	BYTE PTR [rdx+189], al

; 351  :     pbOutput[190] = pbInput[179];

	movzx	eax, BYTE PTR [rcx+179]
	mov	BYTE PTR [rdx+190], al

; 352  :     pbOutput[191] = pbInput[190];

	movzx	eax, BYTE PTR [rcx+190]
	mov	BYTE PTR [rdx+191], al

; 353  : }

	ret	0
?Deinterleave16QAM@@YAXPEAE0@Z ENDP			; Deinterleave16QAM
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?DeinterleaveQPSK@@YAXPEAE0@Z
_TEXT	SEGMENT
pbInput$ = 8
pbOutput$ = 16
?DeinterleaveQPSK@@YAXPEAE0@Z PROC			; DeinterleaveQPSK, COMDAT

; 60   :     pbOutput[0] = pbInput[0];

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 61   :     pbOutput[1] = pbInput[6];

	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+1], al

; 62   :     pbOutput[2] = pbInput[12];

	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+2], al

; 63   :     pbOutput[3] = pbInput[18];

	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+3], al

; 64   :     pbOutput[4] = pbInput[24];

	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+4], al

; 65   :     pbOutput[5] = pbInput[30];

	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+5], al

; 66   :     pbOutput[6] = pbInput[36];

	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+6], al

; 67   :     pbOutput[7] = pbInput[42];

	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+7], al

; 68   :     pbOutput[8] = pbInput[48];

	movzx	eax, BYTE PTR [rcx+48]
	mov	BYTE PTR [rdx+8], al

; 69   :     pbOutput[9] = pbInput[54];

	movzx	eax, BYTE PTR [rcx+54]
	mov	BYTE PTR [rdx+9], al

; 70   :     pbOutput[10] = pbInput[60];

	movzx	eax, BYTE PTR [rcx+60]
	mov	BYTE PTR [rdx+10], al

; 71   :     pbOutput[11] = pbInput[66];

	movzx	eax, BYTE PTR [rcx+66]
	mov	BYTE PTR [rdx+11], al

; 72   :     pbOutput[12] = pbInput[72];

	movzx	eax, BYTE PTR [rcx+72]
	mov	BYTE PTR [rdx+12], al

; 73   :     pbOutput[13] = pbInput[78];

	movzx	eax, BYTE PTR [rcx+78]
	mov	BYTE PTR [rdx+13], al

; 74   :     pbOutput[14] = pbInput[84];

	movzx	eax, BYTE PTR [rcx+84]
	mov	BYTE PTR [rdx+14], al

; 75   :     pbOutput[15] = pbInput[90];

	movzx	eax, BYTE PTR [rcx+90]
	mov	BYTE PTR [rdx+15], al

; 76   :     pbOutput[16] = pbInput[1];

	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al

; 77   :     pbOutput[17] = pbInput[7];

	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+17], al

; 78   :     pbOutput[18] = pbInput[13];

	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+18], al

; 79   :     pbOutput[19] = pbInput[19];

	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+19], al

; 80   :     pbOutput[20] = pbInput[25];

	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+20], al

; 81   :     pbOutput[21] = pbInput[31];

	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+21], al

; 82   :     pbOutput[22] = pbInput[37];

	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+22], al

; 83   :     pbOutput[23] = pbInput[43];

	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+23], al

; 84   :     pbOutput[24] = pbInput[49];

	movzx	eax, BYTE PTR [rcx+49]
	mov	BYTE PTR [rdx+24], al

; 85   :     pbOutput[25] = pbInput[55];

	movzx	eax, BYTE PTR [rcx+55]
	mov	BYTE PTR [rdx+25], al

; 86   :     pbOutput[26] = pbInput[61];

	movzx	eax, BYTE PTR [rcx+61]
	mov	BYTE PTR [rdx+26], al

; 87   :     pbOutput[27] = pbInput[67];

	movzx	eax, BYTE PTR [rcx+67]
	mov	BYTE PTR [rdx+27], al

; 88   :     pbOutput[28] = pbInput[73];

	movzx	eax, BYTE PTR [rcx+73]
	mov	BYTE PTR [rdx+28], al

; 89   :     pbOutput[29] = pbInput[79];

	movzx	eax, BYTE PTR [rcx+79]
	mov	BYTE PTR [rdx+29], al

; 90   :     pbOutput[30] = pbInput[85];

	movzx	eax, BYTE PTR [rcx+85]
	mov	BYTE PTR [rdx+30], al

; 91   :     pbOutput[31] = pbInput[91];

	movzx	eax, BYTE PTR [rcx+91]
	mov	BYTE PTR [rdx+31], al

; 92   :     pbOutput[32] = pbInput[2];

	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al

; 93   :     pbOutput[33] = pbInput[8];

	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+33], al

; 94   :     pbOutput[34] = pbInput[14];

	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+34], al

; 95   :     pbOutput[35] = pbInput[20];

	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+35], al

; 96   :     pbOutput[36] = pbInput[26];

	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+36], al

; 97   :     pbOutput[37] = pbInput[32];

	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+37], al

; 98   :     pbOutput[38] = pbInput[38];

	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+38], al

; 99   :     pbOutput[39] = pbInput[44];

	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+39], al

; 100  :     pbOutput[40] = pbInput[50];

	movzx	eax, BYTE PTR [rcx+50]
	mov	BYTE PTR [rdx+40], al

; 101  :     pbOutput[41] = pbInput[56];

	movzx	eax, BYTE PTR [rcx+56]
	mov	BYTE PTR [rdx+41], al

; 102  :     pbOutput[42] = pbInput[62];

	movzx	eax, BYTE PTR [rcx+62]
	mov	BYTE PTR [rdx+42], al

; 103  :     pbOutput[43] = pbInput[68];

	movzx	eax, BYTE PTR [rcx+68]
	mov	BYTE PTR [rdx+43], al

; 104  :     pbOutput[44] = pbInput[74];

	movzx	eax, BYTE PTR [rcx+74]
	mov	BYTE PTR [rdx+44], al

; 105  :     pbOutput[45] = pbInput[80];

	movzx	eax, BYTE PTR [rcx+80]
	mov	BYTE PTR [rdx+45], al

; 106  :     pbOutput[46] = pbInput[86];

	movzx	eax, BYTE PTR [rcx+86]
	mov	BYTE PTR [rdx+46], al

; 107  :     pbOutput[47] = pbInput[92];

	movzx	eax, BYTE PTR [rcx+92]
	mov	BYTE PTR [rdx+47], al

; 108  :     pbOutput[48] = pbInput[3];

	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+48], al

; 109  :     pbOutput[49] = pbInput[9];

	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+49], al

; 110  :     pbOutput[50] = pbInput[15];

	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+50], al

; 111  :     pbOutput[51] = pbInput[21];

	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+51], al

; 112  :     pbOutput[52] = pbInput[27];

	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+52], al

; 113  :     pbOutput[53] = pbInput[33];

	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+53], al

; 114  :     pbOutput[54] = pbInput[39];

	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+54], al

; 115  :     pbOutput[55] = pbInput[45];

	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+55], al

; 116  :     pbOutput[56] = pbInput[51];

	movzx	eax, BYTE PTR [rcx+51]
	mov	BYTE PTR [rdx+56], al

; 117  :     pbOutput[57] = pbInput[57];

	movzx	eax, BYTE PTR [rcx+57]
	mov	BYTE PTR [rdx+57], al

; 118  :     pbOutput[58] = pbInput[63];

	movzx	eax, BYTE PTR [rcx+63]
	mov	BYTE PTR [rdx+58], al

; 119  :     pbOutput[59] = pbInput[69];

	movzx	eax, BYTE PTR [rcx+69]
	mov	BYTE PTR [rdx+59], al

; 120  :     pbOutput[60] = pbInput[75];

	movzx	eax, BYTE PTR [rcx+75]
	mov	BYTE PTR [rdx+60], al

; 121  :     pbOutput[61] = pbInput[81];

	movzx	eax, BYTE PTR [rcx+81]
	mov	BYTE PTR [rdx+61], al

; 122  :     pbOutput[62] = pbInput[87];

	movzx	eax, BYTE PTR [rcx+87]
	mov	BYTE PTR [rdx+62], al

; 123  :     pbOutput[63] = pbInput[93];

	movzx	eax, BYTE PTR [rcx+93]
	mov	BYTE PTR [rdx+63], al

; 124  :     pbOutput[64] = pbInput[4];

	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+64], al

; 125  :     pbOutput[65] = pbInput[10];

	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+65], al

; 126  :     pbOutput[66] = pbInput[16];

	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+66], al

; 127  :     pbOutput[67] = pbInput[22];

	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+67], al

; 128  :     pbOutput[68] = pbInput[28];

	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+68], al

; 129  :     pbOutput[69] = pbInput[34];

	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+69], al

; 130  :     pbOutput[70] = pbInput[40];

	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+70], al

; 131  :     pbOutput[71] = pbInput[46];

	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+71], al

; 132  :     pbOutput[72] = pbInput[52];

	movzx	eax, BYTE PTR [rcx+52]
	mov	BYTE PTR [rdx+72], al

; 133  :     pbOutput[73] = pbInput[58];

	movzx	eax, BYTE PTR [rcx+58]
	mov	BYTE PTR [rdx+73], al

; 134  :     pbOutput[74] = pbInput[64];

	movzx	eax, BYTE PTR [rcx+64]
	mov	BYTE PTR [rdx+74], al

; 135  :     pbOutput[75] = pbInput[70];

	movzx	eax, BYTE PTR [rcx+70]
	mov	BYTE PTR [rdx+75], al

; 136  :     pbOutput[76] = pbInput[76];

	movzx	eax, BYTE PTR [rcx+76]
	mov	BYTE PTR [rdx+76], al

; 137  :     pbOutput[77] = pbInput[82];

	movzx	eax, BYTE PTR [rcx+82]
	mov	BYTE PTR [rdx+77], al

; 138  :     pbOutput[78] = pbInput[88];

	movzx	eax, BYTE PTR [rcx+88]
	mov	BYTE PTR [rdx+78], al

; 139  :     pbOutput[79] = pbInput[94];

	movzx	eax, BYTE PTR [rcx+94]
	mov	BYTE PTR [rdx+79], al

; 140  :     pbOutput[80] = pbInput[5];

	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+80], al

; 141  :     pbOutput[81] = pbInput[11];

	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+81], al

; 142  :     pbOutput[82] = pbInput[17];

	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+82], al

; 143  :     pbOutput[83] = pbInput[23];

	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+83], al

; 144  :     pbOutput[84] = pbInput[29];

	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+84], al

; 145  :     pbOutput[85] = pbInput[35];

	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+85], al

; 146  :     pbOutput[86] = pbInput[41];

	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+86], al

; 147  :     pbOutput[87] = pbInput[47];

	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+87], al

; 148  :     pbOutput[88] = pbInput[53];

	movzx	eax, BYTE PTR [rcx+53]
	mov	BYTE PTR [rdx+88], al

; 149  :     pbOutput[89] = pbInput[59];

	movzx	eax, BYTE PTR [rcx+59]
	mov	BYTE PTR [rdx+89], al

; 150  :     pbOutput[90] = pbInput[65];

	movzx	eax, BYTE PTR [rcx+65]
	mov	BYTE PTR [rdx+90], al

; 151  :     pbOutput[91] = pbInput[71];

	movzx	eax, BYTE PTR [rcx+71]
	mov	BYTE PTR [rdx+91], al

; 152  :     pbOutput[92] = pbInput[77];

	movzx	eax, BYTE PTR [rcx+77]
	mov	BYTE PTR [rdx+92], al

; 153  :     pbOutput[93] = pbInput[83];

	movzx	eax, BYTE PTR [rcx+83]
	mov	BYTE PTR [rdx+93], al

; 154  :     pbOutput[94] = pbInput[89];

	movzx	eax, BYTE PTR [rcx+89]
	mov	BYTE PTR [rdx+94], al

; 155  :     pbOutput[95] = pbInput[95];

	movzx	eax, BYTE PTR [rcx+95]
	mov	BYTE PTR [rdx+95], al

; 156  : }

	ret	0
?DeinterleaveQPSK@@YAXPEAE0@Z ENDP			; DeinterleaveQPSK
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?DeinterleaveBPSK@@YAXPEAE0@Z
_TEXT	SEGMENT
pbInput$ = 8
pbOutput$ = 16
?DeinterleaveBPSK@@YAXPEAE0@Z PROC			; DeinterleaveBPSK, COMDAT

; 7    :     pbOutput[0] = pbInput[0];

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al

; 8    :     pbOutput[1] = pbInput[3];

	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+1], al

; 9    :     pbOutput[2] = pbInput[6];

	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+2], al

; 10   :     pbOutput[3] = pbInput[9];

	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+3], al

; 11   :     pbOutput[4] = pbInput[12];

	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+4], al

; 12   :     pbOutput[5] = pbInput[15];

	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+5], al

; 13   :     pbOutput[6] = pbInput[18];

	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+6], al

; 14   :     pbOutput[7] = pbInput[21];

	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+7], al

; 15   :     pbOutput[8] = pbInput[24];

	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+8], al

; 16   :     pbOutput[9] = pbInput[27];

	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+9], al

; 17   :     pbOutput[10] = pbInput[30];

	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+10], al

; 18   :     pbOutput[11] = pbInput[33];

	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+11], al

; 19   :     pbOutput[12] = pbInput[36];

	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+12], al

; 20   :     pbOutput[13] = pbInput[39];

	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+13], al

; 21   :     pbOutput[14] = pbInput[42];

	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+14], al

; 22   :     pbOutput[15] = pbInput[45];

	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+15], al

; 23   :     pbOutput[16] = pbInput[1];

	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al

; 24   :     pbOutput[17] = pbInput[4];

	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+17], al

; 25   :     pbOutput[18] = pbInput[7];

	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+18], al

; 26   :     pbOutput[19] = pbInput[10];

	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+19], al

; 27   :     pbOutput[20] = pbInput[13];

	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+20], al

; 28   :     pbOutput[21] = pbInput[16];

	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+21], al

; 29   :     pbOutput[22] = pbInput[19];

	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+22], al

; 30   :     pbOutput[23] = pbInput[22];

	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+23], al

; 31   :     pbOutput[24] = pbInput[25];

	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+24], al

; 32   :     pbOutput[25] = pbInput[28];

	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+25], al

; 33   :     pbOutput[26] = pbInput[31];

	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+26], al

; 34   :     pbOutput[27] = pbInput[34];

	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+27], al

; 35   :     pbOutput[28] = pbInput[37];

	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+28], al

; 36   :     pbOutput[29] = pbInput[40];

	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+29], al

; 37   :     pbOutput[30] = pbInput[43];

	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+30], al

; 38   :     pbOutput[31] = pbInput[46];

	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+31], al

; 39   :     pbOutput[32] = pbInput[2];

	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al

; 40   :     pbOutput[33] = pbInput[5];

	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+33], al

; 41   :     pbOutput[34] = pbInput[8];

	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+34], al

; 42   :     pbOutput[35] = pbInput[11];

	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+35], al

; 43   :     pbOutput[36] = pbInput[14];

	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+36], al

; 44   :     pbOutput[37] = pbInput[17];

	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+37], al

; 45   :     pbOutput[38] = pbInput[20];

	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+38], al

; 46   :     pbOutput[39] = pbInput[23];

	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+39], al

; 47   :     pbOutput[40] = pbInput[26];

	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+40], al

; 48   :     pbOutput[41] = pbInput[29];

	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+41], al

; 49   :     pbOutput[42] = pbInput[32];

	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+42], al

; 50   :     pbOutput[43] = pbInput[35];

	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+43], al

; 51   :     pbOutput[44] = pbInput[38];

	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+44], al

; 52   :     pbOutput[45] = pbInput[41];

	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+45], al

; 53   :     pbOutput[46] = pbInput[44];

	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+46], al

; 54   :     pbOutput[47] = pbInput[47];

	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+47], al

; 55   : }

	ret	0
?DeinterleaveBPSK@@YAXPEAE0@Z ENDP			; DeinterleaveBPSK
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\apilot.h
pdata	SEGMENT
$pdata$?Pilot@@YAXQEAU_COMPLEX16@@PEAU_COMPLEX32@@PEAD@Z DD imagerel $LN19
	DD	imagerel $LN19+753
	DD	imagerel $unwind$?Pilot@@YAXQEAU_COMPLEX16@@PEAU_COMPLEX32@@PEAD@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Pilot@@YAXQEAU_COMPLEX16@@PEAU_COMPLEX32@@PEAD@Z DD 0b1a01H
	DD	07741aH
	DD	06641aH
	DD	05541aH
	DD	04341aH
	DD	0d018e01aH
	DD	0c016H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?Pilot@@YAXQEAU_COMPLEX16@@PEAU_COMPLEX32@@PEAD@Z
_TEXT	SEGMENT
pc$ = 32
ChannelFactor$ = 40
pbPilotCounter$ = 48
?Pilot@@YAXQEAU_COMPLEX16@@PEAU_COMPLEX32@@PEAD@Z PROC	; Pilot, COMDAT

; 23   : {

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14

; 24   :     short th1 = 
; 25   :         *(ARG( ((((unsigned short)(pc[64-21].re)) << 5) & 0xFF00)
; 26   :         ^ ((unsigned char)(pc[64-21].im >> 3)) ));

	movzx	eax, WORD PTR [rcx+172]
	mov	rdi, rcx
	lea	r14, OFFSET FLAT:__ImageBase
	and	eax, 2040				; 000007f8H
	mov	rbx, rdx

; 27   :     short th2 =
; 28   :         *(ARG( ((((unsigned short)(pc[64-7].re)) << 5) & 0xFF00)
; 29   :         ^ ((unsigned char)(pc[64-7].im >> 3)) ));
; 30   :     short th3 = 
; 31   :         *(ARG( ((((unsigned short)(pc[7].re)) << 5) & 0xFF00)
; 32   :         ^ ((unsigned char)(pc[7].im >> 3)) ));
; 33   :     short th4 =
; 34   :         (*(ARG( ((((unsigned short)(pc[21].re)) << 5) & 0xFF00)
; 35   :         ^ ((unsigned char)(pc[21].im >> 3)) ))) + INT_PI;

	mov	edx, -32768				; ffffffffffff8000H
	shl	eax, 5
	movsxd	r9, eax
	movzx	eax, WORD PTR [rcx+174]
	sar	ax, 3
	movzx	eax, al
	xor	r9, rax
	movzx	eax, WORD PTR [rcx+228]
	movzx	esi, WORD PTR ARG_LUT[r14+r9*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rdi+230]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rdi+28]
	movzx	ebp, WORD PTR ARG_LUT[r14+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rdi+30]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rdi+84]
	movzx	r11d, WORD PTR ARG_LUT[r14+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rdi+86]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	r10d, WORD PTR ARG_LUT[r14+rcx*2]

; 36   : 
; 37   : 	
; 38   : 	// Debug
; 39   : 	/*
; 40   : 	printf ( "th1 %d th2 %d th3 %d th4 %d\n", 
; 41   : 				  th1 ,
; 42   : 				  th2 ,
; 43   : 				  th3 ,
; 44   : 				  th4  ); 
; 45   : 
; 46   : 	printf ( "energy p1 %d p2 %d p3 %d p4 %d\n", 
; 47   : 			 pc[64-21].re * pc[64-21].re + pc[64-21].im * pc[64-21].im,
; 48   : 			 pc[64-7].re * pc[64-7].re + pc[64-7].im * pc[64-7].im,
; 49   : 			 pc[7].re * pc[7].re + pc[7].im * pc[7].im,
; 50   : 			 pc[21].re * pc[21].re + pc[21].im * pc[21].im ); 	
; 51   : 
; 52   : 	printf ( "energy ch1 %d ch2 %d ch3 %d ch4 %d\n", 
; 53   : 			 ChannelFactor[64-21].re * ChannelFactor[64-21].re 
; 54   : 			 	+ ChannelFactor[64-21].im * ChannelFactor[64-21].im,
; 55   : 			 ChannelFactor[64-7].re * ChannelFactor[64-7].re 
; 56   : 			 	+ ChannelFactor[64-7].im * ChannelFactor[64-7].im,
; 57   : 			 ChannelFactor[7].re * ChannelFactor[7].re 
; 58   : 			 	+ ChannelFactor[7].im * ChannelFactor[7].im,
; 59   : 			 ChannelFactor[21].re * ChannelFactor[21].re 
; 60   : 			 	+ ChannelFactor[21].im * ChannelFactor[21].im ); 	
; 61   : 	*/
; 62   : 	
; 63   : 	//
; 64   : 	// subcarrier rotation = const_rotate + i * delta_rotate
; 65   :     // estimate the const part
; 66   :     //
; 67   :     // N.B. This is a compiler issue that I don't know how to work around
; 68   :     // SHORT is presented as 32-bit integer inside
; 69   :     //
; 70   : 	if (*PILOTSGN(*pbPilotCounter)) {

	movsx	rcx, BYTE PTR [r8]
	add	r10w, dx
	cmp	BYTE PTR PILOTSGN_LUT[rcx+r14], 0
	je	SHORT $LN10@Pilot

; 71   : 			th1 += INT_PI;

	add	si, dx

; 72   : 			th2 += INT_PI;

	add	bp, dx

; 73   : 			th3 += INT_PI;

	add	r11w, dx

; 74   : 			th4 += INT_PI;

	add	r10w, dx
$LN10@Pilot:

; 75   : 	}
; 76   :     if ((++(*pbPilotCounter)) == 127)

	inc	cl
	mov	BYTE PTR [r8], cl
	cmp	cl, 127					; 0000007fH
	jne	SHORT $LN9@Pilot

; 77   : 	   *pbPilotCounter = 0;

	mov	BYTE PTR [r8], 0
$LN9@Pilot:

; 78   : 
; 79   :     // subcarrier rotation = const_rotate + i * delta_rotate
; 80   :     // estimate the const part
; 81   : 	short avgTheta = (th1 + th2 + th3 + th4) / 4;

	movsx	ecx, r11w
	movsx	eax, r10w

; 82   : 
; 83   :     // estimate the delta part
; 84   :     short delTheta = ((((short)(th3 - th1)) / (21 + 7) 
; 85   :             + ((short)(th4 - th2)) / (21 + 7)) >> 1);

	sub	r11w, si
	add	eax, ecx
	sub	r10w, bp
	movsx	ecx, bp
	add	eax, ecx
	movsx	ecx, si
	add	eax, ecx
	movsx	ecx, r10w

; 86   : 
; 87   : 	// Debug
; 88   : 	/*
; 89   : 	printf ( "ave %lf delta %lf \n\n", 
; 90   : 			  avgTheta * PI / 0x7FFF,
; 91   : 			  delTheta * PI / 0x7FFF );	
; 92   : 	*/
; 93   :     short th = avgTheta - delTheta * 26;
; 94   :     int i;
; 95   :     int s, c;
; 96   :     short re, im;
; 97   : 
; 98   :    	int ire, iim;
; 99   : 
; 100  : 	int bTrack = (avgTheta > TRACK_THRESHOLD || 
; 101  : 		          avgTheta < - TRACK_THRESHOLD);
; 102  : 	
; 103  :     // subcarrier -26 - -1
; 104  :     for (i = 64-26; i < 64; i++)

	mov	r10d, 38				; 00000026H
	cdq
	and	edx, 3
	lea	r9d, DWORD PTR [rdx+rax]
	mov	eax, -1840700269			; ffffffff92492493H
	sar	r9d, 2
	imul	ecx
	lea	r8d, DWORD PTR [rcx+rdx]
	mov	eax, -1840700269			; ffffffff92492493H
	sar	r8d, 4
	mov	ecx, r8d
	shr	ecx, 31
	add	r8d, ecx
	movsx	ecx, r11w
	movzx	r11d, r9w
	imul	ecx
	add	edx, ecx
	mov	ecx, 6554				; 0000199aH
	sar	edx, 4
	mov	r12d, edx
	add	edx, r8d
	shr	r12d, 31
	add	r12d, edx
	sar	r12d, 1
	movzx	eax, r12w
	imul	ax, 26
	sub	r11w, ax
	mov	eax, 3277				; 00000ccdH
	add	r9w, ax
	xor	eax, eax
	cmp	r9w, cx
	seta	al

; 105  :     {
; 106  :         s = *(SIN0xFFFF((unsigned short)(th)));
; 107  :         c = *(COS0xFFFF((unsigned short)(th)));
; 108  :         
; 109  :         re = (short)((pc[i].re * c + pc[i].im * s) >> 16);
; 110  :         im = (short)((pc[i].im * c - pc[i].re * s) >> 16);
; 111  :         
; 112  :         pc[i].re = re;
; 113  :         pc[i].im = im;
; 114  : 
; 115  : 		// Track the channel rotation
; 116  : 		// adaptive track
; 117  : 		if ( bTrack ) {

	movsxd	r13, eax
	npad	13
$LL8@Pilot:
	movsx	edx, WORD PTR [rdi+r10*4+2]
	movsx	r8d, WORD PTR [rdi+r10*4]
	movzx	eax, r11w
	movsx	ebp, WORD PTR COS0xFFFF_LUT[r14+rax*2]
	movsx	esi, WORD PTR SIN0xFFFF_LUT[r14+rax*2]
	mov	eax, r8d
	mov	ecx, edx
	imul	r8d, ebp
	imul	eax, esi
	imul	edx, esi
	imul	ecx, ebp
	add	r8d, edx
	sar	r8d, 16
	sub	ecx, eax
	mov	WORD PTR [rdi+r10*4], r8w
	sar	ecx, 16
	mov	WORD PTR [rdi+r10*4+2], cx
	test	r13, r13
	je	SHORT $LN5@Pilot

; 118  : 	        ire = (short)((ChannelFactor[i].re * c 
; 119  : 							+ ChannelFactor[i].im * s)>>15);
; 120  : 		    iim = (short)((ChannelFactor[i].im * c 
; 121  : 							- ChannelFactor[i].re * s)>>15);

	mov	r8d, DWORD PTR [rbx+r10*8+4]
	mov	r9d, DWORD PTR [rbx+r10*8]
	mov	eax, r9d
	mov	ecx, r8d
	imul	r9d, ebp
	imul	r8d, esi
	imul	eax, esi
	imul	ecx, ebp
	sub	ecx, eax
	lea	eax, DWORD PTR [r8+r9]
	sar	ecx, 15
	sar	eax, 15

; 122  : 			ChannelFactor[i].re = ire;

	cwde
	movsx	edx, cx
	mov	DWORD PTR [rbx+r10*8], eax

; 123  : 			ChannelFactor[i].im = iim;

	mov	DWORD PTR [rbx+r10*8+4], edx
$LN5@Pilot:
	inc	r10

; 124  : 		}
; 125  : 
; 126  : 		// Debug
; 127  : 		/*
; 128  : 		if ( i == (64-7) || i == (64-21) || i == (7) || i == (21) ) {
; 129  : 
; 130  : 			ffc = 1.0 * c / 32767;
; 131  : 			ffs = 1.0 * s / 32767;
; 132  : 			printf ( "ch %d <%lf, %lf> <%lf, %lf> %lf\n <%d, %d>\n", 
; 133  : 					  i, 
; 134  : 					  fc, fs,
; 135  : 					  ffc, ffs,
; 136  : 					  ffc*ffc + ffs*ffs,
; 137  : 					  ire, iim );
; 138  : 		}
; 139  : 		*/
; 140  : 
; 141  :         th += delTheta;

	add	r11w, r12w
	cmp	r10, 64					; 00000040H
	jl	$LL8@Pilot

; 142  :     }
; 143  : 
; 144  :     th += delTheta; // 0 subcarrier, dc

	add	r11w, r12w

; 145  : 
; 146  :     // subcarrier 1 - 26
; 147  :     for (i = 1; i <= 26; i++)

	mov	r10d, 1
$LL4@Pilot:

; 148  :     {
; 149  : 
; 150  :         s = *(SIN0xFFFF((unsigned short)(th)));
; 151  :         c = *(COS0xFFFF((unsigned short)(th)));
; 152  : 
; 153  :         re = (short)((pc[i].re * c + pc[i].im * s) >> 16);
; 154  :         im = (short)((pc[i].im * c - pc[i].re * s) >> 16);

	movsx	edx, WORD PTR [rdi+r10*4+2]
	movsx	r8d, WORD PTR [rdi+r10*4]
	movzx	eax, r11w
	movsx	ebp, WORD PTR COS0xFFFF_LUT[r14+rax*2]
	movsx	esi, WORD PTR SIN0xFFFF_LUT[r14+rax*2]
	mov	eax, r8d
	mov	ecx, edx
	imul	r8d, ebp
	imul	eax, esi
	imul	edx, esi
	imul	ecx, ebp
	add	r8d, edx
	sar	r8d, 16
	sub	ecx, eax

; 155  :         pc[i].re = re;

	mov	WORD PTR [rdi+r10*4], r8w
	sar	ecx, 16

; 156  :         pc[i].im = im;

	mov	WORD PTR [rdi+r10*4+2], cx

; 157  : 
; 158  : 		// Track the channel rotation
; 159  : 		if ( bTrack ) {

	test	r13, r13
	je	SHORT $LN1@Pilot

; 160  : 	        ire = (short)((ChannelFactor[i].re * c 
; 161  : 							+ ChannelFactor[i].im * s)>>15);
; 162  : 		    iim = (short)((ChannelFactor[i].im * c 
; 163  : 							- ChannelFactor[i].re * s)>>15);

	mov	r8d, DWORD PTR [rbx+r10*8+4]
	mov	r9d, DWORD PTR [rbx+r10*8]
	mov	eax, r9d
	mov	ecx, r8d
	imul	r9d, ebp
	imul	r8d, esi
	imul	eax, esi
	imul	ecx, ebp
	sub	ecx, eax
	lea	eax, DWORD PTR [r8+r9]
	sar	ecx, 15
	sar	eax, 15

; 164  : 			ChannelFactor[i].re = ire;

	cwde
	movsx	edx, cx
	mov	DWORD PTR [rbx+r10*8], eax

; 165  : 			ChannelFactor[i].im = iim;

	mov	DWORD PTR [rbx+r10*8+4], edx
$LN1@Pilot:
	inc	r10

; 166  : 		}
; 167  : 
; 168  : 		// Debug
; 169  : 		/*
; 170  : 		if ( i == (64-7) || i == (64-21) || i == (7) || i == (21) ) {
; 171  : 			ffc = 1.0 * c / 32767;
; 172  : 			ffs = 1.0 * s / 32767;
; 173  : 			printf ( "ch %d <%lf, %lf> <%lf, %lf> %lf\n <%d, %d>\n", 
; 174  : 					  i, 
; 175  : 					  fc, fs,
; 176  : 					  ffc, ffs,
; 177  : 					  ffc*ffc + ffs*ffs,
; 178  : 					  ire, iim );
; 179  : 		}
; 180  : 		*/
; 181  :         th += delTheta;

	add	r11w, r12w
	cmp	r10, 26
	jle	$LL4@Pilot

; 182  :     }
; 183  : 	
; 184  : }

	mov	rbx, QWORD PTR [rsp+32]
	mov	rbp, QWORD PTR [rsp+40]
	mov	rsi, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+56]
	pop	r14
	pop	r13
	pop	r12
	ret	0
?Pilot@@YAXQEAU_COMPLEX16@@PEAU_COMPLEX32@@PEAD@Z ENDP	; Pilot
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\afreq.h
pdata	SEGMENT
$pdata$?EstimateFreqOffset@@YAGPEBU_COMPLEX16@@QEAF1@Z DD imagerel $LN24
	DD	imagerel $LN24+450
	DD	imagerel $unwind$?EstimateFreqOffset@@YAGPEBU_COMPLEX16@@QEAF1@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EstimateFreqOffset@@YAGPEBU_COMPLEX16@@QEAF1@Z DD 0c1c01H
	DD	08741cH
	DD	07641cH
	DD	06541cH
	DD	05341cH
	DD	0e01af01cH
	DD	0c016d018H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?EstimateFreqOffset@@YAGPEBU_COMPLEX16@@QEAF1@Z
_TEXT	SEGMENT
pc$ = 40
FreqFactorCos$ = 48
FreqFactorSin$ = 56
?EstimateFreqOffset@@YAGPEBU_COMPLEX16@@QEAF1@Z PROC	; EstimateFreqOffset, COMDAT

; 15   : {

$LN24:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r13
	push	r14
	push	r15

; 16   :     int iCorrRe = 0, iCorrIm = 0;

	xor	r11d, r11d
	mov	r14, r8
	mov	rsi, rdx
	lea	r15d, QWORD PTR [r11+32]
	mov	ebx, r11d
	mov	edi, r11d

; 67   :         
; 68   :     }
; 69   : 
; 70   : #if BB_DBG
; 71   :     printf ("EstimateFreq  atan:%d %8.6lf\n", iFreq, 
; 72   :             - (double) (iFreq) * 2 * 3.141593 / 0xFFFF);
; 73   : #endif
; 74   : 
; 75   :     // Hint: 
; 76   :     //   if iFreq is negtive, it is automatically convert to 2 pi + theta
; 77   :     //   note 2 pi == 65536
; 78   :     //
; 79   :     iFreq &= 0xFFFF; // prevenet sign extension
; 80   :     
; 81   :     usTheta = 0;
; 82   :     for (i = 0; i < FREQ_LUT_SIZE * 2; i += 2)

	mov	r12d, r11d
	mov	r13d, r11d
	lea	rbp, QWORD PTR [rcx+256]
	npad	4
$LL14@EstimateFr:
	movsx	r9d, WORD PTR [rbp-256]
	movsx	r8d, WORD PTR [rbp-254]
	movsx	edx, WORD PTR [rbp]
	movsx	r10d, WORD PTR [rbp+2]
	mov	eax, edx
	add	rbp, 8
	mov	ecx, r10d
	imul	edx, r8d
	imul	eax, r9d
	imul	r10d, r9d
	movsx	r9d, WORD PTR [rbp-4]
	imul	ecx, r8d
	movsx	r8d, WORD PTR [rbp-258]
	sub	r10d, edx
	movsx	edx, WORD PTR [rbp-260]
	add	ecx, eax
	sar	r10d, 5
	sar	ecx, 5
	add	edi, r10d
	movsx	r10d, WORD PTR [rbp-2]
	add	ebx, ecx
	mov	ecx, r10d
	mov	eax, r9d
	imul	r10d, edx
	imul	r9d, r8d
	sub	r10d, r9d
	sar	r10d, 5
	add	r13d, r10d
	imul	ecx, r8d
	imul	eax, edx
	add	ecx, eax
	sar	ecx, 5
	add	r12d, ecx
	sub	r15, 1
	jne	$LL14@EstimateFr
	add	ebx, r12d
	add	edi, r13d
	sar	ebx, 10
	test	ebx, ebx
	jne	$LN11@EstimateFr

; 17   :     int i;
; 18   :     int iFreq;
; 19   :     unsigned short usTheta;
; 20   : 
; 21   :     // Hint:
; 22   :     //  It is not completely normalized. But it should be okay. 
; 23   :     //
; 24   :     for (i = 0; i < 64; i++)
; 25   :     {
; 26   :         int re1 = pc[i].re;
; 27   :         int im1 = pc[i].im; 
; 28   :         iCorrRe += ( re1 * pc[i + 64].re + im1 * pc[i + 64].im) >> 5;
; 29   :         iCorrIm += ( re1 * pc[i + 64].im - im1 * pc[i + 64].re) >> 5;
; 30   :         // Hint:
; 31   :         //  This is by design. To work with the LUT below.
; 32   :     }
; 33   : 
; 34   :     
; 35   :     iCorrRe >>= 10;
; 36   :     
; 37   :     if (iCorrRe == 0) {
; 38   :         if ( iCorrIm > 0 ) iFreq = 2048;

	test	edi, edi
	jle	SHORT $LN23@EstimateFr
	mov	eax, 2048				; 00000800H
	jmp	$LN22@EstimateFr
$LN23@EstimateFr:

; 39   :         else if ( iCorrIm < 0 ) iFreq = -2048;

	jns	$LN8@EstimateFr
	mov	eax, -2048				; fffffffffffff800H
$LN5@EstimateFr:

; 62   :     {
; 63   :         iFreq = -iFreq;

	neg	eax

; 64   :         // Wrap if too large to prevent buffer reading overrun
; 65   :         iFreq &= (ATAN64_LUT_INPUT_SIZE - 1);
; 66   :         iFreq = -(*(ATAN64(iFreq))); // 65536 = 2pi

	lea	r8, OFFSET FLAT:__ImageBase
	and	eax, 2047				; 000007ffH
	movzx	ecx, WORD PTR ATAN64_LUT[r8+rax*2]
	neg	ecx
$LN4@EstimateFr:

; 67   :         
; 68   :     }
; 69   : 
; 70   : #if BB_DBG
; 71   :     printf ("EstimateFreq  atan:%d %8.6lf\n", iFreq, 
; 72   :             - (double) (iFreq) * 2 * 3.141593 / 0xFFFF);
; 73   : #endif
; 74   : 
; 75   :     // Hint: 
; 76   :     //   if iFreq is negtive, it is automatically convert to 2 pi + theta
; 77   :     //   note 2 pi == 65536
; 78   :     //
; 79   :     iFreq &= 0xFFFF; // prevenet sign extension
; 80   :     
; 81   :     usTheta = 0;
; 82   :     for (i = 0; i < FREQ_LUT_SIZE * 2; i += 2)

	mov	rbx, rsi
	movzx	edi, cx
	mov	r10, r11
	sub	rbx, r14
	lea	r9, QWORD PTR [r14+2]
$LL3@EstimateFr:

; 83   :     {
; 84   :         FreqFactorCos[i]   = *(COS0xFFFF(usTheta));

	movzx	edx, r11w
	add	r10, 2
	add	r9, 4
	movzx	eax, WORD PTR COS0xFFFF_LUT[r8+rdx*2]

; 85   :         FreqFactorCos[i+1] = *(COS0xFFFF(usTheta));
; 86   :         FreqFactorSin[i]   = *(SIN0xFFFF(usTheta));
; 87   :         FreqFactorSin[i+1] = -(*(SIN0xFFFF(usTheta)));
; 88   :         usTheta += (unsigned short)(iFreq); // Automatically overflowed

	add	r11w, di
	mov	WORD PTR [rsi+r10*2-4], ax
	movzx	eax, WORD PTR COS0xFFFF_LUT[r8+rdx*2]
	mov	WORD PTR [rbx+r9-4], ax
	movzx	ecx, WORD PTR SIN0xFFFF_LUT[r8+rdx*2]
	mov	WORD PTR [r9-6], cx
	movzx	ecx, WORD PTR SIN0xFFFF_LUT[r8+rdx*2]
	neg	cx
	cmp	r10, 160				; 000000a0H
	mov	WORD PTR [r9-4], cx
	jl	SHORT $LL3@EstimateFr

; 89   :     }
; 90   :     return (unsigned short)(iFreq);
; 91   : }

	mov	rbx, QWORD PTR [rsp+40]
	mov	rbp, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	ax, di
	mov	rdi, QWORD PTR [rsp+64]
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	ret	0
$LN8@EstimateFr:

; 40   :         else iFreq = 0;

	mov	eax, r11d

; 41   :     } else {

	jmp	SHORT $LN22@EstimateFr
$LN11@EstimateFr:

; 42   :         iFreq = (iCorrIm / iCorrRe);

	mov	eax, edi
	cdq
	idiv	ebx

; 43   :     }    
; 44   :     
; 45   : 
; 46   : 
; 47   :     // Hint:
; 48   :     //   In this implementation the maximal theta is 63 degree
; 49   :     //   iFreq == 1024 * tan ( 64 * theta )
; 50   :     //   theta == ATAN64 ( iFreq );
; 51   :     
; 52   :     // printf ("EstimateFreq  re:%d im:%d tan:%d\n", iCorrRe, iCorrIm, iFreq);
; 53   :     
; 54   :     if (iFreq >= 0)

	test	eax, eax
	js	$LN5@EstimateFr
$LN22@EstimateFr:

; 55   :     {
; 56   :         // Wrap if too large to prevent buffer reading overrun
; 57   :         iFreq &= (ATAN64_LUT_INPUT_SIZE - 1);
; 58   :         iFreq = *ATAN64(iFreq);

	lea	r8, OFFSET FLAT:__ImageBase
	and	eax, 2047				; 000007ffH
	movzx	ecx, WORD PTR ATAN64_LUT[r8+rax*2]

; 59   : 
; 60   :     }
; 61   :     else

	jmp	$LN4@EstimateFr
?EstimateFreqOffset@@YAGPEBU_COMPLEX16@@QEAF1@Z ENDP	; EstimateFreqOffset
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\achannel.h
pdata	SEGMENT
$pdata$?ChannelComp@@YAXQEBU_COMPLEX32@@PEAU_COMPLEX16@@@Z DD imagerel $LN15
	DD	imagerel $LN15+373
	DD	imagerel $unwind$?ChannelComp@@YAXQEBU_COMPLEX32@@PEAU_COMPLEX16@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ChannelComp@@YAXQEBU_COMPLEX32@@PEAU_COMPLEX16@@@Z DD 091601H
	DD	057416H
	DD	046416H
	DD	035416H
	DD	023416H
	DD	0c016H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?ChannelComp@@YAXQEBU_COMPLEX32@@PEAU_COMPLEX16@@@Z
_TEXT	SEGMENT
ChannelFactor$ = 16
pc$ = 24
?ChannelComp@@YAXQEBU_COMPLEX32@@PEAU_COMPLEX16@@@Z PROC ; ChannelComp, COMDAT

; 150  : {

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12

; 151  :     int i;
; 152  :     int re, im;
; 153  :     
; 154  :     for (i = 1; i <= 26; i++)

	mov	edi, 13
	mov	r11, rdx
	mov	rbx, rcx

; 155  :     {
; 156  :         re = pc[i].re * ChannelFactor[i].re
; 157  :              - pc[i].im * ChannelFactor[i].im;
; 158  :         im = pc[i].re * ChannelFactor[i].im
; 159  :              + pc[i].im * ChannelFactor[i].re;
; 160  :         
; 161  :         pc[i].re = (short)(re >> COMP_SHIFT);
; 162  :         pc[i].im = (short)(im >> COMP_SHIFT);

	lea	rsi, QWORD PTR [rdx+8]
	lea	rbp, QWORD PTR [rcx+20]
	mov	r12, rdi
	npad	4
$LL6@ChannelCom:
	mov	edx, DWORD PTR [rbp-12]
	mov	r9d, DWORD PTR [rbp-8]
	movsx	r8d, WORD PTR [rsi-2]
	movsx	r10d, WORD PTR [rsi-4]
	mov	eax, r9d
	mov	ecx, r8d
	imul	r9d, r8d
	add	rsi, 8
	add	rbp, 16
	imul	ecx, edx
	imul	eax, r10d
	imul	r10d, edx
	movsx	edx, WORD PTR [rsi-6]
	sub	r10d, r9d
	add	ecx, eax
	mov	eax, edx
	sar	r10d, 11
	sar	ecx, 11
	mov	WORD PTR [rsi-12], r10w
	movsx	r10d, WORD PTR [rsi-8]
	mov	WORD PTR [rsi-10], cx
	mov	r8d, DWORD PTR [rbp-16]
	mov	ecx, DWORD PTR [rbp-20]
	mov	r9d, r8d
	imul	eax, ecx
	imul	r8d, edx
	imul	r9d, r10d
	imul	r10d, ecx
	sub	r10d, r8d
	add	r9d, eax
	sar	r10d, 11
	sar	r9d, 11
	sub	r12, 1
	mov	WORD PTR [rsi-8], r10w
	mov	WORD PTR [rsi-6], r9w
	jne	$LL6@ChannelCom

; 163  : 
; 164  :     }
; 165  :     
; 166  : 
; 167  :     for (i = 64 - 26; i < 64; i++)
; 168  :     {
; 169  :         re = pc[i].re * ChannelFactor[i].re
; 170  :              - pc[i].im * ChannelFactor[i].im;
; 171  :         im = pc[i].re * ChannelFactor[i].im
; 172  :              + pc[i].im * ChannelFactor[i].re;
; 173  :         
; 174  :         pc[i].re = (short)(re >> COMP_SHIFT);
; 175  :         pc[i].im = (short)(im >> COMP_SHIFT);

	add	r11, 156				; 0000009cH
	add	rbx, 316				; 0000013cH
	npad	9
$LL3@ChannelCom:
	mov	edx, DWORD PTR [rbx-8]
	mov	ecx, DWORD PTR [rbx-12]
	movsx	r10d, WORD PTR [r11-4]
	movsx	r8d, WORD PTR [r11-2]
	mov	r9d, r10d
	add	r11, 8
	imul	r10d, ecx
	mov	eax, r8d
	add	rbx, 16
	imul	r9d, edx
	imul	r8d, edx
	sub	r10d, r8d
	movsx	r8d, WORD PTR [r11-6]
	imul	eax, ecx
	movsx	ecx, WORD PTR [r11-8]
	add	r9d, eax
	sar	r10d, 11
	mov	WORD PTR [r11-12], r10w
	sar	r9d, 11
	mov	eax, r8d
	mov	WORD PTR [r11-10], r9w
	mov	edx, DWORD PTR [rbx-16]
	mov	r9d, DWORD PTR [rbx-20]
	imul	eax, r9d
	imul	r9d, ecx
	imul	r8d, edx
	sub	r9d, r8d
	mov	r10d, edx
	sar	r9d, 11
	mov	WORD PTR [r11-8], r9w
	imul	r10d, ecx
	add	r10d, eax
	sar	r10d, 11
	sub	rdi, 1
	mov	WORD PTR [r11-6], r10w
	jne	$LL3@ChannelCom

; 176  : 
; 177  :     }
; 178  : 
; 179  : }

	mov	rbx, QWORD PTR [rsp+16]
	mov	rbp, QWORD PTR [rsp+24]
	mov	rsi, QWORD PTR [rsp+32]
	mov	rdi, QWORD PTR [rsp+40]
	pop	r12
	ret	0
?ChannelComp@@YAXQEBU_COMPLEX32@@PEAU_COMPLEX16@@@Z ENDP ; ChannelComp
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EstimateChannel@@YAXPEBU_COMPLEX16@@QEAU_COMPLEX32@@@Z DD imagerel $LN19
	DD	imagerel $LN19+255
	DD	imagerel $unwind$?EstimateChannel@@YAXPEBU_COMPLEX16@@QEAU_COMPLEX32@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EstimateChannel@@YAXPEBU_COMPLEX16@@QEAU_COMPLEX32@@@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?EstimateChannel@@YAXPEBU_COMPLEX16@@QEAU_COMPLEX32@@@Z
_TEXT	SEGMENT
pc$ = 8
ChannelFactor$ = 16
?EstimateChannel@@YAXPEBU_COMPLEX16@@QEAU_COMPLEX32@@@Z PROC ; EstimateChannel, COMDAT

; 29   : {

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	rdi, rdx
	mov	rbx, rcx

; 30   :     int i = 0;
; 31   :     int sq;
; 32   :     int re, im;
; 33   : 
; 34   : 
; 35   :     for (i = 1; i <= 26; i++)

	mov	r8d, 1
	lea	rsi, OFFSET FLAT:rgbLongPrePositive
$LL12@EstimateCh:

; 36   :     {
; 37   :         re = pc[i].re;

	movsx	r9d, WORD PTR [rcx+r8*4]

; 38   :         im = pc[i].im;

	movsx	r10d, WORD PTR [rcx+r8*4+2]

; 39   :         sq = re * re + im * im;

	mov	r11d, r10d
	mov	eax, r9d
	imul	r11d, r10d
	imul	eax, r9d
	add	r11d, eax

; 40   : 
; 41   :         sq >>= NORM_SHIFT;

	sar	r11d, 5

; 42   : 
; 43   :         if (sq != 0)

	test	r11d, r11d
	je	SHORT $LN11@EstimateCh

; 44   :         {
; 45   :             if (rgbLongPrePositive[i])

	cmp	BYTE PTR [r8+rsi], 0
	je	SHORT $LN8@EstimateCh

; 46   :                 im = -im;

	neg	r10d

; 47   :             else

	jmp	SHORT $LN7@EstimateCh
$LN8@EstimateCh:

; 48   :                 re = -re;

	neg	r9d
$LN7@EstimateCh:

; 49   : 
; 50   :             re = (re * NORM_ONE) / sq;

	imul	r9d, 1600				; 00000640H

; 51   :             im = (im * NORM_ONE) / sq;

	imul	r10d, 1600				; 00000640H
	mov	eax, r9d
	cdq
	idiv	r11d

; 52   : 
; 53   :             ChannelFactor[i].re = re << CH_SHIFT;

	shl	eax, 3
	mov	DWORD PTR [rdi+r8*8], eax
	mov	eax, r10d
	cdq
	idiv	r11d

; 54   :             ChannelFactor[i].im = im << CH_SHIFT;

	shl	eax, 3
	mov	DWORD PTR [rdi+r8*8+4], eax
$LN11@EstimateCh:
	inc	r8
	cmp	r8, 26
	jle	SHORT $LL12@EstimateCh

; 55   :         }
; 56   :     }
; 57   : 
; 58   :     for (i = 64 - 26; i < 64; i++)

	mov	ecx, 38					; 00000026H
	npad	1
$LL6@EstimateCh:

; 59   :     {
; 60   :         re = pc[i].re;

	movsx	edx, WORD PTR [rbx+rcx*4]

; 61   :         im = pc[i].im;

	movsx	r8d, WORD PTR [rbx+rcx*4+2]

; 62   :         sq = re * re + im * im;

	mov	r9d, r8d
	mov	eax, edx
	imul	r9d, r8d
	imul	eax, edx
	add	r9d, eax

; 63   :         sq >>= NORM_SHIFT;

	sar	r9d, 5

; 64   : 
; 65   :         if (sq != 0)

	test	r9d, r9d
	je	SHORT $LN5@EstimateCh

; 66   :         {
; 67   :             if (rgbLongPrePositive[i])

	cmp	BYTE PTR [rcx+rsi], 0
	je	SHORT $LN2@EstimateCh

; 68   :                 im = -im;

	neg	r8d

; 69   :             else

	jmp	SHORT $LN1@EstimateCh
$LN2@EstimateCh:

; 70   :                 re = -re;

	neg	edx
$LN1@EstimateCh:

; 71   : 
; 72   :             re = (re * NORM_ONE) / sq;

	imul	edx, 1600				; 00000640H

; 73   :             im = (im * NORM_ONE) / sq;

	imul	r8d, 1600				; 00000640H
	mov	eax, edx
	cdq
	idiv	r9d

; 74   : 
; 75   :             ChannelFactor[i].re = re << CH_SHIFT;

	shl	eax, 3
	mov	DWORD PTR [rdi+rcx*8], eax
	mov	eax, r8d
	cdq
	idiv	r9d

; 76   :             ChannelFactor[i].im = im << CH_SHIFT;

	shl	eax, 3
	mov	DWORD PTR [rdi+rcx*8+4], eax
$LN5@EstimateCh:
	inc	rcx
	cmp	rcx, 64					; 00000040H
	jl	SHORT $LL6@EstimateCh

; 77   :         }
; 78   :     }
; 79   : }

	mov	rbx, QWORD PTR [rsp+8]
	mov	rsi, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	ret	0
?EstimateChannel@@YAXPEBU_COMPLEX16@@QEAU_COMPLEX32@@@Z ENDP ; EstimateChannel
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_lut_twiddle.h
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0EA@$02@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0EA@$02@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<64,3>, COMDAT

; 61596: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<64, 3>() { return (vcs*)wFFTLUT64_3; }

	lea	rax, OFFSET FLAT:?wFFTLUT64_3@@3QBU_COMPLEX16@@B ; wFFTLUT64_3
	ret	0
??$FFT_GetTwiddleConst@$0EA@$02@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<64,3>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0EA@$01@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0EA@$01@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<64,2>, COMDAT

; 61595: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<64, 2>() { return (vcs*)wFFTLUT64_2; }

	lea	rax, OFFSET FLAT:?wFFTLUT64_2@@3QBU_COMPLEX16@@B ; wFFTLUT64_2
	ret	0
??$FFT_GetTwiddleConst@$0EA@$01@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<64,2>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0EA@$00@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0EA@$00@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<64,1>, COMDAT

; 61594: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<64, 1>() { return (vcs*)wFFTLUT64_1; }

	lea	rax, OFFSET FLAT:?wFFTLUT64_1@@3QBU_COMPLEX16@@B ; wFFTLUT64_1
	ret	0
??$FFT_GetTwiddleConst@$0EA@$00@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<64,1>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0BA@$02@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0BA@$02@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<16,3>, COMDAT

; 61590: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<16, 3>() { return (vcs*)wFFTLUT16_3; }

	lea	rax, OFFSET FLAT:?wFFTLUT16_3@@3QBU_COMPLEX16@@B ; wFFTLUT16_3
	ret	0
??$FFT_GetTwiddleConst@$0BA@$02@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<16,3>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0BA@$01@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0BA@$01@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<16,2>, COMDAT

; 61589: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<16, 2>() { return (vcs*)wFFTLUT16_2; }

	lea	rax, OFFSET FLAT:?wFFTLUT16_2@@3QBU_COMPLEX16@@B ; wFFTLUT16_2
	ret	0
??$FFT_GetTwiddleConst@$0BA@$01@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<16,2>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$FFT_GetTwiddleConst@$0BA@$00@@YAPEBUvcs@@XZ
_TEXT	SEGMENT
??$FFT_GetTwiddleConst@$0BA@$00@@YAPEBUvcs@@XZ PROC	; FFT_GetTwiddleConst<16,1>, COMDAT

; 61588: template<> DSP_INLINE const vcs* FFT_GetTwiddleConst<16, 1>() { return (vcs*)wFFTLUT16_1; }

	lea	rax, OFFSET FLAT:?wFFTLUT16_1@@3QBU_COMPLEX16@@B ; wFFTLUT16_1
	ret	0
??$FFT_GetTwiddleConst@$0BA@$00@@YAPEBUvcs@@XZ ENDP	; FFT_GetTwiddleConst<16,1>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_lut_bitreversal.h
_TEXT	ENDS
;	COMDAT ??$FFTLUTMapTable@$0EA@@@YAFH@Z
_TEXT	SEGMENT
i$ = 8
??$FFTLUTMapTable@$0EA@@@YAFH@Z PROC			; FFTLUTMapTable<64>, COMDAT

; 65584: template<> DSP_INLINE short FFTLUTMapTable<64>(int i) { return FFT64LUTMap[i]; }

	movsxd	rax, ecx
	lea	rcx, OFFSET FLAT:?FFT64LUTMap@@3QBFB	; FFT64LUTMap
	mov	ax, WORD PTR [rcx+rax*2]
	ret	0
??$FFTLUTMapTable@$0EA@@@YAFH@Z ENDP			; FFTLUTMapTable<64>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ??4vus@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??4vus@@QEAAAEAU0@AEBU0@@Z PROC				; vus::operator=, COMDAT

; 118  : PVECTOR_STRUCT(vus,  __m128i, unsigned __int16, 16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??4vus@@QEAAAEAU0@AEBU0@@Z ENDP				; vus::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0vus@@QEAA@AEAY07$$CBG@Z
_TEXT	SEGMENT
this$ = 8
pa$ = 16
??0vus@@QEAA@AEAY07$$CBG@Z PROC				; vus::vus, COMDAT

; 118  : PVECTOR_STRUCT(vus,  __m128i, unsigned __int16, 16);

	movdqa	xmm0, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??0vus@@QEAA@AEAY07$$CBG@Z ENDP				; vus::vus
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0vus@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0vus@@QEAA@XZ PROC					; vus::vus, COMDAT

; 118  : PVECTOR_STRUCT(vus,  __m128i, unsigned __int16, 16);

	mov	rax, rcx
	ret	0
??0vus@@QEAA@XZ ENDP					; vus::vus
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4vub@@QEAAAEAU0@AEAY0BA@$$CBE@Z
_TEXT	SEGMENT
this$ = 8
pa$ = 16
??4vub@@QEAAAEAU0@AEAY0BA@$$CBE@Z PROC			; vub::operator=, COMDAT

; 116  : PVECTOR_STRUCT(vub,  __m128i, unsigned __int8,  16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??4vub@@QEAAAEAU0@AEAY0BA@$$CBE@Z ENDP			; vub::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??4vub@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??4vub@@QEAAAEAU0@AEBU0@@Z PROC				; vub::operator=, COMDAT

; 116  : PVECTOR_STRUCT(vub,  __m128i, unsigned __int8,  16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??4vub@@QEAAAEAU0@AEBU0@@Z ENDP				; vub::operator=
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0vub@@QEAA@T__m128i@@@Z
_TEXT	SEGMENT
this$ = 8
r$ = 16
??0vub@@QEAA@T__m128i@@@Z PROC				; vub::vub, COMDAT

; 116  : PVECTOR_STRUCT(vub,  __m128i, unsigned __int8,  16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??0vub@@QEAA@T__m128i@@@Z ENDP				; vub::vub
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??0vub@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0vub@@QEAA@XZ PROC					; vub::vub, COMDAT

; 116  : PVECTOR_STRUCT(vub,  __m128i, unsigned __int8,  16);

	mov	rax, rcx
	ret	0
??0vub@@QEAA@XZ ENDP					; vub::vub
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\inc\bb\bba.h
_TEXT	ENDS
;	COMDAT ?BB11A_VITERBIDONE_WAIT_EVENT@@YAHPEAU_BB11A_RX_CONTEXT@@@Z
_TEXT	SEGMENT
pRxContextA$ = 8
?BB11A_VITERBIDONE_WAIT_EVENT@@YAHPEAU_BB11A_RX_CONTEXT@@@Z PROC ; BB11A_VITERBIDONE_WAIT_EVENT, COMDAT

; 136  :     return pRxContextA->bViterbiDone;

	movsx	eax, BYTE PTR [rcx+761]

; 137  : }

	ret	0
?BB11A_VITERBIDONE_WAIT_EVENT@@YAHPEAU_BB11A_RX_CONTEXT@@@Z ENDP ; BB11A_VITERBIDONE_WAIT_EVENT
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?BB11A_VITERBIDONE_CLEAR_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z
_TEXT	SEGMENT
pRxContextA$ = 8
?BB11A_VITERBIDONE_CLEAR_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z PROC ; BB11A_VITERBIDONE_CLEAR_EVENT, COMDAT

; 131  :     pRxContextA->bViterbiDone = FALSE;

	mov	BYTE PTR [rcx+761], 0

; 132  : }

	ret	0
?BB11A_VITERBIDONE_CLEAR_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z ENDP ; BB11A_VITERBIDONE_CLEAR_EVENT
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?BB11A_VITERBIRUN_SET_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z
_TEXT	SEGMENT
pRxContextA$ = 8
?BB11A_VITERBIRUN_SET_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z PROC ; BB11A_VITERBIRUN_SET_EVENT, COMDAT

; 111  :     pRxContextA->bRunViterbi = TRUE;

	mov	BYTE PTR [rcx+760], 1

; 112  : }

	ret	0
?BB11A_VITERBIRUN_SET_EVENT@@YAXPEAU_BB11A_RX_CONTEXT@@@Z ENDP ; BB11A_VITERBIRUN_SET_EVENT
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\inc\timing.h
_TEXT	ENDS
;	COMDAT ?TimerStop@@YAXPEAU_TIMINGINFO@@@Z
_TEXT	SEGMENT
pti$ = 8
?TimerStop@@YAXPEAU_TIMINGINFO@@@Z PROC			; TimerStop, COMDAT

; 18   :     QueryPerformanceCounter(&(pti->ti_end));

	add	rcx, 8

; 19   : }

	rex_jmp	QWORD PTR __imp_QueryPerformanceCounter
?TimerStop@@YAXPEAU_TIMINGINFO@@@Z ENDP			; TimerStop
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?TimerStart@@YAXPEAU_TIMINGINFO@@@Z
_TEXT	SEGMENT
pti$ = 8
?TimerStart@@YAXPEAU_TIMINGINFO@@@Z PROC		; TimerStart, COMDAT

; 13   :     QueryPerformanceCounter(&(pti->ti_start));   
; 14   : }

	rex_jmp	QWORD PTR __imp_QueryPerformanceCounter
?TimerStart@@YAXPEAU_TIMINGINFO@@@Z ENDP		; TimerStart
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
;	COMDAT ??$xor@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$xor@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z PROC	; xor<vi>, COMDAT

; 486  : DEFINE_TEMPLATE_OP_ARITHMETIC2(xor, _mm_xor_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pxor	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$xor@Uvi@@@@YA?AUvi@@AEBU0@0PEAT__m128i@@@Z ENDP	; xor<vi>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$extract@$0A@@@YAGAEBUvus@@@Z
_TEXT	SEGMENT
a$ = 8
??$extract@$0A@@@YAGAEBUvus@@@Z PROC			; extract<0>, COMDAT

; 471  : DEFINE_OP_EXTRACT(vus, _mm_extract_epi16);

	movdqa	xmm0, XMMWORD PTR [rcx]
	pextrw	eax, xmm0, 0
	ret	0
??$extract@$0A@@@YAGAEBUvus@@@Z ENDP			; extract<0>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvub@@@vus@@QEAA@AEBUvub@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvub@@@vus@@QEAA@AEBUvub@@@Z PROC			; vus::vus<vub>, COMDAT

; 118  : PVECTOR_STRUCT(vus,  __m128i, unsigned __int16, 16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvub@@@vus@@QEAA@AEBUvub@@@Z ENDP			; vus::vus<vub>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$or@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$or@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z PROC	; or<vub>, COMDAT

; 484  : DEFINE_TEMPLATE_OP_ARITHMETIC2(or, _mm_or_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	por	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$or@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z ENDP	; or<vub>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate@$0IA@@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate@$0IA@@@YA?AUvcs@@AEBU0@@Z PROC		; permutate<128>, COMDAT

; 592  : DEFINE_OP_PERMUTATION4(permutate, vcs, _mm_shuffle_epi32);

	pshufd	xmm0, XMMWORD PTR [rdx], 128		; 00000080H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate@$0IA@@@YA?AUvcs@@AEBU0@@Z ENDP		; permutate<128>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate@$07@@YA?AUvcs@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate@$07@@YA?AUvcs@@AEBU0@@Z PROC		; permutate<8>, COMDAT

; 592  : DEFINE_OP_PERMUTATION4(permutate, vcs, _mm_shuffle_epi32);

	pshufd	xmm0, XMMWORD PTR [rdx], 8
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate@$07@@YA?AUvcs@@AEBU0@@Z ENDP		; permutate<8>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$permutate_low@$0LB@@@YA?AUvus@@AEBU0@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
??$permutate_low@$0LB@@@YA?AUvus@@AEBU0@@Z PROC		; permutate_low<177>, COMDAT

; 582  : DEFINE_OP_PERMUTATION4(permutate_low, vus, _mm_shufflelo_epi16);

	pshuflw	xmm0, XMMWORD PTR [rdx], 177		; 000000b1H
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$permutate_low@$0LB@@@YA?AUvus@@AEBU0@@Z ENDP		; permutate_low<177>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvcs@@@vus@@QEAA@AEBUvcs@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvcs@@@vus@@QEAA@AEBUvcs@@@Z PROC			; vus::vus<vcs>, COMDAT

; 118  : PVECTOR_STRUCT(vus,  __m128i, unsigned __int16, 16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvcs@@@vus@@QEAA@AEBUvcs@@@Z ENDP			; vus::vus<vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvcs@@@vub@@QEAA@AEBUvcs@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvcs@@@vub@@QEAA@AEBUvcs@@@Z PROC			; vub::vub<vcs>, COMDAT

; 116  : PVECTOR_STRUCT(vub,  __m128i, unsigned __int8,  16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvcs@@@vub@@QEAA@AEBUvcs@@@Z ENDP			; vub::vub<vcs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvs@@@vus@@QEAA@AEBUvs@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvs@@@vus@@QEAA@AEBUvs@@@Z PROC			; vus::vus<vs>, COMDAT

; 118  : PVECTOR_STRUCT(vus,  __m128i, unsigned __int16, 16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$?0Uvs@@@vus@@QEAA@AEBUvs@@@Z ENDP			; vus::vus<vs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$xor@Uvs@@@@YA?AUvs@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$xor@Uvs@@@@YA?AUvs@@AEBU0@0PEAT__m128i@@@Z PROC	; xor<vs>, COMDAT

; 486  : DEFINE_TEMPLATE_OP_ARITHMETIC2(xor, _mm_xor_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pxor	xmm0, XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$xor@Uvs@@@@YA?AUvs@@AEBU0@0PEAT__m128i@@@Z ENDP	; xor<vs>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$and@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
__formal$ = 32
??$and@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z PROC	; and<vub>, COMDAT

; 488  : DEFINE_TEMPLATE_OP_ARITHMETIC2(and, _mm_and_si128);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pand	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
??$and@Uvub@@@@YA?AUvub@@AEBU0@0PEAT__m128i@@@Z ENDP	; and<vub>
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$?0Uvus@@@vs@@QEAA@AEBUvus@@@Z
_TEXT	SEGMENT
this$ = 8
a$ = 16
??$?0Uvus@@@vs@@QEAA@AEBUvus@@@Z PROC			; vs::vs<vus>, COMDAT

; 117  : PVECTOR_STRUCT(vs,   __m128i, __int16,          16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	lea	rax, OFFSET FLAT:?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B ; `smin'::`2'::mid
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm0
	ret	0
??$?0Uvus@@@vs@@QEAA@AEBUvus@@@Z ENDP			; vs::vs<vus>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\adeinterleave.h
_TEXT	ENDS
;	COMDAT ?Deinterleave@@YAXPEAE0D@Z
_TEXT	SEGMENT
pbInput$ = 8
pbOutput$ = 16
bRate$ = 24
?Deinterleave@@YAXPEAE0D@Z PROC				; Deinterleave, COMDAT

; 652  :     switch (bRate & 0x3)

	movsx	r9d, r8b
	and	r9d, 3
	je	$LN1@Deinterlea
	sub	r9d, 1
	je	$LN2@Deinterlea
	sub	r9d, 1
	je	$LN3@Deinterlea
	cmp	r9d, 1
	jne	$LN5@Deinterlea

; 653  :     {
; 654  :         case 0x3:
; 655  :             DeinterleaveBPSK(pbInput, pbOutput);

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al
	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+1], al
	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+2], al
	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+3], al
	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+47], al

; 665  :             break;
; 666  :     }
; 667  : }

	ret	0
$LN3@Deinterlea:

; 656  :             break;
; 657  :         case 0x2:
; 658  :             DeinterleaveQPSK(pbInput, pbOutput);

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al
	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+1], al
	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+2], al
	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+3], al
	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rcx+48]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rcx+54]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rcx+60]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rcx+66]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rcx+72]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rcx+78]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rcx+84]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rcx+90]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rcx+49]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rcx+55]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rcx+61]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rcx+67]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rcx+73]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rcx+79]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rcx+85]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rcx+91]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rcx+50]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rcx+56]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rcx+62]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rcx+68]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rcx+74]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rcx+80]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rcx+86]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rcx+92]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rcx+51]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rcx+57]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rcx+63]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rcx+69]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rcx+75]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rcx+81]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rcx+87]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rcx+93]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rcx+52]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rcx+58]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rcx+64]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rcx+70]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rcx+76]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rcx+82]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rcx+88]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rcx+94]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rcx+53]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rcx+59]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rcx+65]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rcx+71]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rcx+77]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rcx+83]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rcx+89]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rcx+95]
	mov	BYTE PTR [rdx+95], al

; 665  :             break;
; 666  :     }
; 667  : }

	ret	0
$LN2@Deinterlea:

; 659  :             break;
; 660  :         case 0x1:
; 661  :             Deinterleave16QAM(pbInput, pbOutput);

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al
	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+1], al
	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+2], al
	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+3], al
	movzx	eax, BYTE PTR [rcx+48]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rcx+61]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rcx+72]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rcx+85]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rcx+96]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rcx+109]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rcx+120]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rcx+133]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rcx+144]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rcx+157]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rcx+168]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rcx+181]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rcx+49]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rcx+60]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rcx+73]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rcx+84]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rcx+97]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rcx+108]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rcx+121]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rcx+132]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rcx+145]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rcx+156]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rcx+169]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rcx+180]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rcx+50]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rcx+63]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rcx+74]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rcx+87]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rcx+98]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rcx+111]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rcx+122]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rcx+135]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rcx+146]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rcx+159]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rcx+170]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rcx+183]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rcx+51]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rcx+62]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rcx+75]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rcx+86]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rcx+99]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rcx+110]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rcx+123]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rcx+134]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rcx+147]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rcx+158]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rcx+171]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rcx+182]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rcx+52]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rcx+65]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rcx+76]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rcx+89]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rcx+100]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rcx+113]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rcx+124]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rcx+137]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rcx+148]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rcx+161]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rcx+172]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rcx+185]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rcx+53]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rcx+64]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rcx+77]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rcx+88]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rcx+101]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rcx+112]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rcx+125]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rcx+136]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rcx+149]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rcx+160]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rcx+173]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rcx+184]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rcx+54]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rcx+67]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rcx+78]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rcx+91]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rcx+102]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rcx+115]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rcx+126]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rcx+139]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rcx+150]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rcx+163]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rcx+174]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rcx+187]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rcx+55]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rcx+66]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rcx+79]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rcx+90]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rcx+103]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rcx+114]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rcx+127]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rcx+138]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rcx+151]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rcx+162]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rcx+175]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rcx+186]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rcx+56]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rcx+69]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rcx+80]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rcx+93]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rcx+104]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rcx+117]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rcx+128]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rcx+141]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rcx+152]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rcx+165]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rcx+176]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rcx+189]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rcx+57]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rcx+68]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rcx+81]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rcx+92]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rcx+105]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rcx+116]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rcx+129]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rcx+140]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rcx+153]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rcx+164]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rcx+177]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rcx+188]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rcx+58]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rcx+71]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rcx+82]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rcx+95]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rcx+106]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rcx+119]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rcx+130]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rcx+143]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rcx+154]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rcx+167]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rcx+178]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rcx+191]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rcx+59]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rcx+70]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rcx+83]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rcx+94]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rcx+107]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rcx+118]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rcx+131]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rcx+142]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rcx+155]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rcx+166]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rcx+179]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rcx+190]
	mov	BYTE PTR [rdx+191], al

; 665  :             break;
; 666  :     }
; 667  : }

	ret	0
$LN1@Deinterlea:

; 662  :             break;
; 663  :         case 0x0:
; 664  :             Deinterleave64QAM(pbInput, pbOutput);

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx], al
	movzx	eax, BYTE PTR [rcx+20]
	mov	BYTE PTR [rdx+1], al
	movzx	eax, BYTE PTR [rcx+37]
	mov	BYTE PTR [rdx+2], al
	movzx	eax, BYTE PTR [rcx+54]
	mov	BYTE PTR [rdx+3], al
	movzx	eax, BYTE PTR [rcx+74]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rcx+91]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rcx+108]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rcx+128]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rcx+145]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rcx+162]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rcx+182]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rcx+199]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rcx+216]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rcx+236]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rcx+253]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rcx+270]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rcx+1]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rcx+18]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rcx+38]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rcx+55]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rcx+72]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rcx+92]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rcx+109]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rcx+126]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rcx+146]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rcx+163]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rcx+180]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rcx+200]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rcx+217]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rcx+234]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rcx+254]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rcx+271]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rcx+19]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rcx+36]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rcx+56]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rcx+73]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rcx+90]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rcx+110]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rcx+127]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rcx+144]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rcx+164]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rcx+181]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rcx+198]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rcx+218]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rcx+235]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rcx+252]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rcx+272]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rcx+3]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rcx+23]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rcx+40]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rcx+57]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rcx+77]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rcx+94]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rcx+111]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rcx+131]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rcx+148]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rcx+165]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rcx+185]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rcx+202]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rcx+219]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rcx+239]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rcx+256]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rcx+273]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rcx+4]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rcx+21]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rcx+41]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rcx+58]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rcx+75]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rcx+95]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rcx+112]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rcx+129]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rcx+149]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rcx+166]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rcx+183]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rcx+203]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rcx+220]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rcx+237]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rcx+257]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rcx+274]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rcx+5]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rcx+22]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rcx+39]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rcx+59]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rcx+76]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rcx+93]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rcx+113]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rcx+130]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rcx+147]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rcx+167]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rcx+184]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rcx+201]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rcx+221]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rcx+238]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rcx+255]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rcx+275]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rcx+6]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rcx+26]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rcx+43]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rcx+60]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rcx+80]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rcx+97]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rcx+114]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rcx+134]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rcx+151]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rcx+168]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rcx+188]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rcx+205]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rcx+222]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rcx+242]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rcx+259]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rcx+276]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rcx+7]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rcx+24]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rcx+44]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rcx+61]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rcx+78]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rcx+98]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rcx+115]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rcx+132]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rcx+152]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rcx+169]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rcx+186]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rcx+206]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rcx+223]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rcx+240]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rcx+260]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rcx+277]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rcx+8]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rcx+25]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rcx+42]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rcx+62]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rcx+79]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rcx+96]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rcx+116]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rcx+133]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rcx+150]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rcx+170]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rcx+187]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rcx+204]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rcx+224]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rcx+241]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rcx+258]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rcx+278]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rcx+9]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rcx+29]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rcx+46]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rcx+63]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rcx+83]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rcx+100]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rcx+117]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rcx+137]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rcx+154]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rcx+171]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rcx+191]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rcx+208]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rcx+225]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rcx+245]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rcx+262]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rcx+279]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rcx+10]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rcx+27]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rcx+47]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rcx+64]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rcx+81]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rcx+101]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rcx+118]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rcx+135]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rcx+155]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rcx+172]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rcx+189]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rcx+209]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rcx+226]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rcx+243]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rcx+263]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rcx+280]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rcx+11]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rcx+28]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rcx+45]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rcx+65]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rcx+82]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rcx+99]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rcx+119]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rcx+136]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rcx+153]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rcx+173]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rcx+190]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rcx+207]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rcx+227]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rcx+244]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rcx+261]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rcx+281]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rcx+12]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rcx+32]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rcx+49]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rcx+66]
	mov	BYTE PTR [rdx+195], al
	movzx	eax, BYTE PTR [rcx+86]
	mov	BYTE PTR [rdx+196], al
	movzx	eax, BYTE PTR [rcx+103]
	mov	BYTE PTR [rdx+197], al
	movzx	eax, BYTE PTR [rcx+120]
	mov	BYTE PTR [rdx+198], al
	movzx	eax, BYTE PTR [rcx+140]
	mov	BYTE PTR [rdx+199], al
	movzx	eax, BYTE PTR [rcx+157]
	mov	BYTE PTR [rdx+200], al
	movzx	eax, BYTE PTR [rcx+174]
	mov	BYTE PTR [rdx+201], al
	movzx	eax, BYTE PTR [rcx+194]
	mov	BYTE PTR [rdx+202], al
	movzx	eax, BYTE PTR [rcx+211]
	mov	BYTE PTR [rdx+203], al
	movzx	eax, BYTE PTR [rcx+228]
	mov	BYTE PTR [rdx+204], al
	movzx	eax, BYTE PTR [rcx+248]
	mov	BYTE PTR [rdx+205], al
	movzx	eax, BYTE PTR [rcx+265]
	mov	BYTE PTR [rdx+206], al
	movzx	eax, BYTE PTR [rcx+282]
	mov	BYTE PTR [rdx+207], al
	movzx	eax, BYTE PTR [rcx+13]
	mov	BYTE PTR [rdx+208], al
	movzx	eax, BYTE PTR [rcx+30]
	mov	BYTE PTR [rdx+209], al
	movzx	eax, BYTE PTR [rcx+50]
	mov	BYTE PTR [rdx+210], al
	movzx	eax, BYTE PTR [rcx+67]
	mov	BYTE PTR [rdx+211], al
	movzx	eax, BYTE PTR [rcx+84]
	mov	BYTE PTR [rdx+212], al
	movzx	eax, BYTE PTR [rcx+104]
	mov	BYTE PTR [rdx+213], al
	movzx	eax, BYTE PTR [rcx+121]
	mov	BYTE PTR [rdx+214], al
	movzx	eax, BYTE PTR [rcx+138]
	mov	BYTE PTR [rdx+215], al
	movzx	eax, BYTE PTR [rcx+158]
	mov	BYTE PTR [rdx+216], al
	movzx	eax, BYTE PTR [rcx+175]
	mov	BYTE PTR [rdx+217], al
	movzx	eax, BYTE PTR [rcx+192]
	mov	BYTE PTR [rdx+218], al
	movzx	eax, BYTE PTR [rcx+212]
	mov	BYTE PTR [rdx+219], al
	movzx	eax, BYTE PTR [rcx+229]
	mov	BYTE PTR [rdx+220], al
	movzx	eax, BYTE PTR [rcx+246]
	mov	BYTE PTR [rdx+221], al
	movzx	eax, BYTE PTR [rcx+266]
	mov	BYTE PTR [rdx+222], al
	movzx	eax, BYTE PTR [rcx+283]
	mov	BYTE PTR [rdx+223], al
	movzx	eax, BYTE PTR [rcx+14]
	mov	BYTE PTR [rdx+224], al
	movzx	eax, BYTE PTR [rcx+31]
	mov	BYTE PTR [rdx+225], al
	movzx	eax, BYTE PTR [rcx+48]
	mov	BYTE PTR [rdx+226], al
	movzx	eax, BYTE PTR [rcx+68]
	mov	BYTE PTR [rdx+227], al
	movzx	eax, BYTE PTR [rcx+85]
	mov	BYTE PTR [rdx+228], al
	movzx	eax, BYTE PTR [rcx+102]
	mov	BYTE PTR [rdx+229], al
	movzx	eax, BYTE PTR [rcx+122]
	mov	BYTE PTR [rdx+230], al
	movzx	eax, BYTE PTR [rcx+139]
	mov	BYTE PTR [rdx+231], al
	movzx	eax, BYTE PTR [rcx+156]
	mov	BYTE PTR [rdx+232], al
	movzx	eax, BYTE PTR [rcx+176]
	mov	BYTE PTR [rdx+233], al
	movzx	eax, BYTE PTR [rcx+193]
	mov	BYTE PTR [rdx+234], al
	movzx	eax, BYTE PTR [rcx+210]
	mov	BYTE PTR [rdx+235], al
	movzx	eax, BYTE PTR [rcx+230]
	mov	BYTE PTR [rdx+236], al
	movzx	eax, BYTE PTR [rcx+247]
	mov	BYTE PTR [rdx+237], al
	movzx	eax, BYTE PTR [rcx+264]
	mov	BYTE PTR [rdx+238], al
	movzx	eax, BYTE PTR [rcx+284]
	mov	BYTE PTR [rdx+239], al
	movzx	eax, BYTE PTR [rcx+15]
	mov	BYTE PTR [rdx+240], al
	movzx	eax, BYTE PTR [rcx+35]
	mov	BYTE PTR [rdx+241], al
	movzx	eax, BYTE PTR [rcx+52]
	mov	BYTE PTR [rdx+242], al
	movzx	eax, BYTE PTR [rcx+69]
	mov	BYTE PTR [rdx+243], al
	movzx	eax, BYTE PTR [rcx+89]
	mov	BYTE PTR [rdx+244], al
	movzx	eax, BYTE PTR [rcx+106]
	mov	BYTE PTR [rdx+245], al
	movzx	eax, BYTE PTR [rcx+123]
	mov	BYTE PTR [rdx+246], al
	movzx	eax, BYTE PTR [rcx+143]
	mov	BYTE PTR [rdx+247], al
	movzx	eax, BYTE PTR [rcx+160]
	mov	BYTE PTR [rdx+248], al
	movzx	eax, BYTE PTR [rcx+177]
	mov	BYTE PTR [rdx+249], al
	movzx	eax, BYTE PTR [rcx+197]
	mov	BYTE PTR [rdx+250], al
	movzx	eax, BYTE PTR [rcx+214]
	mov	BYTE PTR [rdx+251], al
	movzx	eax, BYTE PTR [rcx+231]
	mov	BYTE PTR [rdx+252], al
	movzx	eax, BYTE PTR [rcx+251]
	mov	BYTE PTR [rdx+253], al
	movzx	eax, BYTE PTR [rcx+268]
	mov	BYTE PTR [rdx+254], al
	movzx	eax, BYTE PTR [rcx+285]
	mov	BYTE PTR [rdx+255], al
	movzx	eax, BYTE PTR [rcx+16]
	mov	BYTE PTR [rdx+256], al
	movzx	eax, BYTE PTR [rcx+33]
	mov	BYTE PTR [rdx+257], al
	movzx	eax, BYTE PTR [rcx+53]
	mov	BYTE PTR [rdx+258], al
	movzx	eax, BYTE PTR [rcx+70]
	mov	BYTE PTR [rdx+259], al
	movzx	eax, BYTE PTR [rcx+87]
	mov	BYTE PTR [rdx+260], al
	movzx	eax, BYTE PTR [rcx+107]
	mov	BYTE PTR [rdx+261], al
	movzx	eax, BYTE PTR [rcx+124]
	mov	BYTE PTR [rdx+262], al
	movzx	eax, BYTE PTR [rcx+141]
	mov	BYTE PTR [rdx+263], al
	movzx	eax, BYTE PTR [rcx+161]
	mov	BYTE PTR [rdx+264], al
	movzx	eax, BYTE PTR [rcx+178]
	mov	BYTE PTR [rdx+265], al
	movzx	eax, BYTE PTR [rcx+195]
	mov	BYTE PTR [rdx+266], al
	movzx	eax, BYTE PTR [rcx+215]
	mov	BYTE PTR [rdx+267], al
	movzx	eax, BYTE PTR [rcx+232]
	mov	BYTE PTR [rdx+268], al
	movzx	eax, BYTE PTR [rcx+249]
	mov	BYTE PTR [rdx+269], al
	movzx	eax, BYTE PTR [rcx+269]
	mov	BYTE PTR [rdx+270], al
	movzx	eax, BYTE PTR [rcx+286]
	mov	BYTE PTR [rdx+271], al
	movzx	eax, BYTE PTR [rcx+17]
	mov	BYTE PTR [rdx+272], al
	movzx	eax, BYTE PTR [rcx+34]
	mov	BYTE PTR [rdx+273], al
	movzx	eax, BYTE PTR [rcx+51]
	mov	BYTE PTR [rdx+274], al
	movzx	eax, BYTE PTR [rcx+71]
	mov	BYTE PTR [rdx+275], al
	movzx	eax, BYTE PTR [rcx+88]
	mov	BYTE PTR [rdx+276], al
	movzx	eax, BYTE PTR [rcx+105]
	mov	BYTE PTR [rdx+277], al
	movzx	eax, BYTE PTR [rcx+125]
	mov	BYTE PTR [rdx+278], al
	movzx	eax, BYTE PTR [rcx+142]
	mov	BYTE PTR [rdx+279], al
	movzx	eax, BYTE PTR [rcx+159]
	mov	BYTE PTR [rdx+280], al
	movzx	eax, BYTE PTR [rcx+179]
	mov	BYTE PTR [rdx+281], al
	movzx	eax, BYTE PTR [rcx+196]
	mov	BYTE PTR [rdx+282], al
	movzx	eax, BYTE PTR [rcx+213]
	mov	BYTE PTR [rdx+283], al
	movzx	eax, BYTE PTR [rcx+233]
	mov	BYTE PTR [rdx+284], al
	movzx	eax, BYTE PTR [rcx+250]
	mov	BYTE PTR [rdx+285], al
	movzx	eax, BYTE PTR [rcx+267]
	mov	BYTE PTR [rdx+286], al
	movzx	eax, BYTE PTR [rcx+287]
	mov	BYTE PTR [rdx+287], al
$LN5@Deinterlea:

; 665  :             break;
; 666  :     }
; 667  : }

	fatret	0
?Deinterleave@@YAXPEAE0D@Z ENDP				; Deinterleave
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ?smin@@YA?AUvub@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?smin@@YA?AUvub@@AEBU1@0@Z PROC				; smin, COMDAT

; 979  : DEFINE_OP_ARITHMETIC2(smin, vub, _mm_min_epu8);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pminub	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?smin@@YA?AUvub@@AEBU1@0@Z ENDP				; smin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?smin@@YA?AUvs@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?smin@@YA?AUvs@@AEBU1@0@Z PROC				; smin, COMDAT

; 977  : DEFINE_OP_ARITHMETIC2(smin, vs, _mm_min_epi16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pminsw	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?smin@@YA?AUvs@@AEBU1@0@Z ENDP				; smin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?mul_high@@YA?AUvs@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?mul_high@@YA?AUvs@@AEBU1@0@Z PROC			; mul_high, COMDAT

; 805  : DEFINE_OP_ARITHMETIC2(mul_high, vs, _mm_mulhi_epi16);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pmulhw	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?mul_high@@YA?AUvs@@AEBU1@0@Z ENDP			; mul_high
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?shift_left@@YA?AUvq@@AEBU1@H@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
nbits$ = 24
?shift_left@@YA?AUvq@@AEBU1@H@Z PROC			; shift_left, COMDAT

; 693  : DEFINE_OP_SHIFT_LEFT(shift_left, vq, _mm_slli_epi64);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	psllq	xmm0, 32				; 00000020H
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?shift_left@@YA?AUvq@@AEBU1@H@Z ENDP			; shift_left
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?sub@@YA?AUvub@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?sub@@YA?AUvub@@AEBU1@0@Z PROC				; sub, COMDAT

; 519  : DEFINE_OP_ARITHMETIC2(sub, vub, _mm_sub_epi8);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	psubb	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?sub@@YA?AUvub@@AEBU1@0@Z ENDP				; sub
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?add@@YA?AUvub@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?add@@YA?AUvub@@AEBU1@0@Z PROC				; add, COMDAT

; 495  : DEFINE_OP_ARITHMETIC2(add, vub, _mm_add_epi8);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	paddb	xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?add@@YA?AUvub@@AEBU1@0@Z ENDP				; add
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?interleave_high@@YA?AUvub@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?interleave_high@@YA?AUvub@@AEBU1@0@Z PROC		; interleave_high, COMDAT

; 432  : DEFINE_OP_ARITHMETIC2(interleave_high, vub, _mm_unpackhi_epi8);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	punpckhbw xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?interleave_high@@YA?AUvub@@AEBU1@0@Z ENDP		; interleave_high
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?interleave_low@@YA?AUvub@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?interleave_low@@YA?AUvub@@AEBU1@0@Z PROC		; interleave_low, COMDAT

; 414  : DEFINE_OP_ARITHMETIC2(interleave_low, vub, _mm_unpacklo_epi8);

	movdqa	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	punpcklbw xmm0, XMMWORD PTR [r8]
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?interleave_low@@YA?AUvub@@AEBU1@0@Z ENDP		; interleave_low
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ??$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ
_TEXT	SEGMENT
__$ReturnUdt$ = 8
??$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ PROC	; vector128_consts::middle<vs>, COMDAT

; 243  :         const static vus::data_type mid = {
; 244  :             0x8000, 0x8000, 0x8000, 0x8000,
; 245  :             0x8000, 0x8000, 0x8000, 0x8000,
; 246  :         };
; 247  :         return (vs)(vus)mid;

	movdqa	xmm0, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	lea	rax, OFFSET FLAT:?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B ; `smin'::`2'::mid
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm0

; 248  :     }

	ret	0
??$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ ENDP	; vector128_consts::middle<vs>
; Function compile flags: /Ogtpy
;	COMDAT ??$abs@Uvi@@@@YA?AUvi@@AEBU0@PEAT__m128i@@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
__formal$ = 24
??$abs@Uvi@@@@YA?AUvi@@AEBU0@PEAT__m128i@@@Z PROC	; abs<vi>, COMDAT

; 966  :     return xor(a, shift_right(a, sizeof(a[0])*8-1));

	movdqa	xmm1, XMMWORD PTR [rdx]
	mov	rax, rcx
	movdqa	xmm0, xmm1
	psrad	xmm0, 31
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rcx], xmm1

; 967  : }

	ret	0
??$abs@Uvi@@@@YA?AUvi@@AEBU0@PEAT__m128i@@@Z ENDP	; abs<vi>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__0xFFFFFFFF00000000FFFFFFFF00000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$??$__0xFFFFFFFF00000000FFFFFFFF00000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__0xFFFFFFFF00000000FFFFFFFF00000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$__0xFFFFFFFF00000000FFFFFFFF00000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
_TEXT	SEGMENT
t$161713 = 0
__$ReturnUdt$ = 32
??$__0xFFFFFFFF00000000FFFFFFFF00000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ PROC ; vector128_consts::__0xFFFFFFFF00000000FFFFFFFF00000000<vcs>, COMDAT

; 192  :     {

$LN19:
	sub	rsp, 24

; 193  :         vq t;
; 194  :         set_all_bits(t);

	movdqa	xmm0, XMMWORD PTR t$161713[rsp]

; 195  :         t = shift_left(t, 32);
; 196  :         return (T)t;

	mov	rax, rcx
	pcmpeqd	xmm0, xmm0
	psllq	xmm0, 32				; 00000020H
	movdqa	XMMWORD PTR [rcx], xmm0

; 197  :     }

	add	rsp, 24
	ret	0
??$__0xFFFFFFFF00000000FFFFFFFF00000000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ENDP ; vector128_consts::__0xFFFFFFFF00000000FFFFFFFF00000000<vcs>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$__0xFFFF0000FFFF0000FFFF0000FFFF0000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD imagerel $LN19
	DD	imagerel $LN19+30
	DD	imagerel $unwind$??$__0xFFFF0000FFFF0000FFFF0000FFFF0000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$__0xFFFF0000FFFF0000FFFF0000FFFF0000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$__0xFFFF0000FFFF0000FFFF0000FFFF0000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ
_TEXT	SEGMENT
t$161769 = 0
__$ReturnUdt$ = 32
??$__0xFFFF0000FFFF0000FFFF0000FFFF0000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ PROC ; vector128_consts::__0xFFFF0000FFFF0000FFFF0000FFFF0000<vcs>, COMDAT

; 183  :     {

$LN19:
	sub	rsp, 24

; 184  :         vi t;
; 185  :         set_all_bits(t);

	movdqa	xmm0, XMMWORD PTR t$161769[rsp]

; 186  :         t = shift_left(t, 16);
; 187  :         return (T)t;

	mov	rax, rcx
	pcmpeqd	xmm0, xmm0
	pslld	xmm0, 16
	movdqa	XMMWORD PTR [rcx], xmm0

; 188  :     }

	add	rsp, 24
	ret	0
??$__0xFFFF0000FFFF0000FFFF0000FFFF0000@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ ENDP ; vector128_consts::__0xFFFF0000FFFF0000FFFF0000FFFF0000<vcs>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_fd.c
_TEXT	ENDS
;	COMDAT ?__BB11APushSignalBlockToSyncFiFo@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z
_TEXT	SEGMENT
pRxContextA$ = 8
block$ = 16
?__BB11APushSignalBlockToSyncFiFo@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z PROC ; __BB11APushSignalBlockToSyncFiFo, COMDAT

; 293  :     vcs *pcTemp;
; 294  :     pcTemp = pRxContextA->rxFifos->g11a_lbSync.Push(7); // allocate buffer space

	mov	r8, QWORD PTR [rcx+792]
	mov	ecx, DWORD PTR [r8+43072]
	mov	eax, DWORD PTR [r8+43072]
	add	r8, 41024				; 0000a040H
	shl	rcx, 4
	add	rcx, r8
	add	rax, 7
	mov	DWORD PTR [r8+2048], eax

; 295  :     *(SignalBlock*)pcTemp = block;

	movdqa	xmm0, XMMWORD PTR [rdx]
	movdqa	XMMWORD PTR [rcx], xmm0
	movdqa	xmm1, XMMWORD PTR [rdx+16]
	movdqa	XMMWORD PTR [rcx+16], xmm1
	movdqa	xmm0, XMMWORD PTR [rdx+32]
	movdqa	XMMWORD PTR [rcx+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rdx+48]
	movdqa	XMMWORD PTR [rcx+48], xmm1
	movdqa	xmm0, XMMWORD PTR [rdx+64]
	movdqa	XMMWORD PTR [rcx+64], xmm0
	movdqa	xmm1, XMMWORD PTR [rdx+80]
	movdqa	XMMWORD PTR [rcx+80], xmm1
	movdqa	xmm0, XMMWORD PTR [rdx+96]
	movdqa	XMMWORD PTR [rcx+96], xmm0

; 296  : }

	ret	0
?__BB11APushSignalBlockToSyncFiFo@@YAXPEAU_BB11A_RX_CONTEXT@@AEBUSignalBlock@@@Z ENDP ; __BB11APushSignalBlockToSyncFiFo
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ademap.h
_TEXT	ENDS
;	COMDAT ?DemapLimit_11a@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
pc$ = 8
?DemapLimit_11a@@YAXPEAUvcs@@@Z PROC			; DemapLimit_11a, COMDAT

; 13   :     static const vcs::data_type rgbDemapMin = {
; 14   :         { -128, -128 }, { -128, -128 }, { -128, -128 }, { -128, -128 },
; 15   :     };
; 16   :     static const vcs::data_type rgbDemapMax = {
; 17   :         { 127, 127 }, { 127, 127 }, { 127, 127 }, { 127, 127 },
; 18   :     };
; 19   : 
; 20   :     for (int i = 0; i < 16; i++)

	mov	eax, 16
	npad	11
$LL3@DemapLimit:

; 21   :     {
; 22   :         pc[i] = smin(smax(pc[i], rgbDemapMin), rgbDemapMax);

	movdqa	xmm0, XMMWORD PTR [rcx]
	add	rcx, 16
	sub	rax, 1
	pmaxsw	xmm0, XMMWORD PTR ?rgbDemapMin@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	pminsw	xmm0, XMMWORD PTR ?rgbDemapMax@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	movdqa	XMMWORD PTR [rcx-16], xmm0
	jne	SHORT $LL3@DemapLimit

; 23   :     }
; 24   : }

	fatret	0
?DemapLimit_11a@@YAXPEAUvcs@@@Z ENDP			; DemapLimit_11a
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\afreq.h
_TEXT	ENDS
;	COMDAT ?rotate@@YA?AUvcs@@AEBU1@AEBUvs@@1@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
cos_cos$ = 24
sin_nsin$ = 32
?rotate@@YA?AUvcs@@AEBU1@AEBUvs@@1@Z PROC		; rotate, COMDAT

; 95   :     vcs m1 = (vcs)mul_high((vs&)a, cos_cos);

	movdqa	xmm0, XMMWORD PTR [rdx]

; 96   :     vcs m2 = (vcs)mul_high((vs&)flip(a), sin_nsin);
; 97   :     return add(m1, m2);

	mov	rax, rcx
	movdqa	xmm2, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pmulhw	xmm2, XMMWORD PTR [r8]
	pmulhw	xmm1, XMMWORD PTR [r9]
	paddw	xmm2, xmm1
	movdqa	XMMWORD PTR [rcx], xmm2

; 98   : }

	ret	0
?rotate@@YA?AUvcs@@AEBU1@AEBUvs@@1@Z ENDP		; rotate
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\fetchdt.h
_TEXT	ENDS
;	COMDAT ?Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z
_TEXT	SEGMENT
block40M$ = 8
v3$ = 16
v4$ = 24
v5$ = 32
v6$ = 40
?Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z PROC	; Mem2VcsH, COMDAT

; 40   :     const static vcs::data_type m128FirstHalfMask  = { ~0, ~0, ~0, ~0,  0,  0,  0,  0 };
; 41   :     const static vcs::data_type m128SecondHalfMask = {  0,  0,  0,  0, ~0, ~0, ~0, ~0 };
; 42   : 
; 43   :     vcs vFirstHalfMask = m128FirstHalfMask;
; 44   :     vcs vSecondHalfMask = m128SecondHalfMask;

	movdqa	xmm4, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B

; 45   : 
; 46   :     vcs vTemp = permutate<0x80>(block40M[0]);

	pshufd	xmm1, XMMWORD PTR [rcx], 128		; 00000080H
	mov	rax, QWORD PTR v6$[rsp]

; 47   :     vTemp = and(vTemp, vSecondHalfMask);
; 48   :     v3 = xor(v3, vTemp);

	movdqa	xmm0, XMMWORD PTR [rdx]
	pand	xmm1, xmm4
	pxor	xmm0, xmm1
	movdqa	XMMWORD PTR [rdx], xmm0

; 49   : 
; 50   :     v4 = permutate<0x08>(block40M[1]);

	pshufd	xmm1, XMMWORD PTR [rcx+16], 8

; 51   :     v4 = and(v4, vFirstHalfMask);

	pand	xmm1, xmm3
	movdqa	XMMWORD PTR [r8], xmm1

; 52   :     vTemp = permutate<0x80>(block40M[2]);

	pshufd	xmm0, XMMWORD PTR [rcx+32], 128		; 00000080H

; 53   :     vTemp = and(vTemp, vSecondHalfMask);

	pand	xmm0, xmm4

; 54   :     v4 = xor(v4, vTemp);

	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [r8], xmm1

; 55   : 
; 56   :     v5 = permutate<0x08>(block40M[3]);

	pshufd	xmm2, XMMWORD PTR [rcx+48], 8

; 57   :     v5 = and(v5, vFirstHalfMask);

	pand	xmm2, xmm3
	movdqa	XMMWORD PTR [r9], xmm2

; 58   :     vTemp = permutate<0x80>(block40M[4]);

	pshufd	xmm0, XMMWORD PTR [rcx+64], 128		; 00000080H

; 59   :     vTemp = and(vTemp, vSecondHalfMask);

	pand	xmm0, xmm4

; 60   :     v5 = xor(v5, vTemp);

	pxor	xmm2, xmm0
	movdqa	XMMWORD PTR [r9], xmm2

; 61   : 
; 62   :     v6 = permutate<0x08>(block40M[5]);

	pshufd	xmm1, XMMWORD PTR [rcx+80], 8

; 63   :     v6 = and(v6, vFirstHalfMask);

	pand	xmm1, xmm3
	movdqa	XMMWORD PTR [rax], xmm1

; 64   :     vTemp = permutate<0x80>(block40M[6]);

	pshufd	xmm0, XMMWORD PTR [rcx+96], 128		; 00000080H

; 65   :     vTemp = and(vTemp, vSecondHalfMask);

	pand	xmm0, xmm4

; 66   :     v6 = xor(v6, vTemp);

	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rax], xmm1

; 67   : }

	ret	0
?Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z ENDP	; Mem2VcsH
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z
_TEXT	SEGMENT
block40M$ = 8
v0$ = 16
v1$ = 24
v2$ = 32
v3$ = 40
?Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z PROC	; Mem2VcsL, COMDAT

; 10   :     const static vcs::data_type m128FirstHalfMask  = { ~0, ~0, ~0, ~0,  0,  0,  0,  0 };
; 11   :     const static vcs::data_type m128SecondHalfMask = {  0,  0,  0,  0, ~0, ~0, ~0, ~0 };
; 12   : 
; 13   :     vcs vFirstHalfMask = m128FirstHalfMask;

	movdqa	xmm4, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B

; 14   :     vcs vSecondHalfMask = m128SecondHalfMask;

	movdqa	xmm3, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B

; 15   : 
; 16   :     v0 = permutate<0x08>(block40M[0]);

	pshufd	xmm1, XMMWORD PTR [rcx], 8
	mov	rax, QWORD PTR v3$[rsp]

; 17   :     v0 = and(v0, vFirstHalfMask);               // get two from 4 samples, saved in low xmm0 QWORD

	pand	xmm1, xmm4
	movdqa	XMMWORD PTR [rdx], xmm1

; 18   :     vcs vTemp = permutate<0x80>(block40M[1]);

	pshufd	xmm0, XMMWORD PTR [rcx+16], 128		; 00000080H

; 19   :     vTemp = and(vTemp, vSecondHalfMask);        // get two from 4 samples, saved in high xmm7 QWORD

	pand	xmm0, xmm3

; 20   :     v0 = xor(v0, vTemp);                        // save down sampled 4 samples in xmm0

	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rdx], xmm1

; 21   : 
; 22   :     v1 = permutate<0x08>(block40M[2]);

	pshufd	xmm2, XMMWORD PTR [rcx+32], 8

; 23   :     v1 = and(v1, vFirstHalfMask);

	pand	xmm2, xmm4
	movdqa	XMMWORD PTR [r8], xmm2

; 24   :     vTemp = permutate<0x80>(block40M[3]);

	pshufd	xmm0, XMMWORD PTR [rcx+48], 128		; 00000080H

; 25   :     vTemp = and(vTemp, vSecondHalfMask);

	pand	xmm0, xmm3

; 26   :     v1 = xor(v1, vTemp);

	pxor	xmm2, xmm0
	movdqa	XMMWORD PTR [r8], xmm2

; 27   : 
; 28   :     v2 = permutate<0x08>(block40M[4]);

	pshufd	xmm1, XMMWORD PTR [rcx+64], 8

; 29   :     v2 = and(v2, vFirstHalfMask);

	pand	xmm1, xmm4
	movdqa	XMMWORD PTR [r9], xmm1

; 30   :     vTemp = permutate<0x80>(block40M[5]);

	pshufd	xmm0, XMMWORD PTR [rcx+80], 128		; 00000080H

; 31   :     vTemp = and(vTemp, vSecondHalfMask);

	pand	xmm0, xmm3

; 32   :     v2 = xor(v2, vTemp);

	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [r9], xmm1

; 33   : 
; 34   :     v3 = permutate<0x08>(block40M[6]);

	pshufd	xmm0, XMMWORD PTR [rcx+96], 8

; 35   :     v3 = and(v3, vFirstHalfMask);

	pand	xmm0, xmm4
	movdqa	XMMWORD PTR [rax], xmm0

; 36   : }

	ret	0
?Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z ENDP	; Mem2VcsL
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$??$FFTSSEEx@$03@@YAXPEAUvcs@@@Z DD imagerel $LN131
	DD	imagerel $LN131+107
	DD	imagerel $unwind$??$FFTSSEEx@$03@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$FFTSSEEx@$03@@YAXPEAUvcs@@@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_r4dif.h
xdata	ENDS
;	COMDAT ??$FFTSSEEx@$03@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
t$163404 = 0
t$163242 = 0
t$163176 = 0
pInput$ = 32
??$FFTSSEEx@$03@@YAXPEAUvcs@@@Z PROC			; FFTSSEEx<4>, COMDAT

; 65   : {

$LN131:
	sub	rsp, 24

; 66   :     const int INPUT_SHIFT = 2;
; 67   : 
; 68   :     vcs xmm3 = vector128_consts::__0xFFFFFFFF00000000FFFFFFFF00000000<vcs>();
; 69   :     vcs xmm5 = vector128_consts::__0xFFFFFFFFFFFFFFFF0000000000000000<vcs>();
; 70   :     vcs xmm0 = shift_right(*pInput, INPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR [rcx]
	movdqa	xmm0, XMMWORD PTR t$163242[rsp]
	pcmpeqd	xmm0, xmm0
	psraw	xmm2, 2

; 71   : 
; 72   :     vcs xmm4 = permutate<0x4e>(xmm0); // xmm4 =  Q1  I1  Q0  I0 Q3 I3 Q2 I2
; 73   :     xmm0 = xor(xmm0, xmm5);             // xmm0 = -Q3 -I3 -Q2 -I2 Q1 I1 Q0 I0

	movdqa	xmm1, xmm2
	pslldq	xmm0, 8
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm2, 78				; 0000004eH

; 74   :     xmm0 = saturated_add(xmm0, xmm4);             // xmm0 =  A-B, A+B'

	paddsw	xmm1, xmm0

; 75   : 
; 76   :     xmm5 = vector128_consts::__0xFFFF0000000000000000000000000000<vcs>();
; 77   :     xmm0 = permutate_high<0xb4>(xmm0);   // xmm0 =  I3 Q3 Q2 I2 Q1 I1 Q0 I0

	pshufhw	xmm2, xmm1, 180				; 000000b4H
	movdqa	xmm0, XMMWORD PTR t$163404[rsp]
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 14

; 78   :     xmm0 = xor(xmm0, xmm5);             // xmm0 = -I3 Q3 Q2 I2 Q1 I1 Q0 I0 = upper.4 * -j

	pxor	xmm2, xmm0
	movdqa	xmm0, XMMWORD PTR t$163176[rsp]
	pcmpeqd	xmm0, xmm0

; 79   : 
; 80   :     vcs xmm2 = permutate<0xb1>(xmm0); // xmm2 =  I2  Q2 I3 Q3  I0  Q0 I1 Q1
; 81   :     xmm0 = xor(xmm0, xmm3);             // xmm0 = -Q3 -I3 Q2 I2 -Q1 -I1 Q0 I0

	movdqa	xmm1, xmm2
	psllq	xmm0, 32				; 00000020H
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H

; 82   : 
; 83   :     *pInput = saturated_add(xmm0, xmm2);

	paddsw	xmm1, xmm0
	movdqa	XMMWORD PTR [rcx], xmm1

; 84   : }

	add	rsp, 24
	ret	0
??$FFTSSEEx@$03@@YAXPEAUvcs@@@Z ENDP			; FFTSSEEx<4>
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ?hmin@@YA?AUvub@@AEBU1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
?hmin@@YA?AUvub@@AEBU1@@Z PROC				; hmin, COMDAT

; 1023 : DEFINE_OP_DUPLICATION16_OPERATION(hmin, vub, smin);

	movaps	xmm0, XMMWORD PTR [rdx]
	mov	rax, rcx
	pshufd	xmm1, xmm0, 78				; 0000004eH
	pminub	xmm1, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pminub	xmm1, xmm0
	punpcklbw xmm1, xmm1
	punpcklbw xmm1, xmm1
	pshufd	xmm0, xmm1, 78				; 0000004eH
	pminub	xmm1, xmm0
	pshufd	xmm0, xmm1, 177				; 000000b1H
	pminub	xmm1, xmm0
	movdqa	XMMWORD PTR [rcx], xmm1
	ret	0
?hmin@@YA?AUvub@@AEBU1@@Z ENDP				; hmin
; Function compile flags: /Ogtpy
_TEXT	ENDS
;	COMDAT ?smin@@YA?AUvus@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
b$ = 24
?smin@@YA?AUvus@@AEBU1@0@Z PROC				; smin, COMDAT

; 994  : DEFINE_OP_MINMAX_SIGNED_UNSIGNED(smin, vus, vs);

	mov	eax, DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51
	test	al, 1
	jne	SHORT $LN48@smin
	movdqa	xmm2, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	or	eax, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm2
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, eax
	jmp	SHORT $LN8@smin
$LN48@smin:
	movdqa	xmm2, XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
$LN8@smin:
	movdqa	xmm1, XMMWORD PTR [rdx]
	movdqa	xmm0, XMMWORD PTR [r8]
	mov	rax, rcx
	pxor	xmm1, xmm2
	pxor	xmm0, xmm2
	pminsw	xmm1, xmm0
	pxor	xmm1, xmm2
	movdqa	XMMWORD PTR [rcx], xmm1
	ret	0
?smin@@YA?AUvus@@AEBU1@0@Z ENDP				; smin
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?conj@@YA?AUvcs@@AEBU1@@Z DD imagerel $LN29
	DD	imagerel $LN29+38
	DD	imagerel $unwind$?conj@@YA?AUvcs@@AEBU1@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?conj@@YA?AUvcs@@AEBU1@@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?conj@@YA?AUvcs@@AEBU1@@Z
_TEXT	SEGMENT
t$164145 = 0
__$ReturnUdt$ = 32
a$ = 40
?conj@@YA?AUvcs@@AEBU1@@Z PROC				; conj, COMDAT

; 831  : DSP_INLINE vcs conj(const vcs& a) { return xor(a, vector128_consts::__0xFFFF0000FFFF0000FFFF0000FFFF0000<vcs>()); }

$LN29:
	sub	rsp, 24
	movdqa	xmm0, XMMWORD PTR [rdx]
	movdqa	xmm1, XMMWORD PTR t$164145[rsp]
	mov	rax, rcx
	pcmpeqd	xmm1, xmm1
	pslld	xmm1, 16
	pxor	xmm0, xmm1
	movdqa	XMMWORD PTR [rcx], xmm0
	add	rsp, 24
	ret	0
?conj@@YA?AUvcs@@AEBU1@@Z ENDP				; conj
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z DD imagerel $LN303
	DD	imagerel $LN303+246
	DD	imagerel $unwind$?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z DD 052301H
	DD	07823H
	DD	01681bH
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\async.h
xdata	ENDS
;	COMDAT ?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 48
pa$ = 56
pb$ = 64
?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z PROC	; GetCrossCorrelation, COMDAT

; 13   : {

$LN303:
	sub	rsp, 40					; 00000028H

; 14   :     // corr re
; 15   :     vi re[4], im[4];
; 16   :     re[0] = shift_right (pairwise_muladd((vs&)pa[0], (vs&)pb[0]), 5);
; 17   :     re[1] = shift_right (pairwise_muladd((vs&)pa[1], (vs&)pb[1]), 5);

	movdqa	xmm5, XMMWORD PTR [rdx+16]

; 18   :     re[2] = shift_right (pairwise_muladd((vs&)pa[2], (vs&)pb[2]), 5);

	movdqa	xmm4, XMMWORD PTR [rdx+32]

; 19   :     re[3] = shift_right (pairwise_muladd((vs&)pa[3], (vs&)pb[3]), 5);

	movdqa	xmm3, XMMWORD PTR [rdx+48]

; 20   : 
; 21   :     vi s1 = add(re[0], re[1]);
; 22   :     vi s2 = add(re[2], re[3]);
; 23   :     vi sum_re = add(s1, s2 );
; 24   :     sum_re = hadd(sum_re);
; 25   : 
; 26   :     // corr im
; 27   :     im[0] = shift_right ( pairwise_muladd((vs&)pa[0], (vs&)pb[4]), 5 );
; 28   :     im[1] = shift_right ( pairwise_muladd((vs&)pa[1], (vs&)pb[5]), 5 );
; 29   :     im[2] = shift_right ( pairwise_muladd((vs&)pa[2], (vs&)pb[6]), 5 );
; 30   :     im[3] = shift_right ( pairwise_muladd((vs&)pa[3], (vs&)pb[7]), 5 );
; 31   : 
; 32   :     s1 = add(im[0], im[1]);
; 33   :     s2 = add(im[2], im[3]);
; 34   :     vi sum_im = add(s1, s2);
; 35   :     
; 36   :     sum_im = hadd(sum_im);
; 37   : 
; 38   :     return add(abs(sum_re), abs(sum_im));

	mov	rax, rcx
	movaps	XMMWORD PTR [rsp+16], xmm6
	movdqa	xmm6, XMMWORD PTR [rdx]
	movaps	XMMWORD PTR [rsp], xmm7
	movdqa	xmm7, xmm6
	movdqa	xmm1, xmm4
	movdqa	xmm2, xmm5
	pmaddwd	xmm6, XMMWORD PTR [r8+64]
	pmaddwd	xmm4, XMMWORD PTR [r8+96]
	pmaddwd	xmm5, XMMWORD PTR [r8+80]
	movdqa	xmm0, xmm3
	psrad	xmm6, 5
	psrad	xmm5, 5
	psrad	xmm4, 5
	paddd	xmm6, xmm5
	pmaddwd	xmm7, XMMWORD PTR [r8]
	pmaddwd	xmm0, XMMWORD PTR [r8+48]
	pmaddwd	xmm1, XMMWORD PTR [r8+32]
	psrad	xmm7, 5
	psrad	xmm0, 5
	psrad	xmm1, 5
	paddd	xmm1, xmm0
	pmaddwd	xmm2, XMMWORD PTR [r8+16]
	pmaddwd	xmm3, XMMWORD PTR [r8+112]
	psrad	xmm2, 5
	psrad	xmm3, 5
	paddd	xmm7, xmm2
	paddd	xmm4, xmm3
	paddd	xmm7, xmm1
	paddd	xmm6, xmm4
	pshufd	xmm0, xmm7, 177				; 000000b1H
	paddd	xmm7, xmm0
	pshufd	xmm0, xmm7, 78				; 0000004eH
	paddd	xmm7, xmm0
	pshufd	xmm0, xmm6, 177				; 000000b1H
	paddd	xmm6, xmm0
	pshufd	xmm0, xmm6, 78				; 0000004eH
	paddd	xmm6, xmm0
	movdqa	xmm0, xmm7
	psrad	xmm0, 31
	movdqa	xmm1, xmm6
	pxor	xmm7, xmm0
	psrad	xmm1, 31
	pxor	xmm6, xmm1
	paddd	xmm7, xmm6

; 39   : }

	movaps	xmm6, XMMWORD PTR [rsp+16]
	movdqa	XMMWORD PTR [rcx], xmm7
	movaps	xmm7, XMMWORD PTR [rsp]
	add	rsp, 40					; 00000028H
	ret	0
?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z ENDP	; GetCrossCorrelation
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\ademap.h
_TEXT	ENDS
;	COMDAT ?Demap_11a@@YAXPEAU_COMPLEX16@@PEAED@Z
_TEXT	SEGMENT
pc$ = 8
pbOutput$ = 16
bRate$ = 24
?Demap_11a@@YAXPEAU_COMPLEX16@@PEAED@Z PROC		; Demap_11a, COMDAT

; 147  : {

	mov	r11, rcx

; 148  : 
; 149  : // dump constellation
; 150  : #if BB_DBG
; 151  :    int i;
; 152  :    for (i = 64 - 26; i < 64; i++)
; 153  :    {
; 154  :         if ( i == 64 -7 || i == 64 - 21 ) continue;
; 155  :         fprintf ( stderr, " %d %d\n", pc[i].re, pc[i].im, stderr);
; 156  :    }
; 157  : 
; 158  :    for (i = 1; i <= 26; i++)
; 159  :    {
; 160  :         if ( i == 7 || i == 21 ) continue;
; 161  :         fprintf (stderr, " %d %d\n", pc[i].re, pc[i].im );
; 162  :    }
; 163  : #endif
; 164  : 
; 165  : 
; 166  :     DemapLimit_11a((vcs*)pc);

	mov	rax, rcx
	mov	r9, rdx
	mov	ecx, 16
	npad	2
$LL11@Demap_11a:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	pmaxsw	xmm0, XMMWORD PTR ?rgbDemapMin@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	pminsw	xmm0, XMMWORD PTR ?rgbDemapMax@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL11@Demap_11a

; 167  :     
; 168  :     switch (bRate & 0x3)

	movsx	ecx, r8b
	and	ecx, 3
	je	$LN1@Demap_11a
	sub	ecx, 1
	je	$LN2@Demap_11a
	sub	ecx, 1
	je	SHORT $LN3@Demap_11a
	cmp	ecx, 1
	jne	$LN74@Demap_11a

; 169  :     {
; 170  :         case 0x3:
; 171  :             DemapBPSK_11a(pc, pbOutput);

	mov	r8d, 38					; 00000026H
	lea	r10, OFFSET FLAT:__ImageBase
$LL45@Demap_11a:
	cmp	r8, 43					; 0000002bH
	je	SHORT $LN44@Demap_11a
	cmp	r8, 57					; 00000039H
	je	SHORT $LN44@Demap_11a
	movzx	eax, BYTE PTR [r11+r8*4]
	inc	r9
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r10]
	mov	BYTE PTR [r9-1], al
$LN44@Demap_11a:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL45@Demap_11a
	mov	r8d, 1
$LL40@Demap_11a:
	cmp	r8, 7
	je	SHORT $LN39@Demap_11a
	cmp	r8, 21
	je	SHORT $LN39@Demap_11a
	movzx	eax, BYTE PTR [r11+r8*4]
	inc	r9
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r10]
	mov	BYTE PTR [r9-1], al
$LN39@Demap_11a:
	inc	r8
	cmp	r8, 26
	jle	SHORT $LL40@Demap_11a

; 184  : #ifdef _DBG_PLOT_
; 185  : 			PlotDots ("BB:Constel", &pc[1], 63);
; 186  : #endif 
; 187  : 			
; 188  :             break;
; 189  :     }
; 190  : }

	fatret	0
$LN3@Demap_11a:

; 172  :             break;
; 173  :         case 0x2:
; 174  :             DemapQPSK_11a(pc, pbOutput);

	mov	r8d, 38					; 00000026H
	lea	r10, OFFSET FLAT:__ImageBase
	npad	3
$LL57@Demap_11a:
	cmp	r8, 43					; 0000002bH
	je	SHORT $LN56@Demap_11a
	cmp	r8, 57					; 00000039H
	je	SHORT $LN56@Demap_11a
	movzx	eax, BYTE PTR [r11+r8*4]
	add	r9, 2
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r10]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR [r11+r8*4+2]
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r10]
	mov	BYTE PTR [r9-1], al
$LN56@Demap_11a:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL57@Demap_11a
	mov	r8d, 1
$LL52@Demap_11a:
	cmp	r8, 7
	je	SHORT $LN51@Demap_11a
	cmp	r8, 21
	je	SHORT $LN51@Demap_11a
	movzx	eax, BYTE PTR [r11+r8*4]
	add	r9, 2
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r10]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR [r11+r8*4+2]
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r10]
	mov	BYTE PTR [r9-1], al
$LN51@Demap_11a:
	inc	r8
	cmp	r8, 26
	jle	SHORT $LL52@Demap_11a

; 184  : #ifdef _DBG_PLOT_
; 185  : 			PlotDots ("BB:Constel", &pc[1], 63);
; 186  : #endif 
; 187  : 			
; 188  :             break;
; 189  :     }
; 190  : }

	fatret	0
$LN2@Demap_11a:

; 175  :             break;
; 176  :         case 0x1:
; 177  :             Demap16QAM_11a(pc, pbOutput);

	mov	r8d, 38					; 00000026H
	lea	r10, OFFSET FLAT:__ImageBase
$LL69@Demap_11a:
	cmp	r8, 43					; 0000002bH
	je	SHORT $LN68@Demap_11a
	cmp	r8, 57					; 00000039H
	je	SHORT $LN68@Demap_11a
	movzx	ecx, BYTE PTR [r11+r8*4]
	movzx	edx, BYTE PTR [r11+r8*4+2]
	add	r9, 4
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-1], al
$LN68@Demap_11a:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL69@Demap_11a
	mov	r8d, 1
	npad	1
$LL64@Demap_11a:
	cmp	r8, 7
	je	SHORT $LN63@Demap_11a
	cmp	r8, 21
	je	SHORT $LN63@Demap_11a
	movzx	ecx, BYTE PTR [r11+r8*4]
	movzx	edx, BYTE PTR [r11+r8*4+2]
	add	r9, 4
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-1], al
$LN63@Demap_11a:
	inc	r8
	cmp	r8, 26
	jle	SHORT $LL64@Demap_11a

; 184  : #ifdef _DBG_PLOT_
; 185  : 			PlotDots ("BB:Constel", &pc[1], 63);
; 186  : #endif 
; 187  : 			
; 188  :             break;
; 189  :     }
; 190  : }

	fatret	0
$LN1@Demap_11a:

; 178  : #ifdef _DBG_PLOT_
; 179  : 			PlotDots ("BB:Constel", &pc[1], 63);
; 180  : #endif 
; 181  :             break;
; 182  :         case 0x0:
; 183  :             Demap64QAM_11a(pc, pbOutput);

	mov	r8d, 38					; 00000026H
	lea	r10, OFFSET FLAT:__ImageBase
$LL81@Demap_11a:
	cmp	r8, 43					; 0000002bH
	je	SHORT $LN80@Demap_11a
	cmp	r8, 57					; 00000039H
	je	SHORT $LN80@Demap_11a
	movzx	ecx, BYTE PTR [r11+r8*4]
	movzx	edx, BYTE PTR [r11+r8*4+2]
	add	r9, 6
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-6], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-5], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-1], al
$LN80@Demap_11a:
	inc	r8
	cmp	r8, 64					; 00000040H
	jl	SHORT $LL81@Demap_11a
	mov	r8d, 1
	npad	1
$LL76@Demap_11a:
	cmp	r8, 7
	je	SHORT $LN75@Demap_11a
	cmp	r8, 21
	je	SHORT $LN75@Demap_11a
	movzx	ecx, BYTE PTR [r11+r8*4]
	movzx	edx, BYTE PTR [r11+r8*4+2]
	add	r9, 6
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-6], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-5], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rcx+r10]
	mov	BYTE PTR [r9-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rdx+r10]
	mov	BYTE PTR [r9-1], al
$LN75@Demap_11a:
	inc	r8
	cmp	r8, 26
	jle	SHORT $LL76@Demap_11a
$LN74@Demap_11a:

; 184  : #ifdef _DBG_PLOT_
; 185  : 			PlotDots ("BB:Constel", &pc[1], 63);
; 186  : #endif 
; 187  : 			
; 188  :             break;
; 189  :     }
; 190  : }

	fatret	0
?Demap_11a@@YAXPEAU_COMPLEX16@@PEAED@Z ENDP		; Demap_11a
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\afreq.h
_TEXT	ENDS
;	COMDAT ?FreqComp64@@YAXPEAUvcs@@GQEBUvs@@1@Z
_TEXT	SEGMENT
pc$ = 8
Freq$ = 16
FreqFactorCos$ = 24
FreqFactorSin$ = 32
?FreqComp64@@YAXPEAUvcs@@GQEBUvs@@1@Z PROC		; FreqComp64, COMDAT

; 107  :     if (Freq == 0) return;

	test	dx, dx
	je	SHORT $LN1@FreqComp64

; 108  : 
; 109  :     for (int i = 0; i < 16; i++)

	sub	r8, r9
	mov	edx, 16
	sub	r9, rcx
$LL3@FreqComp64:

; 110  :     {
; 111  :         pc[i] = rotate(pc[i], FreqFactorCos[i], FreqFactorSin[i]);

	movdqa	xmm0, XMMWORD PTR [rcx]
	lea	rax, QWORD PTR [r9+rcx]
	add	rcx, 16
	sub	rdx, 1
	movdqa	xmm2, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pmulhw	xmm2, XMMWORD PTR [rax+r8]
	pmulhw	xmm1, XMMWORD PTR [rax]
	paddw	xmm2, xmm1
	movdqa	XMMWORD PTR [rcx-16], xmm2
	jne	SHORT $LL3@FreqComp64
$LN1@FreqComp64:

; 112  :     }
; 113  : }

	fatret	0
?FreqComp64@@YAXPEAUvcs@@GQEBUvs@@1@Z ENDP		; FreqComp64
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD imagerel $LN428
	DD	imagerel $LN428+651
	DD	imagerel $unwind$?FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD 071201H
	DD	0196412H
	DD	0163412H
	DD	0140112H
	DD	0700bH
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\fetchdt.h
xdata	ENDS
;	COMDAT ?FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
_TEXT	SEGMENT
hr$ = 32
block44M$ = 48
pRxStream$ = 176
pbTouched$ = 184
block$ = 192
?FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z PROC ; FetchDMADataTouchDownSampled44, COMDAT

; 99   : {

$LN428:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 160				; 000000a0H

; 100  :     static CDown44MTo40M Resampler;

	mov	eax, DWORD PTR ??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51
	mov	rsi, r8
	mov	rdi, rdx
	test	al, 1
	jne	SHORT $LN426@FetchDMADa
	or	eax, 1
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+344, -1
	mov	DWORD PTR ??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51, eax
	xor	eax, eax
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+348, eax
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352, eax
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+340, eax
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+336, eax
	jmp	SHORT $LN425@FetchDMADa
$LN426@FetchDMADa:
	mov	eax, DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352
$LN425@FetchDMADa:
	mov	ebx, DWORD PTR hr$[rsp]
	npad	5
$LL3@FetchDMADa:

; 101  : 
; 102  :     // Downsample from 44MHz to 40MHz
; 103  :     HRESULT hr ;
; 104  :     SignalBlock block44M;
; 105  :     COMPLEX16 *p40MStream;
; 106  :     while((p40MStream = Resampler.GetOutStream(56)) == NULL)

	cmp	eax, 56					; 00000038H
	jge	$LN424@FetchDMADa

; 107  :     {
; 108  :         hr = SoraRadioReadRxStream(pRxStream, pbTouched, block44M);

	mov	rbx, QWORD PTR RxStream+24
	mov	edx, DWORD PTR RxStream+32
	mov	r8d, 1024				; 00000400H
	mov	rcx, rbx
	mov	r9, rdi
	call	SoraCheckSignalBlock
	mov	r11d, eax
	test	eax, eax
	js	SHORT $LN427@FetchDMADa
	movdqa	xmm0, XMMWORD PTR [rbx+16]
	movdqa	xmm1, XMMWORD PTR [rbx+32]
	mov	rax, QWORD PTR RxStream+24
	sub	rax, -128				; ffffffffffffff80H
	cmp	rax, QWORD PTR RxStream+16
	movdqa	XMMWORD PTR block44M$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR [rbx+48]
	cmove	rax, QWORD PTR RxStream
	movdqa	XMMWORD PTR block44M$[rsp+16], xmm1
	movdqa	xmm1, XMMWORD PTR [rbx+64]
	movdqa	XMMWORD PTR block44M$[rsp+32], xmm0
	movdqa	xmm0, XMMWORD PTR [rbx+80]
	movdqa	XMMWORD PTR block44M$[rsp+48], xmm1
	movdqa	xmm1, XMMWORD PTR [rbx+96]
	movdqa	XMMWORD PTR block44M$[rsp+64], xmm0
	movdqa	xmm0, XMMWORD PTR [rbx+112]
	movdqa	XMMWORD PTR block44M$[rsp+80], xmm1
	mov	QWORD PTR RxStream+24, rax
	movdqa	XMMWORD PTR block44M$[rsp+96], xmm0
$LN427@FetchDMADa:
	mov	ebx, r11d

; 109  :         if (FAILED(hr))

	test	r11d, r11d
	js	SHORT $LN412@FetchDMADa

; 111  : 
; 112  :         Resampler.Resample(block44M);

	lea	rdx, QWORD PTR block44M$[rsp]
	lea	rcx, OFFSET FLAT:?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A ; `FetchDMADataTouchDownSampled44'::`2'::Resampler
	call	?Resample@CDown44MTo40M@@QEAAXAEBUSignalBlock@@@Z ; CDown44MTo40M::Resample

; 113  :     }

	mov	eax, DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352
	jmp	$LL3@FetchDMADa
$LN412@FetchDMADa:

; 110  :             return hr; // hardware error

	mov	eax, r11d
	jmp	$LN5@FetchDMADa
$LN424@FetchDMADa:

; 114  :     
; 115  :     // Downsample from 40MHz to 20MHz
; 116  :     // Mem2VcsL and Mem2VcsH work together to downsample sequential 2 signal block into one signal block
; 117  :     Mem2VcsL(*(SignalBlock*)p40MStream , block[0], block[1], block[2], block[3]);

	movdqa	xmm4, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A, 8
	add	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+348, 56 ; 00000038H
	sub	eax, 56					; 00000038H
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352, eax

; 118  :     Mem2VcsH(*((SignalBlock*)p40MStream + 1), block[3], block[4], block[5], block[6]);
; 119  :     return hr;

	mov	eax, ebx
	pand	xmm1, xmm4
	movdqa	XMMWORD PTR [rsi], xmm1
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+16, 128 ; 00000080H
	pand	xmm0, xmm3
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi], xmm1
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+32, 8
	pand	xmm2, xmm4
	movdqa	XMMWORD PTR [rsi+16], xmm2
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+48, 128 ; 00000080H
	pand	xmm0, xmm3
	pxor	xmm2, xmm0
	movdqa	XMMWORD PTR [rsi+16], xmm2
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+64, 8
	pand	xmm1, xmm4
	movdqa	XMMWORD PTR [rsi+32], xmm1
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+80, 128 ; 00000080H
	pand	xmm0, xmm3
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi+32], xmm1
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+96, 8
	pand	xmm0, xmm4
	movdqa	XMMWORD PTR [rsi+48], xmm0
	movdqa	xmm4, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+112, 128 ; 00000080H
	pand	xmm1, xmm4
	pxor	xmm0, xmm1
	movdqa	XMMWORD PTR [rsi+48], xmm0
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+128, 8
	pand	xmm1, xmm3
	movdqa	XMMWORD PTR [rsi+64], xmm1
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+144, 128 ; 00000080H
	pand	xmm0, xmm4
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi+64], xmm1
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+160, 8
	pand	xmm2, xmm3
	movdqa	XMMWORD PTR [rsi+80], xmm2
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+176, 128 ; 00000080H
	pand	xmm0, xmm4
	pxor	xmm2, xmm0
	movdqa	XMMWORD PTR [rsi+80], xmm2
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+192, 8
	pand	xmm1, xmm3
	movdqa	XMMWORD PTR [rsi+96], xmm1
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+208, 128 ; 00000080H
	pand	xmm0, xmm4
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi+96], xmm1
$LN5@FetchDMADa:

; 120  : }

	lea	r11, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rdi
	ret	0
?FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z ENDP ; FetchDMADataTouchDownSampled44
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD imagerel $LN449
	DD	imagerel $LN449+124
	DD	imagerel $unwind$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD imagerel $LN449+124
	DD	imagerel $LN449+515
	DD	imagerel $chain$3$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD imagerel $LN449+515
	DD	imagerel $LN449+534
	DD	imagerel $chain$4$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD 021H
	DD	imagerel $LN449
	DD	imagerel $LN449+124
	DD	imagerel $unwind$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD 084b21H
	DD	02984bH
	DD	03883fH
	DD	047823H
	DD	056805H
	DD	imagerel $LN449
	DD	imagerel $LN449+124
	DD	imagerel $unwind$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z DD 060f01H
	DD	011640fH
	DD	0e340fH
	DD	0700bb20fH
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\fetchdt.h
xdata	ENDS
;	COMDAT ?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z
_TEXT	SEGMENT
pRxStream$ = 112
pbTouched$ = 120
block$ = 128
?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z PROC ; FetchDMADataTouchDownSampled40, COMDAT

; 74   : {

$LN449:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 96					; 00000060H

; 75   :     HRESULT hr;
; 76   :     SignalBlock block40M;
; 77   : 
; 78   :     hr = SoraRadioReadRxStream(pRxStream, pbTouched, block40M);

	mov	rbx, QWORD PTR RxStream+24
	mov	rdi, rdx
	mov	r9, rdx
	mov	edx, DWORD PTR RxStream+32
	mov	rsi, r8
	mov	rcx, rbx
	mov	r8d, 1024				; 00000400H
	call	SoraCheckSignalBlock
	test	eax, eax
	js	$LN3@FetchDMADa@2
	movdqa	xmm0, XMMWORD PTR [rbx+16]
	movdqa	xmm2, XMMWORD PTR [rbx+32]

; 79   :     if (FAILED(hr))
; 80   :         return hr; // hardware error
; 81   : 
; 82   :     // Downsample from 40MHz to 20MHz
; 83   :     // Mem2VcsL and Mem2VcsH work together to downsample sequential 2 signal block into one signal block
; 84   :     Mem2VcsL(block40M, block[0], block[1], block[2], block[3]);

	movdqa	xmm4, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	mov	rax, QWORD PTR RxStream+24

; 85   :     
; 86   :     hr = SoraRadioReadRxStream(pRxStream, pbTouched, block40M);

	mov	r8d, 1024				; 00000400H
	mov	r9, rdi
	sub	rax, -128				; ffffffffffffff80H
	cmp	rax, QWORD PTR RxStream+16
	pshufd	xmm1, xmm0, 8
	pshufd	xmm0, xmm2, 128				; 00000080H
	movdqa	xmm3, XMMWORD PTR [rbx+48]
	movdqa	xmm5, XMMWORD PTR [rbx+64]
	movaps	XMMWORD PTR [rsp+80], xmm6
	cmove	rax, QWORD PTR RxStream
	pand	xmm0, xmm4
	pshufd	xmm2, xmm3, 8
	movdqa	xmm6, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movaps	XMMWORD PTR [rsp+64], xmm7
	movdqa	xmm7, XMMWORD PTR [rbx+80]
	pand	xmm1, xmm6
	pand	xmm2, xmm6
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm5, 128				; 00000080H
	movaps	XMMWORD PTR [rsp+48], xmm8
	movdqa	xmm8, XMMWORD PTR [rbx+96]
	movaps	XMMWORD PTR [rsp+32], xmm9
	pand	xmm0, xmm4
	pxor	xmm2, xmm0
	pshufd	xmm0, xmm8, 128				; 00000080H
	movdqa	xmm9, XMMWORD PTR [rbx+112]
	mov	QWORD PTR RxStream+24, rax
	movdqa	XMMWORD PTR [rsi], xmm1
	movdqa	XMMWORD PTR [rsi+16], xmm2
	pand	xmm0, xmm4
	pshufd	xmm1, xmm7, 8
	pand	xmm1, xmm6
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm9, 8
	movdqa	XMMWORD PTR [rsi+32], xmm1
	pand	xmm0, xmm6
	movdqa	XMMWORD PTR [rsi+48], xmm0
	mov	rbx, QWORD PTR RxStream+24
	mov	edx, DWORD PTR RxStream+32
	mov	rcx, rbx
	call	SoraCheckSignalBlock
	test	eax, eax
	js	$LN448@FetchDMADa@2

; 87   :     if (FAILED(hr))
; 88   :         return hr; // hardware error
; 89   : 
; 90   :     Mem2VcsH(block40M, block[3], block[4], block[5], block[6]);

	movdqa	xmm6, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm0, XMMWORD PTR [rbx+16]
	movdqa	xmm2, XMMWORD PTR [rbx+32]
	mov	rcx, QWORD PTR RxStream+24
	sub	rcx, -128				; ffffffffffffff80H
	cmp	rcx, QWORD PTR RxStream+16
	pshufd	xmm1, xmm0, 128				; 00000080H
	cmove	rcx, QWORD PTR RxStream
	pand	xmm1, xmm6
	movdqa	xmm4, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR [rbx+48]
	movdqa	xmm5, XMMWORD PTR [rbx+64]
	movdqa	xmm7, XMMWORD PTR [rbx+80]
	movdqa	xmm8, XMMWORD PTR [rbx+96]
	movdqa	xmm9, XMMWORD PTR [rbx+112]
	mov	QWORD PTR RxStream+24, rcx
	movdqa	xmm0, XMMWORD PTR [rsi+48]
	pxor	xmm0, xmm1
	pshufd	xmm1, xmm2, 8
	pshufd	xmm2, xmm5, 8
	movdqa	XMMWORD PTR [rsi+48], xmm0
	pand	xmm1, xmm4
	pshufd	xmm0, xmm3, 128				; 00000080H
	pand	xmm2, xmm4
	pand	xmm0, xmm6
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm7, 128				; 00000080H
	movdqa	XMMWORD PTR [rsi+64], xmm1
	pand	xmm0, xmm6
	pshufd	xmm1, xmm8, 8
	pxor	xmm2, xmm0
	pshufd	xmm0, xmm9, 128				; 00000080H
	pand	xmm1, xmm4
	movdqa	XMMWORD PTR [rsi+80], xmm2
	pand	xmm0, xmm6
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi+96], xmm1
$LN448@FetchDMADa@2:
	movaps	xmm8, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+64]
	movaps	xmm6, XMMWORD PTR [rsp+80]
	movaps	xmm9, XMMWORD PTR [rsp+32]
$LN3@FetchDMADa@2:

; 91   :     return hr;
; 92   : }

	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+136]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
?FetchDMADataTouchDownSampled40@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z ENDP ; FetchDMADataTouchDownSampled40
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\vector128.h
_TEXT	ENDS
;	COMDAT ?hmin@@YA?AUvus@@AEBU1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 8
a$ = 16
?hmin@@YA?AUvus@@AEBU1@@Z PROC				; hmin, COMDAT

; 1025 : DEFINE_OP_DUPLICATION8_OPERATION(hmin, vus, smin);

	mov	eax, DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51
	movaps	xmm1, XMMWORD PTR [rdx]
	pshufd	xmm2, xmm1, 78				; 0000004eH
	test	al, 1
	jne	SHORT $LN198@hmin@2
	movdqa	xmm0, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	or	eax, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm0
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, eax
	jmp	SHORT $LN26@hmin@2
$LN198@hmin@2:
	movdqa	xmm0, XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
$LN26@hmin@2:
	pxor	xmm1, xmm0
	pxor	xmm2, xmm0
	pminsw	xmm1, xmm2
	pxor	xmm1, xmm0
	pshufd	xmm2, xmm1, 177				; 000000b1H
	movdqa	XMMWORD PTR [rcx], xmm1
	test	al, 1
	jne	SHORT $LN199@hmin@2
	movdqa	xmm1, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	or	eax, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, eax
	jmp	SHORT $LN87@hmin@2
$LN199@hmin@2:
	movdqa	xmm1, XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
$LN87@hmin@2:
	movdqa	xmm0, XMMWORD PTR [rcx]
	pxor	xmm2, xmm1
	pxor	xmm0, xmm1
	pminsw	xmm0, xmm2
	pxor	xmm0, xmm1
	movdqa	XMMWORD PTR [rcx], xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufd	xmm2, xmm0, 17
	test	al, 1
	jne	SHORT $LN200@hmin@2
	movdqa	xmm1, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	or	eax, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, eax
	jmp	SHORT $LN156@hmin@2
$LN200@hmin@2:
	movdqa	xmm1, XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
$LN156@hmin@2:
	movdqa	xmm0, XMMWORD PTR [rcx]
	pxor	xmm2, xmm1
	mov	rax, rcx
	pxor	xmm0, xmm1
	pminsw	xmm0, xmm2
	pxor	xmm0, xmm1
	movdqa	XMMWORD PTR [rcx], xmm0
	ret	0
?hmin@@YA?AUvus@@AEBU1@@Z ENDP				; hmin
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mul_shift@@YA?AUvcs@@AEBU1@0H@Z DD imagerel $LN135
	DD	imagerel $LN135+104
	DD	imagerel $unwind$?mul_shift@@YA?AUvcs@@AEBU1@0H@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mul_shift@@YA?AUvcs@@AEBU1@0H@Z DD 010401H
	DD	02204H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ?mul_shift@@YA?AUvcs@@AEBU1@0H@Z
_TEXT	SEGMENT
t$293179 = 0
__$ReturnUdt$ = 32
a$ = 40
b$ = 48
nbits_right$ = 56
?mul_shift@@YA?AUvcs@@AEBU1@0H@Z PROC			; mul_shift, COMDAT

; 926  : {

$LN135:
	sub	rsp, 24

; 927  :     vi vi0 = pairwise_muladd((vs&)a, (vs)conj(b));

	movdqa	xmm2, XMMWORD PTR [r8]
	movdqa	xmm5, XMMWORD PTR [rdx]

; 928  :     vi vi1 = pairwise_muladd((vs&)a, (vs)flip(b));
; 929  : 
; 930  :     // Shift right to normalize
; 931  :     vi0 = shift_right(vi0, nbits_right);
; 932  :     vi1 = shift_right(vi1, nbits_right);
; 933  : 
; 934  :     // Q3 I3 Q2 I2 Q1 I1 Q0 I0
; 935  :     return (vcs)pack(vi0, vi1);

	movdqa	xmm4, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	mov	rax, rcx
	movdqa	xmm1, XMMWORD PTR t$293179[rsp]
	movdqa	xmm3, xmm5
	movdqa	xmm0, xmm2
	pcmpeqd	xmm1, xmm1
	pslld	xmm1, 16
	pxor	xmm0, xmm1
	pmaddwd	xmm3, xmm0
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	psrad	xmm3, 15
	pand	xmm3, xmm4
	pmaddwd	xmm5, xmm1
	psrad	xmm5, 15
	pand	xmm5, xmm4
	pslld	xmm5, 16
	por	xmm3, xmm5
	movdqa	XMMWORD PTR [rcx], xmm3

; 936  : }

	add	rsp, 24
	ret	0
?mul_shift@@YA?AUvcs@@AEBU1@0H@Z ENDP			; mul_shift
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z DD imagerel $LN544
	DD	imagerel $LN544+438
	DD	imagerel $unwind$??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z DD 072d01H
	DD	01882dH
	DD	027822H
	DD	03680eH
	DD	08204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_r4dif.h
xdata	ENDS
;	COMDAT ??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
t$507362 = 0
t$506418 = 0
t$505421 = 0
pInput$ = 80
??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z PROC			; FFTSSE<16>, COMDAT

; 13   : {

$LN544:
	sub	rsp, 72					; 00000048H

; 14   :     const int INPUT_SHIFT = 2;
; 15   :     const int OUTPUT_SHIFT = 15;
; 16   :     const int nArray = N / vcs::size;
; 17   : 
; 18   :     vcs *pi = pInput;
; 19   :     for (int n = 0; n < nArray/4; n++, pi++)
; 20   :     {
; 21   :         vcs a = shift_right(pi[0], INPUT_SHIFT);
; 22   :         vcs b = shift_right(pi[nArray/4], INPUT_SHIFT);
; 23   :         vcs c = shift_right(pi[nArray/2], INPUT_SHIFT);

	movdqa	xmm0, XMMWORD PTR [rcx+32]
	movaps	XMMWORD PTR [rsp+48], xmm6

; 24   :         vcs d = shift_right(pi[nArray/4*3], INPUT_SHIFT);

	movdqa	xmm6, XMMWORD PTR [rcx+48]
	psraw	xmm0, 2
	psraw	xmm6, 2
	movaps	XMMWORD PTR [rsp+32], xmm7
	movdqa	xmm7, XMMWORD PTR [rcx+16]
	movaps	XMMWORD PTR [rsp+16], xmm8
	psraw	xmm7, 2
	movdqa	xmm8, XMMWORD PTR [rcx]

; 25   : 
; 26   :         vcs ac = saturated_add(a, c);
; 27   :         vcs bd = saturated_add(b, d);

	movdqa	xmm1, xmm7

; 28   :         vcs a_c = saturated_sub(a, c);
; 29   :         vcs b_d = saturated_sub(b, d);

	psubsw	xmm7, xmm6
	paddsw	xmm1, xmm6
	psraw	xmm8, 2
	movdqa	xmm5, xmm8
	paddsw	xmm5, xmm0
	psubsw	xmm8, xmm0

; 30   : 
; 31   :         // Calc X(4k) Start
; 32   :         pi[0] = saturated_add(ac, bd);

	movdqa	xmm0, xmm5
	paddsw	xmm0, xmm1

; 33   : 
; 34   :         // Calc X(4k+2) Start
; 35   :         vcs x2 = saturated_sub(ac, bd);

	psubsw	xmm5, xmm1

; 36   :         pi[nArray/4] = mul_shift(x2, FFT_GetTwiddleConst<N, 2>()[n], OUTPUT_SHIFT);

	movdqa	xmm1, XMMWORD PTR t$505421[rsp]
	movdqa	XMMWORD PTR [rcx], xmm0
	movdqa	xmm2, XMMWORD PTR ?wFFTLUT16_2@@3QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	pcmpeqd	xmm1, xmm1
	pslld	xmm1, 16
	movdqa	xmm4, xmm5
	movdqa	xmm0, xmm2
	pxor	xmm0, xmm1
	pmaddwd	xmm4, xmm0
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H

; 37   : 
; 38   :         // Calc X(4k+1) Start
; 39   :         vcs jb_d = mul_j(b_d);

	pshuflw	xmm0, xmm7, 177				; 000000b1H
	psrad	xmm4, 15
	pshufhw	xmm6, xmm0, 177				; 000000b1H
	pmaddwd	xmm5, xmm1

; 40   :         vcs x4 = saturated_sub(a_c, jb_d);
; 41   :         pi[nArray/2] = mul_shift(x4, FFT_GetTwiddleConst<N, 1>()[n], OUTPUT_SHIFT);

	movdqa	xmm1, XMMWORD PTR t$506418[rsp]
	pand	xmm4, xmm3
	psrad	xmm5, 15
	pcmpeqd	xmm1, xmm1
	pand	xmm5, xmm3
	pslld	xmm1, 16
	pslld	xmm5, 16
	por	xmm4, xmm5
	movdqa	xmm5, xmm8
	movdqa	XMMWORD PTR [rcx+16], xmm4
	movdqa	xmm2, XMMWORD PTR ?wFFTLUT16_1@@3QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	pxor	xmm6, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB
	psubsw	xmm5, xmm6

; 42   : 
; 43   :         // Calc X(4k+3) Start
; 44   :         vcs x5 = saturated_add(a_c, jb_d);

	paddsw	xmm8, xmm6
	movdqa	xmm4, xmm5
	movdqa	xmm0, xmm2
	pxor	xmm0, xmm1
	pmaddwd	xmm4, xmm0
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	psrad	xmm4, 15
	pand	xmm4, xmm3
	pmaddwd	xmm5, xmm1

; 45   :         pi[nArray/4*3] = mul_shift(x5, FFT_GetTwiddleConst<N, 3>()[n], OUTPUT_SHIFT);

	movdqa	xmm1, XMMWORD PTR t$507362[rsp]
	psrad	xmm5, 15
	pcmpeqd	xmm1, xmm1
	pand	xmm5, xmm3
	pslld	xmm1, 16
	pslld	xmm5, 16
	por	xmm4, xmm5
	movdqa	XMMWORD PTR [rcx+32], xmm4
	movdqa	xmm2, XMMWORD PTR ?wFFTLUT16_3@@3QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm4, xmm8
	movdqa	xmm0, xmm2
	pxor	xmm0, xmm1
	pmaddwd	xmm4, xmm0
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	psrad	xmm4, 15
	pand	xmm4, xmm3
	pmaddwd	xmm8, xmm1
	psrad	xmm8, 15
	pand	xmm8, xmm3

; 46   :     }
; 47   : }

	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
	pslld	xmm8, 16
	por	xmm4, xmm8
	movaps	xmm8, XMMWORD PTR [rsp+16]
	movdqa	XMMWORD PTR [rcx+48], xmm4
	add	rsp, 72					; 00000048H
	ret	0
??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z ENDP			; FFTSSE<16>
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z DD imagerel $LN523
	DD	imagerel $LN523+426
	DD	imagerel $unwind$??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z DD 020601H
	DD	030025206H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_r4dif.h
xdata	ENDS
;	COMDAT ??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
t$509971 = 32
t$509882 = 32
t$509847 = 32
t$509237 = 32
t$509376 = 32
t$509344 = 32
t$508657 = 32
t$508582 = 32
t$508551 = 32
t$508026 = 32
t$507953 = 32
t$507918 = 32
pInput$ = 64
??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z PROC			; FFTSSEEx<16>, COMDAT

; 52   : {

$LN523:
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx

; 53   :     const int nArray = N / vcs::size;
; 54   : 
; 55   :     FFTSSE<N> (pInput);

	call	??$FFTSSE@$0BA@@@YAXPEAUvcs@@@Z		; FFTSSE<16>

; 56   :     FFTSSEEx<N/4> (pInput);

	movdqa	xmm5, XMMWORD PTR [rbx]
	movdqa	xmm0, XMMWORD PTR t$507953[rsp]
	psraw	xmm5, 2
	movdqa	xmm1, xmm5
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 8
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm5, 78				; 0000004eH
	paddsw	xmm1, xmm0
	pshufhw	xmm2, xmm1, 180				; 000000b4H
	movdqa	xmm0, XMMWORD PTR t$508026[rsp]
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 14
	pxor	xmm2, xmm0
	movdqa	xmm0, XMMWORD PTR t$507918[rsp]
	pcmpeqd	xmm0, xmm0
	movdqa	xmm1, xmm2
	psllq	xmm0, 32				; 00000020H
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddsw	xmm1, xmm0

; 57   :     FFTSSEEx<N/4> (pInput + nArray / 4);

	movdqa	xmm0, XMMWORD PTR t$508582[rsp]
	pcmpeqd	xmm0, xmm0
	movdqa	XMMWORD PTR [rbx], xmm1
	movdqa	xmm2, XMMWORD PTR [rbx+16]
	pslldq	xmm0, 8
	psraw	xmm2, 2
	pshufd	xmm1, xmm2, 78				; 0000004eH
	pxor	xmm2, xmm0
	movdqa	xmm0, XMMWORD PTR t$508657[rsp]
	pcmpeqd	xmm0, xmm0
	paddsw	xmm2, xmm1
	pslldq	xmm0, 14
	pshufhw	xmm3, xmm2, 180				; 000000b4H
	pxor	xmm3, xmm0
	movdqa	xmm0, XMMWORD PTR t$508551[rsp]
	pcmpeqd	xmm0, xmm0
	movdqa	xmm1, xmm3
	psllq	xmm0, 32				; 00000020H
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm3, 177				; 000000b1H
	paddsw	xmm1, xmm0

; 58   :     FFTSSEEx<N/4> (pInput + nArray / 2);

	movdqa	xmm0, XMMWORD PTR t$509376[rsp]
	pcmpeqd	xmm0, xmm0
	movdqa	XMMWORD PTR [rbx+16], xmm1
	movdqa	xmm2, XMMWORD PTR [rbx+32]
	pslldq	xmm0, 8
	psraw	xmm2, 2
	movdqa	xmm1, xmm2
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm2, 78				; 0000004eH
	paddsw	xmm1, xmm0
	pshufhw	xmm2, xmm1, 180				; 000000b4H
	movdqa	xmm0, XMMWORD PTR t$509237[rsp]
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 14
	pxor	xmm2, xmm0
	movdqa	xmm0, XMMWORD PTR t$509344[rsp]
	pcmpeqd	xmm0, xmm0
	movdqa	xmm1, xmm2
	psllq	xmm0, 32				; 00000020H
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddsw	xmm1, xmm0

; 59   :     FFTSSEEx<N/4> (pInput + nArray / 4 * 3);

	movdqa	xmm0, XMMWORD PTR t$509882[rsp]
	pcmpeqd	xmm0, xmm0
	movdqa	XMMWORD PTR [rbx+32], xmm1
	movdqa	xmm2, XMMWORD PTR [rbx+48]
	pslldq	xmm0, 8
	psraw	xmm2, 2
	movdqa	xmm1, xmm2
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm2, 78				; 0000004eH
	paddsw	xmm1, xmm0
	pshufhw	xmm2, xmm1, 180				; 000000b4H
	movdqa	xmm0, XMMWORD PTR t$509971[rsp]
	pcmpeqd	xmm0, xmm0
	pslldq	xmm0, 14
	pxor	xmm2, xmm0
	movdqa	xmm0, XMMWORD PTR t$509847[rsp]
	movdqa	xmm1, xmm2
	pcmpeqd	xmm0, xmm0
	psllq	xmm0, 32				; 00000020H
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	paddsw	xmm1, xmm0
	movdqa	XMMWORD PTR [rbx+48], xmm1

; 60   : }

	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z ENDP			; FFTSSEEx<16>
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z DD imagerel $LN544
	DD	imagerel $LN544+555
	DD	imagerel $unwind$??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z DD 0d3f01H
	DD	01b83fH
	DD	02a833H
	DD	039827H
	DD	048814H
	DD	05780eH
	DD	066809H
	DD	0e204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_r4dif.h
xdata	ENDS
;	COMDAT ??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
t$512698 = 0
t$511897 = 0
t$510915 = 0
pInput$ = 128
??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z PROC			; FFTSSE<64>, COMDAT

; 13   : {

$LN544:
	sub	rsp, 120				; 00000078H
	movaps	XMMWORD PTR [rsp+96], xmm6
	movaps	XMMWORD PTR [rsp+80], xmm7
	movaps	XMMWORD PTR [rsp+64], xmm8

; 14   :     const int INPUT_SHIFT = 2;
; 15   :     const int OUTPUT_SHIFT = 15;
; 16   :     const int nArray = N / vcs::size;
; 17   : 
; 18   :     vcs *pi = pInput;
; 19   :     for (int n = 0; n < nArray/4; n++, pi++)

	sub	rcx, -128				; ffffffffffffff80H
	lea	rdx, OFFSET FLAT:__ImageBase
	xor	eax, eax
	movaps	XMMWORD PTR [rsp+48], xmm9
	movdqa	xmm9, XMMWORD PTR t$510915[rsp]
	movaps	XMMWORD PTR [rsp+32], xmm10
	movdqa	xmm10, XMMWORD PTR t$511897[rsp]
	movaps	XMMWORD PTR [rsp+16], xmm11
	movdqa	xmm11, XMMWORD PTR t$512698[rsp]
	npad	11
$LL3@FFTSSE:

; 20   :     {
; 21   :         vcs a = shift_right(pi[0], INPUT_SHIFT);

	movdqa	xmm8, XMMWORD PTR [rcx-128]

; 22   :         vcs b = shift_right(pi[nArray/4], INPUT_SHIFT);

	movdqa	xmm7, XMMWORD PTR [rcx-64]

; 23   :         vcs c = shift_right(pi[nArray/2], INPUT_SHIFT);

	movdqa	xmm0, XMMWORD PTR [rcx]
	psraw	xmm0, 2
	psraw	xmm8, 2
	psraw	xmm7, 2

; 24   :         vcs d = shift_right(pi[nArray/4*3], INPUT_SHIFT);

	movdqa	xmm6, XMMWORD PTR [rcx+64]

; 25   : 
; 26   :         vcs ac = saturated_add(a, c);

	movdqa	xmm5, xmm8

; 27   :         vcs bd = saturated_add(b, d);

	movdqa	xmm1, xmm7
	paddsw	xmm5, xmm0

; 28   :         vcs a_c = saturated_sub(a, c);

	psubsw	xmm8, xmm0
	psraw	xmm6, 2

; 29   :         vcs b_d = saturated_sub(b, d);
; 30   : 
; 31   :         // Calc X(4k) Start
; 32   :         pi[0] = saturated_add(ac, bd);

	movdqa	xmm0, xmm5
	paddsw	xmm1, xmm6
	psubsw	xmm7, xmm6
	paddsw	xmm0, xmm1

; 33   : 
; 34   :         // Calc X(4k+2) Start
; 35   :         vcs x2 = saturated_sub(ac, bd);

	psubsw	xmm5, xmm1
	movdqa	XMMWORD PTR [rcx-128], xmm0

; 36   :         pi[nArray/4] = mul_shift(x2, FFT_GetTwiddleConst<N, 2>()[n], OUTPUT_SHIFT);

	movdqa	xmm2, XMMWORD PTR ?wFFTLUT64_2@@3QBU_COMPLEX16@@B[rax+rdx]
	movdqa	xmm4, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm3, xmm5
	movdqa	xmm1, xmm2
	movdqa	xmm0, xmm9
	pcmpeqd	xmm0, xmm9
	movdqa	xmm9, xmm0
	pslld	xmm0, 16
	pxor	xmm1, xmm0
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pmaddwd	xmm3, xmm1
	pshufhw	xmm1, xmm0, 177				; 000000b1H

; 37   : 
; 38   :         // Calc X(4k+1) Start
; 39   :         vcs jb_d = mul_j(b_d);

	pshuflw	xmm0, xmm7, 177				; 000000b1H
	psrad	xmm3, 15
	pshufhw	xmm6, xmm0, 177				; 000000b1H
	pmaddwd	xmm5, xmm1

; 40   :         vcs x4 = saturated_sub(a_c, jb_d);
; 41   :         pi[nArray/2] = mul_shift(x4, FFT_GetTwiddleConst<N, 1>()[n], OUTPUT_SHIFT);

	movdqa	xmm0, xmm10
	pand	xmm3, xmm4
	psrad	xmm5, 15
	pcmpeqd	xmm0, xmm10
	movdqa	xmm10, xmm0
	pand	xmm5, xmm4
	pslld	xmm0, 16
	pslld	xmm5, 16
	por	xmm3, xmm5
	movdqa	xmm5, xmm8
	movdqa	XMMWORD PTR [rcx-64], xmm3
	movdqa	xmm2, XMMWORD PTR ?wFFTLUT64_1@@3QBU_COMPLEX16@@B[rax+rdx]
	movdqa	xmm4, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	pxor	xmm6, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvcs@@@vector128_consts@@SA?BUvcs@@XZ@4QBEB
	psubsw	xmm5, xmm6

; 42   : 
; 43   :         // Calc X(4k+3) Start
; 44   :         vcs x5 = saturated_add(a_c, jb_d);

	paddsw	xmm8, xmm6
	movdqa	xmm3, xmm5
	movdqa	xmm1, xmm2
	pxor	xmm1, xmm0
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pmaddwd	xmm3, xmm1
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	psrad	xmm3, 15

; 45   :         pi[nArray/4*3] = mul_shift(x5, FFT_GetTwiddleConst<N, 3>()[n], OUTPUT_SHIFT);

	movdqa	xmm0, xmm11
	pand	xmm3, xmm4
	pcmpeqd	xmm0, xmm11
	pmaddwd	xmm5, xmm1
	psrad	xmm5, 15
	movdqa	xmm11, xmm0
	pand	xmm5, xmm4
	pslld	xmm0, 16
	pslld	xmm5, 16
	por	xmm3, xmm5
	movdqa	XMMWORD PTR [rcx], xmm3
	movdqa	xmm2, XMMWORD PTR ?wFFTLUT64_3@@3QBU_COMPLEX16@@B[rax+rdx]
	movdqa	xmm4, XMMWORD PTR ?value@?1???$__0x0000FFFF0000FFFF0000FFFF0000FFFF@Uvi@@@vector128_consts@@SA?BUvi@@XZ@4QBEB
	movdqa	xmm3, xmm8
	movdqa	xmm1, xmm2
	pxor	xmm1, xmm0
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pmaddwd	xmm3, xmm1
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	psrad	xmm3, 15
	pand	xmm3, xmm4
	pmaddwd	xmm8, xmm1
	psrad	xmm8, 15
	pand	xmm8, xmm4
	pslld	xmm8, 16
	add	rax, 16
	add	rcx, 16
	cmp	rax, 64					; 00000040H
	por	xmm3, xmm8
	movdqa	XMMWORD PTR [rcx+48], xmm3
	jl	$LL3@FFTSSE

; 46   :     }
; 47   : }

	movaps	xmm6, XMMWORD PTR [rsp+96]
	movaps	xmm7, XMMWORD PTR [rsp+80]
	movaps	xmm8, XMMWORD PTR [rsp+64]
	movaps	xmm9, XMMWORD PTR [rsp+48]
	movaps	xmm10, XMMWORD PTR [rsp+32]
	movaps	xmm11, XMMWORD PTR [rsp+16]
	add	rsp, 120				; 00000078H
	ret	0
??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z ENDP			; FFTSSE<64>
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$FFTSSEEx@$0EA@@@YAXPEAUvcs@@@Z DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??$FFTSSEEx@$0EA@@@YAXPEAUvcs@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$FFTSSEEx@$0EA@@@YAXPEAUvcs@@@Z DD 020601H
	DD	030023206H
; Function compile flags: /Ogtpy
xdata	ENDS
;	COMDAT ??$FFTSSEEx@$0EA@@@YAXPEAUvcs@@@Z
_TEXT	SEGMENT
pInput$ = 48
??$FFTSSEEx@$0EA@@@YAXPEAUvcs@@@Z PROC			; FFTSSEEx<64>, COMDAT

; 52   : {

$LN3:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 53   :     const int nArray = N / vcs::size;
; 54   : 
; 55   :     FFTSSE<N> (pInput);

	call	??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z		; FFTSSE<64>

; 56   :     FFTSSEEx<N/4> (pInput);

	mov	rcx, rbx
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>

; 57   :     FFTSSEEx<N/4> (pInput + nArray / 4);

	lea	rcx, QWORD PTR [rbx+64]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>

; 58   :     FFTSSEEx<N/4> (pInput + nArray / 2);

	lea	rcx, QWORD PTR [rbx+128]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>

; 59   :     FFTSSEEx<N/4> (pInput + nArray / 4 * 3);

	lea	rcx, QWORD PTR [rbx+192]

; 60   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	jmp	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
??$FFTSSEEx@$0EA@@@YAXPEAUvcs@@@Z ENDP			; FFTSSEEx<64>
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\fft_lut_bitreversal.h
pdata	SEGMENT
$pdata$??$FFT@$0EA@@@YAXPEAUvcs@@0@Z DD imagerel $LN13
	DD	imagerel $LN13+148
	DD	imagerel $unwind$??$FFT@$0EA@@@YAXPEAUvcs@@0@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$FFT@$0EA@@@YAXPEAUvcs@@0@Z DD 040a01H
	DD	06340aH
	DD	07006320aH
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\inc\fft_r4dif.h
xdata	ENDS
;	COMDAT ??$FFT@$0EA@@@YAXPEAUvcs@@0@Z
_TEXT	SEGMENT
pInput$ = 48
pOutput$ = 56
??$FFT@$0EA@@@YAXPEAUvcs@@0@Z PROC			; FFT<64>, COMDAT

; 135  : {

$LN13:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 136  :     FFTSSEEx<N>(pInput);

	call	??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z		; FFTSSE<64>
	mov	rcx, rdi
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rdi+64]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rdi+128]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rdi+192]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	r11, OFFSET FLAT:?FFT64LUTMap@@3QBFB+2
	add	rbx, 8
	lea	rdx, OFFSET FLAT:?FFT64LUTMap@@3QBFB+130
$LL3@FFT:

; 137  :     int i;
; 138  :     for (i = 0; i < N; i++)
; 139  :         ((COMPLEX16*)pOutput)[i] = ((COMPLEX16*)pInput) [FFTLUTMapTable<N>(i)];

	movsx	rax, WORD PTR [r11-2]
	add	r11, 8
	add	rbx, 16
	cmp	r11, rdx
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rbx-24], ecx
	movsx	rax, WORD PTR [r11-8]
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rbx-20], ecx
	movsx	rax, WORD PTR [r11-6]
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rbx-16], ecx
	movsx	rax, WORD PTR [r11-4]
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rbx-12], ecx
	jl	SHORT $LL3@FFT

; 140  : 
; 141  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??$FFT@$0EA@@@YAXPEAUvcs@@0@Z ENDP			; FFT<64>
_TEXT	ENDS
PUBLIC	?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z	; BB11ARxTryData
;	COMDAT pdata
; File c:\sorasdk1.7\src\inc\timing.h
pdata	SEGMENT
$pdata$?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN391
	DD	imagerel $LN391+27056
	DD	imagerel $unwind$?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 0c1c01H
	DD	0d641cH
	DD	0c541cH
	DD	0b341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_fd.c
xdata	ENDS
;	COMDAT ?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
_TEXT	SEGMENT
pRxContextA$ = 80
?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z PROC	; BB11ARxTryData, COMDAT

; 319  : {

$LN391:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 320  :     HRESULT hr;
; 321  :     volatile FLAG *pbWorkIndicator = pRxContextA->ri_pbWorkIndicator;
; 322  :     do
; 323  :     {
; 324  :         // wait for 80 complexes, __pcTemp will point to the first one
; 325  :         unsigned char *pbTemp;
; 326  :         char bRet;
; 327  :         vcs *__pcTemp;
; 328  :         bRet = pRxContextA->rxFifos->g11a_lbSync.RCheck(20);

	mov	rdx, QWORD PTR [rcx+792]
	mov	r14, QWORD PTR [rcx+56]
	mov	rsi, rcx
	mov	eax, DWORD PTR [rdx+43076]
	mov	edx, DWORD PTR [rdx+43072]
	sub	edx, eax
	cmp	edx, 20
	setae	al

; 329  :         if (!bRet)

	test	al, al
	je	$LN352@BB11ARxTry
	lea	r12, QWORD PTR [rcx+2574132]
	lea	rbx, QWORD PTR [rcx+2574384]
	lea	r13, OFFSET FLAT:__ImageBase
	npad	5
$LL28@BB11ARxTry:

; 330  :         {
; 331  :             hr = __BB11A_RX_WAIT_DATA;
; 332  :             break;
; 333  :         }
; 334  :         // this should be approximately one symbol of data
; 335  :         __pcTemp = pRxContextA->rxFifos->g11a_lbSync.Peek();

	mov	rcx, QWORD PTR [rsi+792]
	mov	ebp, DWORD PTR [rcx+43076]
	add	rcx, 41024				; 0000a040H
	shl	rbp, 4
	add	rbp, rcx

; 336  : 
; 337  :         // ignore first 8 complexes
; 338  :         // we use no. 8 - 72 to do fft, 
; 339  :         // this has the same alignment for 24 - 84 complex in
; 340  :         // long preamble
; 341  :         __pcTemp += SYM_CP_SKIP;

	add	rbp, 32					; 00000020H

; 342  : 
; 343  : 
; 344  :         // do frequency compensation on 64 complexes
; 345  :         FreqComp64(__pcTemp, pRxContextA->freqEstimated, (vs*)pRxContextA->freqFactorCos, (vs*)pRxContextA->freqFactorSin);

	cmp	WORD PTR [rsi+2704], 0
	je	SHORT $LN35@BB11ARxTry
	mov	rax, rbp
	lea	rcx, QWORD PTR [rsi+2064]
	mov	edx, 16
	npad	8
$LL37@BB11ARxTry:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	add	rcx, 16
	sub	rdx, 1
	movdqa	xmm2, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pmulhw	xmm2, XMMWORD PTR [rcx+304]
	pmulhw	xmm1, XMMWORD PTR [rcx-16]
	paddw	xmm2, xmm1
	movdqa	XMMWORD PTR [rax-16], xmm2
	jne	SHORT $LL37@BB11ARxTry
$LN35@BB11ARxTry:

; 346  :         
; 347  :         // do fft, on 8 - 72 complex
; 348  :         FFT<64>(__pcTemp, (vcs*)pRxContextA->cFFTOut);

	mov	rcx, rbp
	call	??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z		; FFTSSE<64>
	mov	rcx, rbp
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rbp+64]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rbp+128]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rbp+192]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	r11, OFFSET FLAT:?FFT64LUTMap@@3QBFB+2
	mov	rdx, r12
	lea	r15, OFFSET FLAT:?FFT64LUTMap@@3QBFB+130
	npad	8
$LL93@BB11ARxTry:
	movsx	rax, WORD PTR [r11-2]
	add	r11, 8
	add	rdx, 16
	cmp	r11, r15
	mov	ecx, DWORD PTR [rbp+rax*4]
	mov	DWORD PTR [rdx-20], ecx
	movsx	rax, WORD PTR [r11-8]
	mov	ecx, DWORD PTR [rbp+rax*4]
	mov	DWORD PTR [rdx-16], ecx
	movsx	rax, WORD PTR [r11-6]
	mov	ecx, DWORD PTR [rbp+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	movsx	rax, WORD PTR [r11-4]
	mov	ecx, DWORD PTR [rbp+rax*4]
	mov	DWORD PTR [rdx-8], ecx
	jl	SHORT $LL93@BB11ARxTry
	mov	r15d, -32768				; ffffffffffff8000H

; 349  :         // channel compensation
; 350  :         ChannelComp(pRxContextA->channelFactor, pRxContextA->cFFTOut);

	lea	r11, QWORD PTR [rsi+2574136]
	lea	rbp, QWORD PTR [rsi+884]
	mov	r12d, 13
	npad	9
$LL105@BB11ARxTry:
	mov	edx, DWORD PTR [rbp-8]
	mov	ecx, DWORD PTR [rbp-12]
	movsx	r10d, WORD PTR [r11-4]
	movsx	r8d, WORD PTR [r11-2]
	mov	eax, r10d
	add	r11, 8
	imul	r10d, ecx
	mov	r9d, r8d
	add	rbp, 16
	imul	eax, edx
	imul	r8d, edx
	movsx	edx, WORD PTR [r11-6]
	sub	r10d, r8d
	imul	r9d, ecx
	movsx	r8d, WORD PTR [r11-8]
	add	r9d, eax
	sar	r10d, 11
	mov	WORD PTR [r11-12], r10w
	sar	r9d, 11
	mov	r10d, edx
	mov	WORD PTR [r11-10], r9w
	mov	ecx, DWORD PTR [rbp-16]
	mov	r9d, DWORD PTR [rbp-20]
	imul	r10d, r9d
	imul	r9d, r8d
	imul	edx, ecx
	sub	r9d, edx
	mov	eax, ecx
	sar	r9d, 11
	mov	WORD PTR [r11-8], r9w
	imul	eax, r8d
	add	r10d, eax
	sar	r10d, 11
	sub	r12, 1
	mov	WORD PTR [r11-6], r10w
	jne	$LL105@BB11ARxTry
	lea	r11, QWORD PTR [rsi+2574284]
	lea	rbp, QWORD PTR [rsi+1180]
	mov	r12d, 13
$LL102@BB11ARxTry:
	mov	edx, DWORD PTR [rbp-8]
	mov	ecx, DWORD PTR [rbp-12]
	movsx	r10d, WORD PTR [r11-4]
	movsx	r8d, WORD PTR [r11-2]
	mov	eax, r10d
	add	r11, 8
	imul	r10d, ecx
	mov	r9d, r8d
	add	rbp, 16
	imul	eax, edx
	imul	r8d, edx
	movsx	edx, WORD PTR [r11-6]
	sub	r10d, r8d
	imul	r9d, ecx
	movsx	r8d, WORD PTR [r11-8]
	add	r9d, eax
	sar	r10d, 11
	mov	WORD PTR [r11-12], r10w
	sar	r9d, 11
	mov	r10d, edx
	mov	WORD PTR [r11-10], r9w
	mov	ecx, DWORD PTR [rbp-16]
	mov	r9d, DWORD PTR [rbp-20]
	imul	r10d, r9d
	imul	r9d, r8d
	imul	edx, ecx
	sub	r9d, edx
	mov	eax, ecx
	sar	r9d, 11
	mov	WORD PTR [r11-8], r9w
	imul	eax, r8d
	add	r10d, eax
	sar	r10d, 11
	sub	r12, 1
	mov	WORD PTR [r11-6], r10w
	jne	$LL102@BB11ARxTry

; 351  :         // pilot freq compensation
; 352  :         Pilot(pRxContextA->cFFTOut, 
; 353  :               pRxContextA->channelFactor,
; 354  :               &pRxContextA->__bPilotCounter);

	movzx	eax, WORD PTR [rsi+2574300]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rsi+2574302]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rsi+2574356]
	movzx	r11d, WORD PTR ARG_LUT[r13+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rsi+2574358]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rsi+2574156]
	movzx	ebp, WORD PTR ARG_LUT[r13+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rsi+2574158]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rsi+2574212]
	movzx	r10d, WORD PTR ARG_LUT[r13+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rsi+2574214]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	r8d, WORD PTR ARG_LUT[r13+rcx*2]
	movsx	rcx, BYTE PTR [rsi+48]
	add	r8w, r15w
	cmp	BYTE PTR PILOTSGN_LUT[rcx+r13], r12b
	je	SHORT $LN117@BB11ARxTry
	add	r11w, r15w
	add	bp, r15w
	add	r10w, r15w
	add	r8w, r15w
$LN117@BB11ARxTry:
	inc	cl
	mov	BYTE PTR [rsi+48], cl
	cmp	cl, 127					; 0000007fH
	jne	SHORT $LN116@BB11ARxTry
	mov	BYTE PTR [rsi+48], 0
$LN116@BB11ARxTry:
	movsx	eax, r8w
	sub	r8w, bp
	movsx	ecx, r10w
	add	eax, ecx
	sub	r10w, r11w
	movsx	ecx, bp
	add	eax, ecx
	movsx	ecx, r11w
	add	eax, ecx
	movsx	ecx, r8w
	cdq
	and	edx, 3
	lea	r9d, DWORD PTR [rdx+rax]
	mov	eax, -1840700269			; ffffffff92492493H
	sar	r9d, 2
	imul	ecx
	lea	r8d, DWORD PTR [rcx+rdx]
	movzx	r11d, r9w
	sar	r8d, 4
	mov	eax, -1840700269			; ffffffff92492493H
	mov	ecx, r8d
	shr	ecx, 31
	add	r8d, ecx
	movsx	ecx, r10w
	mov	r10d, 38				; 00000026H
	imul	ecx
	add	edx, ecx
	mov	ecx, 6554				; 0000199aH
	sar	edx, 4
	mov	r13d, edx
	add	edx, r8d
	shr	r13d, 31
	add	r13d, edx
	sar	r13d, 1
	movzx	eax, r13w
	imul	ax, 26
	sub	r11w, ax
	mov	eax, 3277				; 00000ccdH
	add	r9w, ax
	xor	eax, eax
	cmp	r9w, cx
	lea	r9, OFFSET FLAT:__ImageBase
	seta	al
	movsxd	r15, eax
	npad	7
$LL115@BB11ARxTry:
	movsx	r8d, WORD PTR [rsi+r10*4+2574130]
	movsx	ecx, WORD PTR [rsi+r10*4+2574128]
	movzx	eax, r11w
	movsx	r12d, WORD PTR COS0xFFFF_LUT[r9+rax*2]
	movsx	ebp, WORD PTR SIN0xFFFF_LUT[r9+rax*2]
	mov	edx, r8d
	mov	eax, ecx
	imul	edx, r12d
	imul	r8d, ebp
	imul	ecx, r12d
	imul	eax, ebp
	add	r8d, ecx
	sar	r8d, 16
	sub	edx, eax
	mov	WORD PTR [rsi+r10*4+2574128], r8w
	sar	edx, 16
	mov	WORD PTR [rsi+r10*4+2574130], dx
	test	r15, r15
	je	SHORT $LN112@BB11ARxTry
	mov	r9d, DWORD PTR [rsi+r10*8+868]
	mov	r8d, DWORD PTR [rsi+r10*8+864]
	mov	ecx, r9d
	mov	eax, r8d
	imul	r9d, ebp
	imul	r8d, r12d
	imul	eax, ebp
	imul	ecx, r12d
	sub	ecx, eax
	lea	eax, DWORD PTR [r8+r9]
	lea	r9, OFFSET FLAT:__ImageBase
	sar	ecx, 15
	sar	eax, 15
	cwde
	movsx	edx, cx
	mov	DWORD PTR [rsi+r10*8+864], eax
	mov	DWORD PTR [rsi+r10*8+868], edx
$LN112@BB11ARxTry:
	inc	r10
	add	r11w, r13w
	cmp	r10, 64					; 00000040H
	jl	$LL115@BB11ARxTry
	add	r11w, r13w
	mov	r10d, 1
$LL111@BB11ARxTry:
	movsx	r8d, WORD PTR [rsi+r10*4+2574128]
	movsx	ecx, WORD PTR [rsi+r10*4+2574130]
	movzx	eax, r11w
	movsx	r12d, WORD PTR COS0xFFFF_LUT[r9+rax*2]
	movsx	ebp, WORD PTR SIN0xFFFF_LUT[r9+rax*2]
	mov	eax, r8d
	mov	edx, r12d
	imul	eax, ebp
	imul	r8d, r12d
	imul	edx, ecx
	sub	edx, eax
	mov	eax, ebp
	sar	edx, 16
	imul	eax, ecx
	add	r8d, eax
	mov	WORD PTR [rsi+r10*4+2574130], dx
	sar	r8d, 16
	mov	WORD PTR [rsi+r10*4+2574128], r8w
	test	r15, r15
	je	SHORT $LN108@BB11ARxTry
	mov	r9d, DWORD PTR [rsi+r10*8+864]
	mov	r8d, DWORD PTR [rsi+r10*8+868]
	mov	ecx, r12d
	mov	eax, r9d
	imul	ecx, r8d
	imul	r9d, r12d
	imul	eax, ebp
	imul	ebp, r8d
	sub	ecx, eax
	lea	eax, DWORD PTR [rbp+r9]
	sar	ecx, 15
	lea	r9, OFFSET FLAT:__ImageBase
	sar	eax, 15
	movsx	edx, cx
	cwde
	mov	DWORD PTR [rsi+r10*8+868], edx
	mov	DWORD PTR [rsi+r10*8+864], eax
$LN108@BB11ARxTry:
	inc	r10
	add	r11w, r13w
	cmp	r10, 26
	jle	$LL111@BB11ARxTry

; 355  :         
; 356  :         // demap
; 357  :         Demap_11a(pRxContextA->cFFTOut, pRxContextA->bDemapped, pRxContextA->bRate);

	movzx	edx, BYTE PTR [rsi+768]
	lea	rax, QWORD PTR [rsi+2574128]
	mov	ecx, 16
	npad	9
$LL132@BB11ARxTry:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	rcx, 1
	pmaxsw	xmm0, XMMWORD PTR ?rgbDemapMin@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	pminsw	xmm0, XMMWORD PTR ?rgbDemapMax@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL132@BB11ARxTry
	movsx	ecx, dl
	and	ecx, 3
	je	$LN122@BB11ARxTry
	sub	ecx, 1
	je	$LN123@BB11ARxTry
	sub	ecx, 1
	je	$LN124@BB11ARxTry
	sub	ecx, 1
	jne	SHORT $LN387@BB11ARxTry
	mov	rdx, rbx
	mov	ecx, 38					; 00000026H
	npad	2
$LL166@BB11ARxTry:
	cmp	rcx, 43					; 0000002bH
	je	SHORT $LN165@BB11ARxTry
	cmp	rcx, 57					; 00000039H
	je	SHORT $LN165@BB11ARxTry
	movzx	eax, BYTE PTR [rsi+rcx*4+2574128]
	inc	rdx
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r9]
	mov	BYTE PTR [rdx-1], al
$LN165@BB11ARxTry:
	inc	rcx
	cmp	rcx, 64					; 00000040H
	jl	SHORT $LL166@BB11ARxTry
	mov	ecx, 1
$LL161@BB11ARxTry:
	cmp	rcx, 7
	je	SHORT $LN160@BB11ARxTry
	cmp	rcx, 21
	je	SHORT $LN160@BB11ARxTry
	movzx	eax, BYTE PTR [rsi+rcx*4+2574128]
	inc	rdx
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r9]
	mov	BYTE PTR [rdx-1], al
$LN160@BB11ARxTry:
	inc	rcx
	cmp	rcx, 26
	jle	SHORT $LL161@BB11ARxTry
$LN387@BB11ARxTry:
	lea	r13, OFFSET FLAT:__ImageBase
$LN195@BB11ARxTry:

; 358  : 
; 359  :         // deinterleave and sent to viterbi buffer
; 360  :         switch (pRxContextA->bRate & 0x3)

	mov	cl, BYTE PTR [rsi+768]
	and	ecx, 3
	je	$LN19@BB11ARxTry
	sub	ecx, 1
	je	$LN20@BB11ARxTry
	sub	ecx, 1
	je	$LN21@BB11ARxTry
	cmp	ecx, 1
	jne	$LN383@BB11ARxTry

; 361  :         {
; 362  :             case 0x3:
; 363  :                 pRxContextA->rxFifos->vb1.SpaceWait(1, pbWorkIndicator);

	mov	rax, QWORD PTR [rsi+792]
	mov	rcx, QWORD PTR [rax]
	sub	rcx, rax
	sub	rcx, 64					; 00000040H
	sar	rcx, 6
	and	ecx, 127				; 0000007fH
	inc	rcx
	shl	rcx, 6
	add	rcx, rax
	movzx	eax, BYTE PTR [rcx]
	test	al, 1
	je	SHORT $LN379@BB11ARxTry
$LL206@BB11ARxTry:
	movzx	eax, BYTE PTR [r14]
	test	al, al
	je	SHORT $LN379@BB11ARxTry
	pause
	movzx	eax, BYTE PTR [rcx]
	test	al, 1
	jne	SHORT $LL206@BB11ARxTry
$LN379@BB11ARxTry:

; 364  :                 pbTemp = pRxContextA->rxFifos->vb1.Push();

	mov	r8, QWORD PTR [rsi+792]
	mov	rdx, QWORD PTR [r8+8]
	lea	rax, QWORD PTR [r8+8256]
	lea	rcx, QWORD PTR [rdx+64]
	mov	QWORD PTR [r8+8], rcx
	cmp	rcx, rax
	jne	SHORT $LN209@BB11ARxTry
	lea	rax, QWORD PTR [r8+64]
	mov	QWORD PTR [r8+8], rax
$LN209@BB11ARxTry:

; 365  :                 Deinterleave(pRxContextA->bDemapped, pbTemp, pRxContextA->bRate);

	movsx	ecx, BYTE PTR [rsi+768]
	and	ecx, 3
	je	$LN212@BB11ARxTry
	sub	ecx, 1
	je	$LN213@BB11ARxTry
	sub	ecx, 1
	je	$LN214@BB11ARxTry
	cmp	ecx, 1
	jne	$LN216@BB11ARxTry
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+51], al
	jmp	$LN216@BB11ARxTry

; 355  :         
; 356  :         // demap
; 357  :         Demap_11a(pRxContextA->cFFTOut, pRxContextA->bDemapped, pRxContextA->bRate);

$LN124@BB11ARxTry:
	mov	rcx, rbx
	mov	edx, 38					; 00000026H
$LL178@BB11ARxTry:
	cmp	rdx, 43					; 0000002bH
	je	SHORT $LN177@BB11ARxTry
	cmp	rdx, 57					; 00000039H
	je	SHORT $LN177@BB11ARxTry
	movzx	eax, BYTE PTR [rsi+rdx*4+2574128]
	add	rcx, 2
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r9]
	mov	BYTE PTR [rcx-2], al
	movzx	eax, BYTE PTR [rsi+rdx*4+2574130]
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r9]
	mov	BYTE PTR [rcx-1], al
$LN177@BB11ARxTry:
	inc	rdx
	cmp	rdx, 64					; 00000040H
	jl	SHORT $LL178@BB11ARxTry
	mov	edx, 1
	npad	4
$LL173@BB11ARxTry:
	cmp	rdx, 7
	je	SHORT $LN172@BB11ARxTry
	cmp	rdx, 21
	je	SHORT $LN172@BB11ARxTry
	movzx	eax, BYTE PTR [rsi+rdx*4+2574128]
	add	rcx, 2
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r9]
	mov	BYTE PTR [rcx-2], al
	movzx	eax, BYTE PTR [rsi+rdx*4+2574130]
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r9]
	mov	BYTE PTR [rcx-1], al
$LN172@BB11ARxTry:
	inc	rdx
	cmp	rdx, 26
	jle	SHORT $LL173@BB11ARxTry
	jmp	$LN387@BB11ARxTry
$LN123@BB11ARxTry:
	mov	r8, rbx
	mov	r9d, 38					; 00000026H
	lea	r13, OFFSET FLAT:__ImageBase
$LL190@BB11ARxTry:
	cmp	r9, 43					; 0000002bH
	je	SHORT $LN189@BB11ARxTry
	cmp	r9, 57					; 00000039H
	je	SHORT $LN189@BB11ARxTry
	movzx	ecx, BYTE PTR [rsi+r9*4+2574128]
	movzx	edx, BYTE PTR [rsi+r9*4+2574130]
	add	r8, 4
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r13]
	mov	BYTE PTR [r8-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rcx+r13]
	mov	rcx, rdx
	mov	BYTE PTR [r8-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r13]
	mov	BYTE PTR [r8-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rdx+r13]
	mov	BYTE PTR [r8-1], al
$LN189@BB11ARxTry:
	inc	r9
	cmp	r9, 64					; 00000040H
	jl	SHORT $LL190@BB11ARxTry
	mov	r9d, 1
	npad	2
$LL185@BB11ARxTry:
	cmp	r9, 7
	je	SHORT $LN184@BB11ARxTry
	cmp	r9, 21
	je	SHORT $LN184@BB11ARxTry
	movzx	ecx, BYTE PTR [rsi+r9*4+2574128]
	movzx	edx, BYTE PTR [rsi+r9*4+2574130]
	add	r8, 4
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r13]
	mov	BYTE PTR [r8-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rcx+r13]
	mov	rcx, rdx
	mov	BYTE PTR [r8-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r13]
	mov	BYTE PTR [r8-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap16QAM2@@3QBEB[rdx+r13]
	mov	BYTE PTR [r8-1], al
$LN184@BB11ARxTry:
	inc	r9
	cmp	r9, 26
	jle	SHORT $LL185@BB11ARxTry
	jmp	$LN195@BB11ARxTry
$LN122@BB11ARxTry:
	mov	r8, rbx
	mov	r9d, 38					; 00000026H
	lea	rbx, OFFSET FLAT:__ImageBase
$LL202@BB11ARxTry:
	cmp	r9, 43					; 0000002bH
	je	SHORT $LN201@BB11ARxTry
	cmp	r9, 57					; 00000039H
	je	SHORT $LN201@BB11ARxTry
	movzx	ecx, BYTE PTR [rsi+r9*4+2574128]
	movzx	edx, BYTE PTR [rsi+r9*4+2574130]
	add	r8, 6
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+rbx]
	mov	BYTE PTR [r8-6], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rcx+rbx]
	mov	BYTE PTR [r8-5], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rcx+rbx]
	mov	rcx, rdx
	mov	BYTE PTR [r8-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+rbx]
	mov	BYTE PTR [r8-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rdx+rbx]
	mov	BYTE PTR [r8-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rdx+rbx]
	mov	BYTE PTR [r8-1], al
$LN201@BB11ARxTry:
	inc	r9
	cmp	r9, 64					; 00000040H
	jl	SHORT $LL202@BB11ARxTry
	lea	rbx, QWORD PTR [rsi+2574384]
	mov	r9d, 1
	lea	r13, OFFSET FLAT:__ImageBase
$LL197@BB11ARxTry:
	cmp	r9, 7
	je	SHORT $LN196@BB11ARxTry
	cmp	r9, 21
	je	SHORT $LN196@BB11ARxTry
	movzx	ecx, BYTE PTR [rsi+r9*4+2574128]
	movzx	edx, BYTE PTR [rsi+r9*4+2574130]
	add	r8, 6
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rcx+r13]
	mov	BYTE PTR [r8-6], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rcx+r13]
	mov	BYTE PTR [r8-5], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rcx+r13]
	mov	rcx, rdx
	mov	BYTE PTR [r8-4], al
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rdx+r13]
	mov	BYTE PTR [r8-3], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM2@@3QBEB[rdx+r13]
	mov	BYTE PTR [r8-2], al
	movzx	eax, BYTE PTR ?g11a_rgbDemap64QAM3@@3QBEB[rdx+r13]
	mov	BYTE PTR [r8-1], al
$LN196@BB11ARxTry:
	inc	r9
	cmp	r9, 26
	jle	SHORT $LL197@BB11ARxTry
	jmp	$LN195@BB11ARxTry

; 365  :                 Deinterleave(pRxContextA->bDemapped, pbTemp, pRxContextA->bRate);

$LN214@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+99], al
	jmp	$LN216@BB11ARxTry
$LN213@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+195], al
	jmp	$LN216@BB11ARxTry
$LN212@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+199]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+216]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+236]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+253]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+270]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+200]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+217]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+234]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+254]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+271]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+198]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+218]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+235]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+252]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+272]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+202]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+219]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+239]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+256]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+273]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+203]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+220]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+237]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+257]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+274]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+201]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+221]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+238]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+255]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+275]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+205]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+222]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+242]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+259]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+276]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+206]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+223]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+240]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+260]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+277]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+204]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+224]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+241]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+258]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+278]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+208]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+225]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+245]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+262]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+279]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+209]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+226]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+243]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+263]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+280]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+207]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+227]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+244]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+261]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+281]
	mov	BYTE PTR [rdx+195], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+196], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+197], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+198], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+199], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+200], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+201], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+202], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+203], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+204], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+205], al
	movzx	eax, BYTE PTR [rbx+194]
	mov	BYTE PTR [rdx+206], al
	movzx	eax, BYTE PTR [rbx+211]
	mov	BYTE PTR [rdx+207], al
	movzx	eax, BYTE PTR [rbx+228]
	mov	BYTE PTR [rdx+208], al
	movzx	eax, BYTE PTR [rbx+248]
	mov	BYTE PTR [rdx+209], al
	movzx	eax, BYTE PTR [rbx+265]
	mov	BYTE PTR [rdx+210], al
	movzx	eax, BYTE PTR [rbx+282]
	mov	BYTE PTR [rdx+211], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+212], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+213], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+214], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+215], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+216], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+217], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+218], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+219], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+220], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+221], al
	movzx	eax, BYTE PTR [rbx+192]
	mov	BYTE PTR [rdx+222], al
	movzx	eax, BYTE PTR [rbx+212]
	mov	BYTE PTR [rdx+223], al
	movzx	eax, BYTE PTR [rbx+229]
	mov	BYTE PTR [rdx+224], al
	movzx	eax, BYTE PTR [rbx+246]
	mov	BYTE PTR [rdx+225], al
	movzx	eax, BYTE PTR [rbx+266]
	mov	BYTE PTR [rdx+226], al
	movzx	eax, BYTE PTR [rbx+283]
	mov	BYTE PTR [rdx+227], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+228], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+229], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+230], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+231], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+232], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+233], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+234], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+235], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+236], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+237], al
	movzx	eax, BYTE PTR [rbx+193]
	mov	BYTE PTR [rdx+238], al
	movzx	eax, BYTE PTR [rbx+210]
	mov	BYTE PTR [rdx+239], al
	movzx	eax, BYTE PTR [rbx+230]
	mov	BYTE PTR [rdx+240], al
	movzx	eax, BYTE PTR [rbx+247]
	mov	BYTE PTR [rdx+241], al
	movzx	eax, BYTE PTR [rbx+264]
	mov	BYTE PTR [rdx+242], al
	movzx	eax, BYTE PTR [rbx+284]
	mov	BYTE PTR [rdx+243], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+244], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+245], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+246], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+247], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+248], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+249], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+250], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+251], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+252], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+253], al
	movzx	eax, BYTE PTR [rbx+197]
	mov	BYTE PTR [rdx+254], al
	movzx	eax, BYTE PTR [rbx+214]
	mov	BYTE PTR [rdx+255], al
	movzx	eax, BYTE PTR [rbx+231]
	mov	BYTE PTR [rdx+256], al
	movzx	eax, BYTE PTR [rbx+251]
	mov	BYTE PTR [rdx+257], al
	movzx	eax, BYTE PTR [rbx+268]
	mov	BYTE PTR [rdx+258], al
	movzx	eax, BYTE PTR [rbx+285]
	mov	BYTE PTR [rdx+259], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+260], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+261], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+262], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+263], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+264], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+265], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+266], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+267], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+268], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+269], al
	movzx	eax, BYTE PTR [rbx+195]
	mov	BYTE PTR [rdx+270], al
	movzx	eax, BYTE PTR [rbx+215]
	mov	BYTE PTR [rdx+271], al
	movzx	eax, BYTE PTR [rbx+232]
	mov	BYTE PTR [rdx+272], al
	movzx	eax, BYTE PTR [rbx+249]
	mov	BYTE PTR [rdx+273], al
	movzx	eax, BYTE PTR [rbx+269]
	mov	BYTE PTR [rdx+274], al
	movzx	eax, BYTE PTR [rbx+286]
	mov	BYTE PTR [rdx+275], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+276], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+277], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+278], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+279], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+280], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+281], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+282], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+283], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+284], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+285], al
	movzx	eax, BYTE PTR [rbx+196]
	mov	BYTE PTR [rdx+286], al
	movzx	eax, BYTE PTR [rbx+213]
	mov	BYTE PTR [rdx+287], al
	movzx	eax, BYTE PTR [rbx+233]
	mov	BYTE PTR [rdx+288], al
	movzx	eax, BYTE PTR [rbx+250]
	mov	BYTE PTR [rdx+289], al
	movzx	eax, BYTE PTR [rbx+267]
	mov	BYTE PTR [rdx+290], al
	movzx	eax, BYTE PTR [rbx+287]
	mov	BYTE PTR [rdx+291], al
$LN216@BB11ARxTry:

; 366  :                 pRxContextA->rxFifos->vb1.Flush();

	mov	rcx, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [rcx], 64			; 00000040H
	lea	rax, QWORD PTR [rcx+8256]
$LN389@BB11ARxTry:

; 367  :                 break;

	mov	r12d, 128				; 00000080H
$LN388@BB11ARxTry:

; 366  :                 pRxContextA->rxFifos->vb1.Flush();

	cmp	QWORD PTR [rcx], rax
	jne	$LN302@BB11ARxTry
	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax

; 367  :                 break;

	jmp	$LN302@BB11ARxTry
$LN21@BB11ARxTry:

; 368  :             case 0x2:
; 369  :                 pRxContextA->rxFifos->vb2.SpaceWait(1, pbWorkIndicator);

	mov	rdx, QWORD PTR [rsi+792]
	mov	rcx, QWORD PTR [rdx]
	sub	rcx, rdx
	sub	rcx, 64					; 00000040H
	sar	rcx, 7
	and	ecx, 127				; 0000007fH
	shl	rcx, 7
	movzx	eax, BYTE PTR [rcx+rdx+64]
	test	al, 1
	je	SHORT $LN380@BB11ARxTry
	npad	7
$LL232@BB11ARxTry:
	movzx	eax, BYTE PTR [r14]
	test	al, al
	je	SHORT $LN380@BB11ARxTry
	pause
	movzx	eax, BYTE PTR [rcx+rdx+64]
	test	al, 1
	jne	SHORT $LL232@BB11ARxTry
$LN380@BB11ARxTry:

; 370  :                 pbTemp = pRxContextA->rxFifos->vb2.Push();

	mov	r8, QWORD PTR [rsi+792]
	mov	rdx, QWORD PTR [r8+8]
	lea	rax, QWORD PTR [r8+16448]
	lea	rcx, QWORD PTR [rdx+128]
	mov	QWORD PTR [r8+8], rcx
	cmp	rcx, rax
	jne	SHORT $LN235@BB11ARxTry
	lea	rax, QWORD PTR [r8+64]
	mov	QWORD PTR [r8+8], rax
$LN235@BB11ARxTry:

; 371  :                 Deinterleave(pRxContextA->bDemapped, pbTemp, pRxContextA->bRate);

	movsx	ecx, BYTE PTR [rsi+768]
	and	ecx, 3
	je	$LN238@BB11ARxTry
	sub	ecx, 1
	je	$LN239@BB11ARxTry
	sub	ecx, 1
	je	$LN240@BB11ARxTry
	cmp	ecx, 1
	jne	$LN242@BB11ARxTry
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+51], al
	jmp	$LN242@BB11ARxTry
$LN240@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+99], al
	jmp	$LN242@BB11ARxTry
$LN239@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+195], al
	jmp	$LN242@BB11ARxTry
$LN238@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+199]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+216]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+236]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+253]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+270]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+200]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+217]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+234]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+254]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+271]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+198]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+218]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+235]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+252]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+272]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+202]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+219]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+239]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+256]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+273]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+203]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+220]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+237]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+257]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+274]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+201]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+221]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+238]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+255]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+275]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+205]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+222]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+242]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+259]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+276]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+206]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+223]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+240]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+260]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+277]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+204]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+224]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+241]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+258]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+278]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+208]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+225]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+245]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+262]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+279]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+209]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+226]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+243]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+263]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+280]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+207]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+227]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+244]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+261]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+281]
	mov	BYTE PTR [rdx+195], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+196], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+197], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+198], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+199], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+200], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+201], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+202], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+203], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+204], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+205], al
	movzx	eax, BYTE PTR [rbx+194]
	mov	BYTE PTR [rdx+206], al
	movzx	eax, BYTE PTR [rbx+211]
	mov	BYTE PTR [rdx+207], al
	movzx	eax, BYTE PTR [rbx+228]
	mov	BYTE PTR [rdx+208], al
	movzx	eax, BYTE PTR [rbx+248]
	mov	BYTE PTR [rdx+209], al
	movzx	eax, BYTE PTR [rbx+265]
	mov	BYTE PTR [rdx+210], al
	movzx	eax, BYTE PTR [rbx+282]
	mov	BYTE PTR [rdx+211], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+212], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+213], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+214], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+215], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+216], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+217], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+218], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+219], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+220], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+221], al
	movzx	eax, BYTE PTR [rbx+192]
	mov	BYTE PTR [rdx+222], al
	movzx	eax, BYTE PTR [rbx+212]
	mov	BYTE PTR [rdx+223], al
	movzx	eax, BYTE PTR [rbx+229]
	mov	BYTE PTR [rdx+224], al
	movzx	eax, BYTE PTR [rbx+246]
	mov	BYTE PTR [rdx+225], al
	movzx	eax, BYTE PTR [rbx+266]
	mov	BYTE PTR [rdx+226], al
	movzx	eax, BYTE PTR [rbx+283]
	mov	BYTE PTR [rdx+227], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+228], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+229], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+230], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+231], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+232], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+233], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+234], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+235], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+236], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+237], al
	movzx	eax, BYTE PTR [rbx+193]
	mov	BYTE PTR [rdx+238], al
	movzx	eax, BYTE PTR [rbx+210]
	mov	BYTE PTR [rdx+239], al
	movzx	eax, BYTE PTR [rbx+230]
	mov	BYTE PTR [rdx+240], al
	movzx	eax, BYTE PTR [rbx+247]
	mov	BYTE PTR [rdx+241], al
	movzx	eax, BYTE PTR [rbx+264]
	mov	BYTE PTR [rdx+242], al
	movzx	eax, BYTE PTR [rbx+284]
	mov	BYTE PTR [rdx+243], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+244], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+245], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+246], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+247], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+248], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+249], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+250], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+251], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+252], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+253], al
	movzx	eax, BYTE PTR [rbx+197]
	mov	BYTE PTR [rdx+254], al
	movzx	eax, BYTE PTR [rbx+214]
	mov	BYTE PTR [rdx+255], al
	movzx	eax, BYTE PTR [rbx+231]
	mov	BYTE PTR [rdx+256], al
	movzx	eax, BYTE PTR [rbx+251]
	mov	BYTE PTR [rdx+257], al
	movzx	eax, BYTE PTR [rbx+268]
	mov	BYTE PTR [rdx+258], al
	movzx	eax, BYTE PTR [rbx+285]
	mov	BYTE PTR [rdx+259], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+260], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+261], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+262], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+263], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+264], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+265], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+266], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+267], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+268], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+269], al
	movzx	eax, BYTE PTR [rbx+195]
	mov	BYTE PTR [rdx+270], al
	movzx	eax, BYTE PTR [rbx+215]
	mov	BYTE PTR [rdx+271], al
	movzx	eax, BYTE PTR [rbx+232]
	mov	BYTE PTR [rdx+272], al
	movzx	eax, BYTE PTR [rbx+249]
	mov	BYTE PTR [rdx+273], al
	movzx	eax, BYTE PTR [rbx+269]
	mov	BYTE PTR [rdx+274], al
	movzx	eax, BYTE PTR [rbx+286]
	mov	BYTE PTR [rdx+275], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+276], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+277], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+278], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+279], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+280], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+281], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+282], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+283], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+284], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+285], al
	movzx	eax, BYTE PTR [rbx+196]
	mov	BYTE PTR [rdx+286], al
	movzx	eax, BYTE PTR [rbx+213]
	mov	BYTE PTR [rdx+287], al
	movzx	eax, BYTE PTR [rbx+233]
	mov	BYTE PTR [rdx+288], al
	movzx	eax, BYTE PTR [rbx+250]
	mov	BYTE PTR [rdx+289], al
	movzx	eax, BYTE PTR [rbx+267]
	mov	BYTE PTR [rdx+290], al
	movzx	eax, BYTE PTR [rbx+287]
	mov	BYTE PTR [rdx+291], al
$LN242@BB11ARxTry:

; 372  :                 pRxContextA->rxFifos->vb2.Flush();

	mov	rcx, QWORD PTR [rsi+792]
	mov	r12d, 128				; 00000080H
	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [rcx], r12
	lea	rax, QWORD PTR [rcx+16448]

; 373  :                 break;

	jmp	$LN388@BB11ARxTry
$LN20@BB11ARxTry:

; 374  :             case 0x1:
; 375  :                 pRxContextA->rxFifos->vb3.SpaceWait(1, pbWorkIndicator);

	mov	rdx, QWORD PTR [rsi+792]
	mov	rcx, QWORD PTR [rdx]
	sub	rcx, rdx
	sub	rcx, 64					; 00000040H
	sar	rcx, 8
	and	ecx, 127				; 0000007fH
	shl	rcx, 8
	movzx	eax, BYTE PTR [rcx+rdx+64]
	test	al, 1
	je	SHORT $LN381@BB11ARxTry
$LL258@BB11ARxTry:
	movzx	eax, BYTE PTR [r14]
	test	al, al
	je	SHORT $LN381@BB11ARxTry
	pause
	movzx	eax, BYTE PTR [rcx+rdx+64]
	test	al, 1
	jne	SHORT $LL258@BB11ARxTry
$LN381@BB11ARxTry:

; 376  :                 pbTemp = pRxContextA->rxFifos->vb3.Push();

	mov	r8, QWORD PTR [rsi+792]
	mov	rdx, QWORD PTR [r8+8]
	lea	rax, QWORD PTR [r8+32832]
	lea	rcx, QWORD PTR [rdx+256]
	mov	QWORD PTR [r8+8], rcx
	cmp	rcx, rax
	jne	SHORT $LN261@BB11ARxTry
	lea	rax, QWORD PTR [r8+64]
	mov	QWORD PTR [r8+8], rax
$LN261@BB11ARxTry:

; 377  :                 Deinterleave(pRxContextA->bDemapped, pbTemp, pRxContextA->bRate);

	movsx	ecx, BYTE PTR [rsi+768]
	and	ecx, 3
	je	$LN264@BB11ARxTry
	sub	ecx, 1
	je	$LN265@BB11ARxTry
	sub	ecx, 1
	je	$LN266@BB11ARxTry
	cmp	ecx, 1
	jne	$LN268@BB11ARxTry
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+51], al
	jmp	$LN268@BB11ARxTry
$LN266@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+99], al
	jmp	$LN268@BB11ARxTry
$LN265@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+195], al
	jmp	$LN268@BB11ARxTry
$LN264@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+199]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+216]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+236]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+253]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+270]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+200]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+217]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+234]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+254]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+271]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+198]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+218]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+235]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+252]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+272]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+202]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+219]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+239]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+256]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+273]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+203]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+220]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+237]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+257]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+274]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+201]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+221]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+238]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+255]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+275]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+205]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+222]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+242]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+259]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+276]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+206]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+223]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+240]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+260]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+277]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+204]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+224]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+241]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+258]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+278]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+208]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+225]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+245]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+262]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+279]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+209]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+226]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+243]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+263]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+280]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+207]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+227]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+244]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+261]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+281]
	mov	BYTE PTR [rdx+195], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+196], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+197], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+198], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+199], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+200], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+201], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+202], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+203], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+204], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+205], al
	movzx	eax, BYTE PTR [rbx+194]
	mov	BYTE PTR [rdx+206], al
	movzx	eax, BYTE PTR [rbx+211]
	mov	BYTE PTR [rdx+207], al
	movzx	eax, BYTE PTR [rbx+228]
	mov	BYTE PTR [rdx+208], al
	movzx	eax, BYTE PTR [rbx+248]
	mov	BYTE PTR [rdx+209], al
	movzx	eax, BYTE PTR [rbx+265]
	mov	BYTE PTR [rdx+210], al
	movzx	eax, BYTE PTR [rbx+282]
	mov	BYTE PTR [rdx+211], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+212], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+213], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+214], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+215], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+216], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+217], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+218], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+219], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+220], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+221], al
	movzx	eax, BYTE PTR [rbx+192]
	mov	BYTE PTR [rdx+222], al
	movzx	eax, BYTE PTR [rbx+212]
	mov	BYTE PTR [rdx+223], al
	movzx	eax, BYTE PTR [rbx+229]
	mov	BYTE PTR [rdx+224], al
	movzx	eax, BYTE PTR [rbx+246]
	mov	BYTE PTR [rdx+225], al
	movzx	eax, BYTE PTR [rbx+266]
	mov	BYTE PTR [rdx+226], al
	movzx	eax, BYTE PTR [rbx+283]
	mov	BYTE PTR [rdx+227], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+228], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+229], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+230], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+231], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+232], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+233], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+234], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+235], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+236], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+237], al
	movzx	eax, BYTE PTR [rbx+193]
	mov	BYTE PTR [rdx+238], al
	movzx	eax, BYTE PTR [rbx+210]
	mov	BYTE PTR [rdx+239], al
	movzx	eax, BYTE PTR [rbx+230]
	mov	BYTE PTR [rdx+240], al
	movzx	eax, BYTE PTR [rbx+247]
	mov	BYTE PTR [rdx+241], al
	movzx	eax, BYTE PTR [rbx+264]
	mov	BYTE PTR [rdx+242], al
	movzx	eax, BYTE PTR [rbx+284]
	mov	BYTE PTR [rdx+243], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+244], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+245], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+246], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+247], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+248], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+249], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+250], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+251], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+252], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+253], al
	movzx	eax, BYTE PTR [rbx+197]
	mov	BYTE PTR [rdx+254], al
	movzx	eax, BYTE PTR [rbx+214]
	mov	BYTE PTR [rdx+255], al
	movzx	eax, BYTE PTR [rbx+231]
	mov	BYTE PTR [rdx+256], al
	movzx	eax, BYTE PTR [rbx+251]
	mov	BYTE PTR [rdx+257], al
	movzx	eax, BYTE PTR [rbx+268]
	mov	BYTE PTR [rdx+258], al
	movzx	eax, BYTE PTR [rbx+285]
	mov	BYTE PTR [rdx+259], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+260], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+261], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+262], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+263], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+264], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+265], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+266], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+267], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+268], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+269], al
	movzx	eax, BYTE PTR [rbx+195]
	mov	BYTE PTR [rdx+270], al
	movzx	eax, BYTE PTR [rbx+215]
	mov	BYTE PTR [rdx+271], al
	movzx	eax, BYTE PTR [rbx+232]
	mov	BYTE PTR [rdx+272], al
	movzx	eax, BYTE PTR [rbx+249]
	mov	BYTE PTR [rdx+273], al
	movzx	eax, BYTE PTR [rbx+269]
	mov	BYTE PTR [rdx+274], al
	movzx	eax, BYTE PTR [rbx+286]
	mov	BYTE PTR [rdx+275], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+276], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+277], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+278], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+279], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+280], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+281], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+282], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+283], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+284], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+285], al
	movzx	eax, BYTE PTR [rbx+196]
	mov	BYTE PTR [rdx+286], al
	movzx	eax, BYTE PTR [rbx+213]
	mov	BYTE PTR [rdx+287], al
	movzx	eax, BYTE PTR [rbx+233]
	mov	BYTE PTR [rdx+288], al
	movzx	eax, BYTE PTR [rbx+250]
	mov	BYTE PTR [rdx+289], al
	movzx	eax, BYTE PTR [rbx+267]
	mov	BYTE PTR [rdx+290], al
	movzx	eax, BYTE PTR [rbx+287]
	mov	BYTE PTR [rdx+291], al
$LN268@BB11ARxTry:

; 378  :                 pRxContextA->rxFifos->vb3.Flush();

	mov	rcx, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [rcx], 256			; 00000100H
	lea	rax, QWORD PTR [rcx+32832]

; 379  :                 break;

	jmp	$LN389@BB11ARxTry
$LN19@BB11ARxTry:

; 380  :             case 0x0:
; 381  :                 pRxContextA->rxFifos->vb4.SpaceWait(1, pbWorkIndicator);

	mov	rcx, QWORD PTR [rsi+792]
	mov	r8, r14
	mov	edx, 1
	call	?SpaceWait@?$VB@$0BCA@$0IA@@@QEAAX_KPECD@Z ; VB<288,128>::SpaceWait

; 382  :                 pbTemp = pRxContextA->rxFifos->vb4.Push();

	mov	r11, QWORD PTR [rsi+792]
	mov	rdx, QWORD PTR [r11+8]
	lea	rax, QWORD PTR [r11+41024]
	lea	rcx, QWORD PTR [rdx+320]
	mov	QWORD PTR [r11+8], rcx
	cmp	rcx, rax
	jne	SHORT $LN283@BB11ARxTry
	lea	rax, QWORD PTR [r11+64]
	mov	QWORD PTR [r11+8], rax
$LN283@BB11ARxTry:

; 383  :                 Deinterleave(pRxContextA->bDemapped, pbTemp, pRxContextA->bRate);

	movsx	ecx, BYTE PTR [rsi+768]
	and	ecx, 3
	je	$LN286@BB11ARxTry
	sub	ecx, 1
	je	$LN287@BB11ARxTry
	sub	ecx, 1
	je	$LN288@BB11ARxTry
	cmp	ecx, 1
	jne	$LN290@BB11ARxTry
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+51], al
	jmp	$LN290@BB11ARxTry
$LN288@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+99], al
	jmp	$LN290@BB11ARxTry
$LN287@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+195], al
	jmp	$LN290@BB11ARxTry
$LN286@BB11ARxTry:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+4], al
	movzx	eax, BYTE PTR [rbx+20]
	mov	BYTE PTR [rdx+5], al
	movzx	eax, BYTE PTR [rbx+37]
	mov	BYTE PTR [rdx+6], al
	movzx	eax, BYTE PTR [rbx+54]
	mov	BYTE PTR [rdx+7], al
	movzx	eax, BYTE PTR [rbx+74]
	mov	BYTE PTR [rdx+8], al
	movzx	eax, BYTE PTR [rbx+91]
	mov	BYTE PTR [rdx+9], al
	movzx	eax, BYTE PTR [rbx+108]
	mov	BYTE PTR [rdx+10], al
	movzx	eax, BYTE PTR [rbx+128]
	mov	BYTE PTR [rdx+11], al
	movzx	eax, BYTE PTR [rbx+145]
	mov	BYTE PTR [rdx+12], al
	movzx	eax, BYTE PTR [rbx+162]
	mov	BYTE PTR [rdx+13], al
	movzx	eax, BYTE PTR [rbx+182]
	mov	BYTE PTR [rdx+14], al
	movzx	eax, BYTE PTR [rbx+199]
	mov	BYTE PTR [rdx+15], al
	movzx	eax, BYTE PTR [rbx+216]
	mov	BYTE PTR [rdx+16], al
	movzx	eax, BYTE PTR [rbx+236]
	mov	BYTE PTR [rdx+17], al
	movzx	eax, BYTE PTR [rbx+253]
	mov	BYTE PTR [rdx+18], al
	movzx	eax, BYTE PTR [rbx+270]
	mov	BYTE PTR [rdx+19], al
	movzx	eax, BYTE PTR [rbx+1]
	mov	BYTE PTR [rdx+20], al
	movzx	eax, BYTE PTR [rbx+18]
	mov	BYTE PTR [rdx+21], al
	movzx	eax, BYTE PTR [rbx+38]
	mov	BYTE PTR [rdx+22], al
	movzx	eax, BYTE PTR [rbx+55]
	mov	BYTE PTR [rdx+23], al
	movzx	eax, BYTE PTR [rbx+72]
	mov	BYTE PTR [rdx+24], al
	movzx	eax, BYTE PTR [rbx+92]
	mov	BYTE PTR [rdx+25], al
	movzx	eax, BYTE PTR [rbx+109]
	mov	BYTE PTR [rdx+26], al
	movzx	eax, BYTE PTR [rbx+126]
	mov	BYTE PTR [rdx+27], al
	movzx	eax, BYTE PTR [rbx+146]
	mov	BYTE PTR [rdx+28], al
	movzx	eax, BYTE PTR [rbx+163]
	mov	BYTE PTR [rdx+29], al
	movzx	eax, BYTE PTR [rbx+180]
	mov	BYTE PTR [rdx+30], al
	movzx	eax, BYTE PTR [rbx+200]
	mov	BYTE PTR [rdx+31], al
	movzx	eax, BYTE PTR [rbx+217]
	mov	BYTE PTR [rdx+32], al
	movzx	eax, BYTE PTR [rbx+234]
	mov	BYTE PTR [rdx+33], al
	movzx	eax, BYTE PTR [rbx+254]
	mov	BYTE PTR [rdx+34], al
	movzx	eax, BYTE PTR [rbx+271]
	mov	BYTE PTR [rdx+35], al
	movzx	eax, BYTE PTR [rbx+2]
	mov	BYTE PTR [rdx+36], al
	movzx	eax, BYTE PTR [rbx+19]
	mov	BYTE PTR [rdx+37], al
	movzx	eax, BYTE PTR [rbx+36]
	mov	BYTE PTR [rdx+38], al
	movzx	eax, BYTE PTR [rbx+56]
	mov	BYTE PTR [rdx+39], al
	movzx	eax, BYTE PTR [rbx+73]
	mov	BYTE PTR [rdx+40], al
	movzx	eax, BYTE PTR [rbx+90]
	mov	BYTE PTR [rdx+41], al
	movzx	eax, BYTE PTR [rbx+110]
	mov	BYTE PTR [rdx+42], al
	movzx	eax, BYTE PTR [rbx+127]
	mov	BYTE PTR [rdx+43], al
	movzx	eax, BYTE PTR [rbx+144]
	mov	BYTE PTR [rdx+44], al
	movzx	eax, BYTE PTR [rbx+164]
	mov	BYTE PTR [rdx+45], al
	movzx	eax, BYTE PTR [rbx+181]
	mov	BYTE PTR [rdx+46], al
	movzx	eax, BYTE PTR [rbx+198]
	mov	BYTE PTR [rdx+47], al
	movzx	eax, BYTE PTR [rbx+218]
	mov	BYTE PTR [rdx+48], al
	movzx	eax, BYTE PTR [rbx+235]
	mov	BYTE PTR [rdx+49], al
	movzx	eax, BYTE PTR [rbx+252]
	mov	BYTE PTR [rdx+50], al
	movzx	eax, BYTE PTR [rbx+272]
	mov	BYTE PTR [rdx+51], al
	movzx	eax, BYTE PTR [rbx+3]
	mov	BYTE PTR [rdx+52], al
	movzx	eax, BYTE PTR [rbx+23]
	mov	BYTE PTR [rdx+53], al
	movzx	eax, BYTE PTR [rbx+40]
	mov	BYTE PTR [rdx+54], al
	movzx	eax, BYTE PTR [rbx+57]
	mov	BYTE PTR [rdx+55], al
	movzx	eax, BYTE PTR [rbx+77]
	mov	BYTE PTR [rdx+56], al
	movzx	eax, BYTE PTR [rbx+94]
	mov	BYTE PTR [rdx+57], al
	movzx	eax, BYTE PTR [rbx+111]
	mov	BYTE PTR [rdx+58], al
	movzx	eax, BYTE PTR [rbx+131]
	mov	BYTE PTR [rdx+59], al
	movzx	eax, BYTE PTR [rbx+148]
	mov	BYTE PTR [rdx+60], al
	movzx	eax, BYTE PTR [rbx+165]
	mov	BYTE PTR [rdx+61], al
	movzx	eax, BYTE PTR [rbx+185]
	mov	BYTE PTR [rdx+62], al
	movzx	eax, BYTE PTR [rbx+202]
	mov	BYTE PTR [rdx+63], al
	movzx	eax, BYTE PTR [rbx+219]
	mov	BYTE PTR [rdx+64], al
	movzx	eax, BYTE PTR [rbx+239]
	mov	BYTE PTR [rdx+65], al
	movzx	eax, BYTE PTR [rbx+256]
	mov	BYTE PTR [rdx+66], al
	movzx	eax, BYTE PTR [rbx+273]
	mov	BYTE PTR [rdx+67], al
	movzx	eax, BYTE PTR [rbx+4]
	mov	BYTE PTR [rdx+68], al
	movzx	eax, BYTE PTR [rbx+21]
	mov	BYTE PTR [rdx+69], al
	movzx	eax, BYTE PTR [rbx+41]
	mov	BYTE PTR [rdx+70], al
	movzx	eax, BYTE PTR [rbx+58]
	mov	BYTE PTR [rdx+71], al
	movzx	eax, BYTE PTR [rbx+75]
	mov	BYTE PTR [rdx+72], al
	movzx	eax, BYTE PTR [rbx+95]
	mov	BYTE PTR [rdx+73], al
	movzx	eax, BYTE PTR [rbx+112]
	mov	BYTE PTR [rdx+74], al
	movzx	eax, BYTE PTR [rbx+129]
	mov	BYTE PTR [rdx+75], al
	movzx	eax, BYTE PTR [rbx+149]
	mov	BYTE PTR [rdx+76], al
	movzx	eax, BYTE PTR [rbx+166]
	mov	BYTE PTR [rdx+77], al
	movzx	eax, BYTE PTR [rbx+183]
	mov	BYTE PTR [rdx+78], al
	movzx	eax, BYTE PTR [rbx+203]
	mov	BYTE PTR [rdx+79], al
	movzx	eax, BYTE PTR [rbx+220]
	mov	BYTE PTR [rdx+80], al
	movzx	eax, BYTE PTR [rbx+237]
	mov	BYTE PTR [rdx+81], al
	movzx	eax, BYTE PTR [rbx+257]
	mov	BYTE PTR [rdx+82], al
	movzx	eax, BYTE PTR [rbx+274]
	mov	BYTE PTR [rdx+83], al
	movzx	eax, BYTE PTR [rbx+5]
	mov	BYTE PTR [rdx+84], al
	movzx	eax, BYTE PTR [rbx+22]
	mov	BYTE PTR [rdx+85], al
	movzx	eax, BYTE PTR [rbx+39]
	mov	BYTE PTR [rdx+86], al
	movzx	eax, BYTE PTR [rbx+59]
	mov	BYTE PTR [rdx+87], al
	movzx	eax, BYTE PTR [rbx+76]
	mov	BYTE PTR [rdx+88], al
	movzx	eax, BYTE PTR [rbx+93]
	mov	BYTE PTR [rdx+89], al
	movzx	eax, BYTE PTR [rbx+113]
	mov	BYTE PTR [rdx+90], al
	movzx	eax, BYTE PTR [rbx+130]
	mov	BYTE PTR [rdx+91], al
	movzx	eax, BYTE PTR [rbx+147]
	mov	BYTE PTR [rdx+92], al
	movzx	eax, BYTE PTR [rbx+167]
	mov	BYTE PTR [rdx+93], al
	movzx	eax, BYTE PTR [rbx+184]
	mov	BYTE PTR [rdx+94], al
	movzx	eax, BYTE PTR [rbx+201]
	mov	BYTE PTR [rdx+95], al
	movzx	eax, BYTE PTR [rbx+221]
	mov	BYTE PTR [rdx+96], al
	movzx	eax, BYTE PTR [rbx+238]
	mov	BYTE PTR [rdx+97], al
	movzx	eax, BYTE PTR [rbx+255]
	mov	BYTE PTR [rdx+98], al
	movzx	eax, BYTE PTR [rbx+275]
	mov	BYTE PTR [rdx+99], al
	movzx	eax, BYTE PTR [rbx+6]
	mov	BYTE PTR [rdx+100], al
	movzx	eax, BYTE PTR [rbx+26]
	mov	BYTE PTR [rdx+101], al
	movzx	eax, BYTE PTR [rbx+43]
	mov	BYTE PTR [rdx+102], al
	movzx	eax, BYTE PTR [rbx+60]
	mov	BYTE PTR [rdx+103], al
	movzx	eax, BYTE PTR [rbx+80]
	mov	BYTE PTR [rdx+104], al
	movzx	eax, BYTE PTR [rbx+97]
	mov	BYTE PTR [rdx+105], al
	movzx	eax, BYTE PTR [rbx+114]
	mov	BYTE PTR [rdx+106], al
	movzx	eax, BYTE PTR [rbx+134]
	mov	BYTE PTR [rdx+107], al
	movzx	eax, BYTE PTR [rbx+151]
	mov	BYTE PTR [rdx+108], al
	movzx	eax, BYTE PTR [rbx+168]
	mov	BYTE PTR [rdx+109], al
	movzx	eax, BYTE PTR [rbx+188]
	mov	BYTE PTR [rdx+110], al
	movzx	eax, BYTE PTR [rbx+205]
	mov	BYTE PTR [rdx+111], al
	movzx	eax, BYTE PTR [rbx+222]
	mov	BYTE PTR [rdx+112], al
	movzx	eax, BYTE PTR [rbx+242]
	mov	BYTE PTR [rdx+113], al
	movzx	eax, BYTE PTR [rbx+259]
	mov	BYTE PTR [rdx+114], al
	movzx	eax, BYTE PTR [rbx+276]
	mov	BYTE PTR [rdx+115], al
	movzx	eax, BYTE PTR [rbx+7]
	mov	BYTE PTR [rdx+116], al
	movzx	eax, BYTE PTR [rbx+24]
	mov	BYTE PTR [rdx+117], al
	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdx+118], al
	movzx	eax, BYTE PTR [rbx+61]
	mov	BYTE PTR [rdx+119], al
	movzx	eax, BYTE PTR [rbx+78]
	mov	BYTE PTR [rdx+120], al
	movzx	eax, BYTE PTR [rbx+98]
	mov	BYTE PTR [rdx+121], al
	movzx	eax, BYTE PTR [rbx+115]
	mov	BYTE PTR [rdx+122], al
	movzx	eax, BYTE PTR [rbx+132]
	mov	BYTE PTR [rdx+123], al
	movzx	eax, BYTE PTR [rbx+152]
	mov	BYTE PTR [rdx+124], al
	movzx	eax, BYTE PTR [rbx+169]
	mov	BYTE PTR [rdx+125], al
	movzx	eax, BYTE PTR [rbx+186]
	mov	BYTE PTR [rdx+126], al
	movzx	eax, BYTE PTR [rbx+206]
	mov	BYTE PTR [rdx+127], al
	movzx	eax, BYTE PTR [rbx+223]
	mov	BYTE PTR [rdx+128], al
	movzx	eax, BYTE PTR [rbx+240]
	mov	BYTE PTR [rdx+129], al
	movzx	eax, BYTE PTR [rbx+260]
	mov	BYTE PTR [rdx+130], al
	movzx	eax, BYTE PTR [rbx+277]
	mov	BYTE PTR [rdx+131], al
	movzx	eax, BYTE PTR [rbx+8]
	mov	BYTE PTR [rdx+132], al
	movzx	eax, BYTE PTR [rbx+25]
	mov	BYTE PTR [rdx+133], al
	movzx	eax, BYTE PTR [rbx+42]
	mov	BYTE PTR [rdx+134], al
	movzx	eax, BYTE PTR [rbx+62]
	mov	BYTE PTR [rdx+135], al
	movzx	eax, BYTE PTR [rbx+79]
	mov	BYTE PTR [rdx+136], al
	movzx	eax, BYTE PTR [rbx+96]
	mov	BYTE PTR [rdx+137], al
	movzx	eax, BYTE PTR [rbx+116]
	mov	BYTE PTR [rdx+138], al
	movzx	eax, BYTE PTR [rbx+133]
	mov	BYTE PTR [rdx+139], al
	movzx	eax, BYTE PTR [rbx+150]
	mov	BYTE PTR [rdx+140], al
	movzx	eax, BYTE PTR [rbx+170]
	mov	BYTE PTR [rdx+141], al
	movzx	eax, BYTE PTR [rbx+187]
	mov	BYTE PTR [rdx+142], al
	movzx	eax, BYTE PTR [rbx+204]
	mov	BYTE PTR [rdx+143], al
	movzx	eax, BYTE PTR [rbx+224]
	mov	BYTE PTR [rdx+144], al
	movzx	eax, BYTE PTR [rbx+241]
	mov	BYTE PTR [rdx+145], al
	movzx	eax, BYTE PTR [rbx+258]
	mov	BYTE PTR [rdx+146], al
	movzx	eax, BYTE PTR [rbx+278]
	mov	BYTE PTR [rdx+147], al
	movzx	eax, BYTE PTR [rbx+9]
	mov	BYTE PTR [rdx+148], al
	movzx	eax, BYTE PTR [rbx+29]
	mov	BYTE PTR [rdx+149], al
	movzx	eax, BYTE PTR [rbx+46]
	mov	BYTE PTR [rdx+150], al
	movzx	eax, BYTE PTR [rbx+63]
	mov	BYTE PTR [rdx+151], al
	movzx	eax, BYTE PTR [rbx+83]
	mov	BYTE PTR [rdx+152], al
	movzx	eax, BYTE PTR [rbx+100]
	mov	BYTE PTR [rdx+153], al
	movzx	eax, BYTE PTR [rbx+117]
	mov	BYTE PTR [rdx+154], al
	movzx	eax, BYTE PTR [rbx+137]
	mov	BYTE PTR [rdx+155], al
	movzx	eax, BYTE PTR [rbx+154]
	mov	BYTE PTR [rdx+156], al
	movzx	eax, BYTE PTR [rbx+171]
	mov	BYTE PTR [rdx+157], al
	movzx	eax, BYTE PTR [rbx+191]
	mov	BYTE PTR [rdx+158], al
	movzx	eax, BYTE PTR [rbx+208]
	mov	BYTE PTR [rdx+159], al
	movzx	eax, BYTE PTR [rbx+225]
	mov	BYTE PTR [rdx+160], al
	movzx	eax, BYTE PTR [rbx+245]
	mov	BYTE PTR [rdx+161], al
	movzx	eax, BYTE PTR [rbx+262]
	mov	BYTE PTR [rdx+162], al
	movzx	eax, BYTE PTR [rbx+279]
	mov	BYTE PTR [rdx+163], al
	movzx	eax, BYTE PTR [rbx+10]
	mov	BYTE PTR [rdx+164], al
	movzx	eax, BYTE PTR [rbx+27]
	mov	BYTE PTR [rdx+165], al
	movzx	eax, BYTE PTR [rbx+47]
	mov	BYTE PTR [rdx+166], al
	movzx	eax, BYTE PTR [rbx+64]
	mov	BYTE PTR [rdx+167], al
	movzx	eax, BYTE PTR [rbx+81]
	mov	BYTE PTR [rdx+168], al
	movzx	eax, BYTE PTR [rbx+101]
	mov	BYTE PTR [rdx+169], al
	movzx	eax, BYTE PTR [rbx+118]
	mov	BYTE PTR [rdx+170], al
	movzx	eax, BYTE PTR [rbx+135]
	mov	BYTE PTR [rdx+171], al
	movzx	eax, BYTE PTR [rbx+155]
	mov	BYTE PTR [rdx+172], al
	movzx	eax, BYTE PTR [rbx+172]
	mov	BYTE PTR [rdx+173], al
	movzx	eax, BYTE PTR [rbx+189]
	mov	BYTE PTR [rdx+174], al
	movzx	eax, BYTE PTR [rbx+209]
	mov	BYTE PTR [rdx+175], al
	movzx	eax, BYTE PTR [rbx+226]
	mov	BYTE PTR [rdx+176], al
	movzx	eax, BYTE PTR [rbx+243]
	mov	BYTE PTR [rdx+177], al
	movzx	eax, BYTE PTR [rbx+263]
	mov	BYTE PTR [rdx+178], al
	movzx	eax, BYTE PTR [rbx+280]
	mov	BYTE PTR [rdx+179], al
	movzx	eax, BYTE PTR [rbx+11]
	mov	BYTE PTR [rdx+180], al
	movzx	eax, BYTE PTR [rbx+28]
	mov	BYTE PTR [rdx+181], al
	movzx	eax, BYTE PTR [rbx+45]
	mov	BYTE PTR [rdx+182], al
	movzx	eax, BYTE PTR [rbx+65]
	mov	BYTE PTR [rdx+183], al
	movzx	eax, BYTE PTR [rbx+82]
	mov	BYTE PTR [rdx+184], al
	movzx	eax, BYTE PTR [rbx+99]
	mov	BYTE PTR [rdx+185], al
	movzx	eax, BYTE PTR [rbx+119]
	mov	BYTE PTR [rdx+186], al
	movzx	eax, BYTE PTR [rbx+136]
	mov	BYTE PTR [rdx+187], al
	movzx	eax, BYTE PTR [rbx+153]
	mov	BYTE PTR [rdx+188], al
	movzx	eax, BYTE PTR [rbx+173]
	mov	BYTE PTR [rdx+189], al
	movzx	eax, BYTE PTR [rbx+190]
	mov	BYTE PTR [rdx+190], al
	movzx	eax, BYTE PTR [rbx+207]
	mov	BYTE PTR [rdx+191], al
	movzx	eax, BYTE PTR [rbx+227]
	mov	BYTE PTR [rdx+192], al
	movzx	eax, BYTE PTR [rbx+244]
	mov	BYTE PTR [rdx+193], al
	movzx	eax, BYTE PTR [rbx+261]
	mov	BYTE PTR [rdx+194], al
	movzx	eax, BYTE PTR [rbx+281]
	mov	BYTE PTR [rdx+195], al
	movzx	eax, BYTE PTR [rbx+12]
	mov	BYTE PTR [rdx+196], al
	movzx	eax, BYTE PTR [rbx+32]
	mov	BYTE PTR [rdx+197], al
	movzx	eax, BYTE PTR [rbx+49]
	mov	BYTE PTR [rdx+198], al
	movzx	eax, BYTE PTR [rbx+66]
	mov	BYTE PTR [rdx+199], al
	movzx	eax, BYTE PTR [rbx+86]
	mov	BYTE PTR [rdx+200], al
	movzx	eax, BYTE PTR [rbx+103]
	mov	BYTE PTR [rdx+201], al
	movzx	eax, BYTE PTR [rbx+120]
	mov	BYTE PTR [rdx+202], al
	movzx	eax, BYTE PTR [rbx+140]
	mov	BYTE PTR [rdx+203], al
	movzx	eax, BYTE PTR [rbx+157]
	mov	BYTE PTR [rdx+204], al
	movzx	eax, BYTE PTR [rbx+174]
	mov	BYTE PTR [rdx+205], al
	movzx	eax, BYTE PTR [rbx+194]
	mov	BYTE PTR [rdx+206], al
	movzx	eax, BYTE PTR [rbx+211]
	mov	BYTE PTR [rdx+207], al
	movzx	eax, BYTE PTR [rbx+228]
	mov	BYTE PTR [rdx+208], al
	movzx	eax, BYTE PTR [rbx+248]
	mov	BYTE PTR [rdx+209], al
	movzx	eax, BYTE PTR [rbx+265]
	mov	BYTE PTR [rdx+210], al
	movzx	eax, BYTE PTR [rbx+282]
	mov	BYTE PTR [rdx+211], al
	movzx	eax, BYTE PTR [rbx+13]
	mov	BYTE PTR [rdx+212], al
	movzx	eax, BYTE PTR [rbx+30]
	mov	BYTE PTR [rdx+213], al
	movzx	eax, BYTE PTR [rbx+50]
	mov	BYTE PTR [rdx+214], al
	movzx	eax, BYTE PTR [rbx+67]
	mov	BYTE PTR [rdx+215], al
	movzx	eax, BYTE PTR [rbx+84]
	mov	BYTE PTR [rdx+216], al
	movzx	eax, BYTE PTR [rbx+104]
	mov	BYTE PTR [rdx+217], al
	movzx	eax, BYTE PTR [rbx+121]
	mov	BYTE PTR [rdx+218], al
	movzx	eax, BYTE PTR [rbx+138]
	mov	BYTE PTR [rdx+219], al
	movzx	eax, BYTE PTR [rbx+158]
	mov	BYTE PTR [rdx+220], al
	movzx	eax, BYTE PTR [rbx+175]
	mov	BYTE PTR [rdx+221], al
	movzx	eax, BYTE PTR [rbx+192]
	mov	BYTE PTR [rdx+222], al
	movzx	eax, BYTE PTR [rbx+212]
	mov	BYTE PTR [rdx+223], al
	movzx	eax, BYTE PTR [rbx+229]
	mov	BYTE PTR [rdx+224], al
	movzx	eax, BYTE PTR [rbx+246]
	mov	BYTE PTR [rdx+225], al
	movzx	eax, BYTE PTR [rbx+266]
	mov	BYTE PTR [rdx+226], al
	movzx	eax, BYTE PTR [rbx+283]
	mov	BYTE PTR [rdx+227], al
	movzx	eax, BYTE PTR [rbx+14]
	mov	BYTE PTR [rdx+228], al
	movzx	eax, BYTE PTR [rbx+31]
	mov	BYTE PTR [rdx+229], al
	movzx	eax, BYTE PTR [rbx+48]
	mov	BYTE PTR [rdx+230], al
	movzx	eax, BYTE PTR [rbx+68]
	mov	BYTE PTR [rdx+231], al
	movzx	eax, BYTE PTR [rbx+85]
	mov	BYTE PTR [rdx+232], al
	movzx	eax, BYTE PTR [rbx+102]
	mov	BYTE PTR [rdx+233], al
	movzx	eax, BYTE PTR [rbx+122]
	mov	BYTE PTR [rdx+234], al
	movzx	eax, BYTE PTR [rbx+139]
	mov	BYTE PTR [rdx+235], al
	movzx	eax, BYTE PTR [rbx+156]
	mov	BYTE PTR [rdx+236], al
	movzx	eax, BYTE PTR [rbx+176]
	mov	BYTE PTR [rdx+237], al
	movzx	eax, BYTE PTR [rbx+193]
	mov	BYTE PTR [rdx+238], al
	movzx	eax, BYTE PTR [rbx+210]
	mov	BYTE PTR [rdx+239], al
	movzx	eax, BYTE PTR [rbx+230]
	mov	BYTE PTR [rdx+240], al
	movzx	eax, BYTE PTR [rbx+247]
	mov	BYTE PTR [rdx+241], al
	movzx	eax, BYTE PTR [rbx+264]
	mov	BYTE PTR [rdx+242], al
	movzx	eax, BYTE PTR [rbx+284]
	mov	BYTE PTR [rdx+243], al
	movzx	eax, BYTE PTR [rbx+15]
	mov	BYTE PTR [rdx+244], al
	movzx	eax, BYTE PTR [rbx+35]
	mov	BYTE PTR [rdx+245], al
	movzx	eax, BYTE PTR [rbx+52]
	mov	BYTE PTR [rdx+246], al
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdx+247], al
	movzx	eax, BYTE PTR [rbx+89]
	mov	BYTE PTR [rdx+248], al
	movzx	eax, BYTE PTR [rbx+106]
	mov	BYTE PTR [rdx+249], al
	movzx	eax, BYTE PTR [rbx+123]
	mov	BYTE PTR [rdx+250], al
	movzx	eax, BYTE PTR [rbx+143]
	mov	BYTE PTR [rdx+251], al
	movzx	eax, BYTE PTR [rbx+160]
	mov	BYTE PTR [rdx+252], al
	movzx	eax, BYTE PTR [rbx+177]
	mov	BYTE PTR [rdx+253], al
	movzx	eax, BYTE PTR [rbx+197]
	mov	BYTE PTR [rdx+254], al
	movzx	eax, BYTE PTR [rbx+214]
	mov	BYTE PTR [rdx+255], al
	movzx	eax, BYTE PTR [rbx+231]
	mov	BYTE PTR [rdx+256], al
	movzx	eax, BYTE PTR [rbx+251]
	mov	BYTE PTR [rdx+257], al
	movzx	eax, BYTE PTR [rbx+268]
	mov	BYTE PTR [rdx+258], al
	movzx	eax, BYTE PTR [rbx+285]
	mov	BYTE PTR [rdx+259], al
	movzx	eax, BYTE PTR [rbx+16]
	mov	BYTE PTR [rdx+260], al
	movzx	eax, BYTE PTR [rbx+33]
	mov	BYTE PTR [rdx+261], al
	movzx	eax, BYTE PTR [rbx+53]
	mov	BYTE PTR [rdx+262], al
	movzx	eax, BYTE PTR [rbx+70]
	mov	BYTE PTR [rdx+263], al
	movzx	eax, BYTE PTR [rbx+87]
	mov	BYTE PTR [rdx+264], al
	movzx	eax, BYTE PTR [rbx+107]
	mov	BYTE PTR [rdx+265], al
	movzx	eax, BYTE PTR [rbx+124]
	mov	BYTE PTR [rdx+266], al
	movzx	eax, BYTE PTR [rbx+141]
	mov	BYTE PTR [rdx+267], al
	movzx	eax, BYTE PTR [rbx+161]
	mov	BYTE PTR [rdx+268], al
	movzx	eax, BYTE PTR [rbx+178]
	mov	BYTE PTR [rdx+269], al
	movzx	eax, BYTE PTR [rbx+195]
	mov	BYTE PTR [rdx+270], al
	movzx	eax, BYTE PTR [rbx+215]
	mov	BYTE PTR [rdx+271], al
	movzx	eax, BYTE PTR [rbx+232]
	mov	BYTE PTR [rdx+272], al
	movzx	eax, BYTE PTR [rbx+249]
	mov	BYTE PTR [rdx+273], al
	movzx	eax, BYTE PTR [rbx+269]
	mov	BYTE PTR [rdx+274], al
	movzx	eax, BYTE PTR [rbx+286]
	mov	BYTE PTR [rdx+275], al
	movzx	eax, BYTE PTR [rbx+17]
	mov	BYTE PTR [rdx+276], al
	movzx	eax, BYTE PTR [rbx+34]
	mov	BYTE PTR [rdx+277], al
	movzx	eax, BYTE PTR [rbx+51]
	mov	BYTE PTR [rdx+278], al
	movzx	eax, BYTE PTR [rbx+71]
	mov	BYTE PTR [rdx+279], al
	movzx	eax, BYTE PTR [rbx+88]
	mov	BYTE PTR [rdx+280], al
	movzx	eax, BYTE PTR [rbx+105]
	mov	BYTE PTR [rdx+281], al
	movzx	eax, BYTE PTR [rbx+125]
	mov	BYTE PTR [rdx+282], al
	movzx	eax, BYTE PTR [rbx+142]
	mov	BYTE PTR [rdx+283], al
	movzx	eax, BYTE PTR [rbx+159]
	mov	BYTE PTR [rdx+284], al
	movzx	eax, BYTE PTR [rbx+179]
	mov	BYTE PTR [rdx+285], al
	movzx	eax, BYTE PTR [rbx+196]
	mov	BYTE PTR [rdx+286], al
	movzx	eax, BYTE PTR [rbx+213]
	mov	BYTE PTR [rdx+287], al
	movzx	eax, BYTE PTR [rbx+233]
	mov	BYTE PTR [rdx+288], al
	movzx	eax, BYTE PTR [rbx+250]
	mov	BYTE PTR [rdx+289], al
	movzx	eax, BYTE PTR [rbx+267]
	mov	BYTE PTR [rdx+290], al
	movzx	eax, BYTE PTR [rbx+287]
	mov	BYTE PTR [rdx+291], al
$LN290@BB11ARxTry:

; 384  :                 pRxContextA->rxFifos->vb4.Flush();

	mov	rcx, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [rcx], 320			; 00000140H
	lea	rax, QWORD PTR [rcx+41024]
	jmp	$LN389@BB11ARxTry
$LN383@BB11ARxTry:
	mov	r12d, 128				; 00000080H
$LN302@BB11ARxTry:

; 385  :                 break;
; 386  :         }
; 387  : 
; 388  :         pRxContextA->rxFifos->g11a_lbSync.Pop(20);

	mov	rbp, QWORD PTR [rsi+792]
	mov	eax, DWORD PTR [rbp+43076]
	add	rbp, 41024				; 0000a040H
	add	rax, 20
	mov	DWORD PTR [rbp+2052], eax
	mov	ecx, DWORD PTR [rbp+2052]
	mov	eax, DWORD PTR [rbp+2048]
	cmp	ecx, eax
	jne	SHORT $LN306@BB11ARxTry
	xor	eax, eax
	mov	DWORD PTR [rbp+2048], eax
	mov	DWORD PTR [rbp+2052], eax
$LN306@BB11ARxTry:
	mov	eax, DWORD PTR [rbp+2052]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN305@BB11ARxTry
	mov	r8d, DWORD PTR [rbp+2048]
	mov	eax, DWORD PTR [rbp+2052]
	mov	edx, DWORD PTR [rbp+2052]
	mov	ecx, DWORD PTR [rbp+2052]
	sub	r8d, eax
	shl	rdx, 4
	add	rcx, -64				; ffffffffffffffc0H
	shl	r8, 4
	add	rdx, rbp
	shl	rcx, 4
	add	rcx, rbp
	call	memcpy
	mov	r11d, DWORD PTR [rbp+2052]
	sub	r11, 64					; 00000040H
	mov	DWORD PTR [rbp+2052], r11d
	mov	eax, DWORD PTR [rbp+2048]
	sub	rax, 64					; 00000040H
	mov	DWORD PTR [rbp+2048], eax
$LN305@BB11ARxTry:

; 389  : 
; 390  :         pRxContextA->__uiSymbolCount--;

	add	DWORD PTR [rsi+36], -1			; ffffffffH

; 391  :         if (pRxContextA->__uiSymbolCount == 0)

	je	SHORT $LN353@BB11ARxTry
	mov	rcx, QWORD PTR [rsi+792]
	lea	r12, QWORD PTR [rsi+2574132]
	mov	eax, DWORD PTR [rcx+43076]
	mov	ecx, DWORD PTR [rcx+43072]
	sub	ecx, eax
	cmp	ecx, 20
	setae	al
	test	al, al
	jne	$LL28@BB11ARxTry
$LN352@BB11ARxTry:

; 474  : 		}	
; 475  : 
; 476  : 	
; 477  :             break;
; 478  :         } // expect more symbols 
; 479  :     } while (TRUE); //continue wait symbols
; 480  : 
; 481  :     return hr;

	mov	eax, 768				; 00000300H
$LN26@BB11ARxTry:

; 482  : }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
$LN353@BB11ARxTry:

; 392  :         {
; 393  :             // zero padding for traceback
; 394  :             switch (pRxContextA->bRate & 0x3)

	mov	cl, BYTE PTR [rsi+768]
	and	ecx, 3
	je	$LN12@BB11ARxTry
	sub	ecx, 1
	je	$LN13@BB11ARxTry
	sub	ecx, 1
	je	$LN14@BB11ARxTry
	cmp	ecx, 1
	jne	$LN16@BB11ARxTry

; 395  :             {
; 396  :                 case 0x3:
; 397  :                     pRxContextA->rxFifos->vb1.SpaceWait(3, pbWorkIndicator);

	lea	edx, QWORD PTR [rcx+2]
	mov	rcx, QWORD PTR [rsi+792]
	mov	r8, r14
	call	?SpaceWait@?$VB@$0DA@$0IA@@@QEAAX_KPECD@Z ; VB<48,128>::SpaceWait

; 398  :                     pbTemp = pRxContextA->rxFifos->vb1.Push();

	mov	rcx, QWORD PTR [rsi+792]
	call	?Push@?$VB@$0DA@$0IA@@@QEAAPEAEXZ	; VB<48,128>::Push

; 399  :                     memset(pbTemp, 0, 48);

	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax+16], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
	mov	QWORD PTR [rax+40], rcx

; 400  :                     pRxContextA->rxFifos->vb1.Flush();

	mov	rcx, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [rcx], 64			; 00000040H
	lea	rax, QWORD PTR [rcx+8256]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN309@BB11ARxTry
	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax
$LN309@BB11ARxTry:

; 401  :                     pbTemp = pRxContextA->rxFifos->vb1.Push();

	mov	rcx, QWORD PTR [rsi+792]
	call	?Push@?$VB@$0DA@$0IA@@@QEAAPEAEXZ	; VB<48,128>::Push

; 402  :                     memset(pbTemp, 0, 48);

	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax+16], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
	mov	QWORD PTR [rax+40], rcx

; 403  :                     pRxContextA->rxFifos->vb1.Flush();

	mov	rcx, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [rcx], 64			; 00000040H
	lea	rax, QWORD PTR [rcx+8256]
	cmp	QWORD PTR [rcx], rax
	jne	SHORT $LN312@BB11ARxTry
	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax
$LN312@BB11ARxTry:

; 404  :                     pbTemp = pRxContextA->rxFifos->vb1.Push();

	mov	rcx, QWORD PTR [rsi+792]
	call	?Push@?$VB@$0DA@$0IA@@@QEAAPEAEXZ	; VB<48,128>::Push

; 405  :                     memset(pbTemp, 0, 48);

	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax+16], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
	mov	QWORD PTR [rax+40], rcx

; 406  :                     pRxContextA->rxFifos->vb1.Flush();

	mov	rcx, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [rcx]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [rcx], 64			; 00000040H
	lea	rax, QWORD PTR [rcx+8256]
	cmp	QWORD PTR [rcx], rax
	jne	$LN16@BB11ARxTry
	lea	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR [rcx], rax

; 407  :                     break;

	jmp	$LN16@BB11ARxTry
$LN14@BB11ARxTry:

; 408  :                 case 0x2:
; 409  :                     pRxContextA->rxFifos->vb2.SpaceWait(2, pbWorkIndicator);

	mov	rcx, QWORD PTR [rsi+792]
	mov	r8, r14
	mov	edx, 2
	call	?SpaceWait@?$VB@$0GA@$0IA@@@QEAAX_KPECD@Z ; VB<96,128>::SpaceWait

; 410  :                     pbTemp = pRxContextA->rxFifos->vb2.Push();

	mov	rcx, QWORD PTR [rsi+792]
	call	?Push@?$VB@$0GA@$0IA@@@QEAAPEAEXZ	; VB<96,128>::Push

; 411  :                     memset(pbTemp, 0, 96);

	xor	edx, edx
	lea	r8d, QWORD PTR [rdx+96]
	mov	rcx, rax
	call	memset

; 412  :                     pRxContextA->rxFifos->vb2.Flush();

	mov	r11, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [r11]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [r11], r12
	lea	rax, QWORD PTR [r11+16448]
	cmp	QWORD PTR [r11], rax
	jne	SHORT $LN318@BB11ARxTry
	lea	rax, QWORD PTR [r11+64]
	mov	QWORD PTR [r11], rax
$LN318@BB11ARxTry:

; 413  :                     pbTemp = pRxContextA->rxFifos->vb2.Push();

	mov	rcx, QWORD PTR [rsi+792]
	call	?Push@?$VB@$0GA@$0IA@@@QEAAPEAEXZ	; VB<96,128>::Push

; 414  :                     memset(pbTemp, 0, 96);

	xor	edx, edx
	lea	r8d, QWORD PTR [rdx+96]
	mov	rcx, rax
	call	memset

; 415  :                     pRxContextA->rxFifos->vb2.Flush();

	mov	r11, QWORD PTR [rsi+792]
	mov	rax, QWORD PTR [r11]
	mov	BYTE PTR [rax], 1
	add	QWORD PTR [r11], r12
	lea	rax, QWORD PTR [r11+16448]
	cmp	QWORD PTR [r11], rax
	jne	$LN16@BB11ARxTry
	lea	rax, QWORD PTR [r11+64]
	mov	QWORD PTR [r11], rax

; 416  :                     break;

	jmp	SHORT $LN16@BB11ARxTry
$LN13@BB11ARxTry:

; 417  :                 case 0x1:
; 418  :                     pRxContextA->rxFifos->vb3.SpaceWait(1, pbWorkIndicator);

	mov	rcx, QWORD PTR [rsi+792]
	mov	r8, r14
	mov	edx, 1
	call	?SpaceWait@?$VB@$0MA@$0IA@@@QEAAX_KPECD@Z ; VB<192,128>::SpaceWait

; 419  :                     pbTemp = pRxContextA->rxFifos->vb3.Push();

	mov	rcx, QWORD PTR [rsi+792]
	call	?Push@?$VB@$0MA@$0IA@@@QEAAPEAEXZ	; VB<192,128>::Push

; 420  :                     memset(pbTemp, 0, 192);

	xor	edx, edx
	mov	r8d, 192				; 000000c0H
	mov	rcx, rax
	call	memset

; 421  :                     pRxContextA->rxFifos->vb3.Flush(); 

	mov	rcx, QWORD PTR [rsi+792]
	call	?Flush@?$VB@$0MA@$0IA@@@QEAAXXZ		; VB<192,128>::Flush

; 422  :                     break;

	jmp	SHORT $LN16@BB11ARxTry
$LN12@BB11ARxTry:

; 423  :                 case 0x0:
; 424  :                     pRxContextA->rxFifos->vb4.SpaceWait(1, pbWorkIndicator);

	mov	rcx, QWORD PTR [rsi+792]
	mov	r8, r14
	mov	edx, 1
	call	?SpaceWait@?$VB@$0BCA@$0IA@@@QEAAX_KPECD@Z ; VB<288,128>::SpaceWait

; 425  :                     pbTemp = pRxContextA->rxFifos->vb4.Push();

	mov	rcx, QWORD PTR [rsi+792]
	call	?Push@?$VB@$0BCA@$0IA@@@QEAAPEAEXZ	; VB<288,128>::Push

; 426  :                     memset(pbTemp, 0, 288);

	xor	edx, edx
	mov	r8d, 288				; 00000120H
	mov	rcx, rax
	call	memset

; 427  :                     pRxContextA->rxFifos->vb4.Flush();                              

	mov	rcx, QWORD PTR [rsi+792]
	call	?Flush@?$VB@$0BCA@$0IA@@@QEAAXXZ	; VB<288,128>::Flush
$LN16@BB11ARxTry:

; 428  :                     break;
; 429  :             }
; 430  : 
; 431  : #ifdef USER_MODE
; 432  :             TimerStop(&pRxContextA->ri_tOfflineTimings[2]);

	lea	rcx, QWORD PTR [rsi+640]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 433  : #endif
; 434  :             while (!BB11A_VITERBIDONE_WAIT_EVENT(pRxContextA))

	movzx	eax, BYTE PTR [rsi+761]
	test	al, al
	jne	SHORT $LN382@BB11ARxTry
$LL11@BB11ARxTry:

; 435  :             {
; 436  :                 if (!(*pbWorkIndicator))

	movzx	eax, BYTE PTR [r14]
	test	al, al
	je	SHORT $LN382@BB11ARxTry

; 437  :                 {
; 438  :                     hr = BB11A_E_FORCE_STOP;
; 439  :                     break;
; 440  :                 }
; 441  :                 _mm_pause();

	pause
	movzx	eax, BYTE PTR [rsi+761]
	test	al, al
	je	SHORT $LL11@BB11ARxTry
$LN382@BB11ARxTry:

; 442  :             }
; 443  :             
; 444  : #ifdef USER_MODE
; 445  :             TimerStop(&pRxContextA->ri_tOfflineTimings[4]);

	lea	rcx, QWORD PTR [rsi+672]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 446  : #endif
; 447  :             
; 448  :             if (pRxContextA->bCRCCorrect)

	mov	ecx, DWORD PTR [rsi+764]
	mov	edi, -2147459068			; ffffffff80006004H
	test	ecx, ecx

; 449  :             {
; 450  :                 hr = BB11A_OK_FRAME;
; 451  :             }
; 452  :             else
; 453  :             {
; 454  :                 hr = BB11A_E_CRC32;
; 455  :                 KdPrint(("FD_NEGATIVE: crc32 error.\n"));
; 456  : #ifdef USER_MODE
; 457  :                // __BB11ARxPrintFrame(pRxContextA);
; 458  : #endif                      
; 459  :             }
; 460  : 			
; 461  : 	//for bad frames or good frames we both extract the Long SYNC data
; 462  : 	if (pRxContextA->bCRCCorrect ||!pRxContextA->bCRCCorrect) {

	mov	ecx, DWORD PTR [rsi+764]
	mov	eax, 514				; 00000202H
	cmovne	edi, eax
	test	ecx, ecx
	jne	SHORT $LN5@BB11ARxTry
	mov	ecx, DWORD PTR [rsi+764]
	test	ecx, ecx
	jne	SHORT $LN390@BB11ARxTry
$LN5@BB11ARxTry:

; 463  : 			FILE *fp;
; 464  : 			fp = fopen("C:\\SoraSDK1.7\\src\\bb\\dot11a\\SYNC_11A\\Wisee_802.11a_Sync.txt", "a");

	lea	rdx, OFFSET FLAT:??_C@_01MCMALHOG@a?$AA@
	lea	rcx, OFFSET FLAT:??_C@_0DM@LBDDFIFH@C?3?2SoraSDK1?47?2src?2bb?2dot11a?2SYNC@
	call	fopen
	mov	rbx, rax

; 465  : 			if (fp == NULL) {

	test	rax, rax
	jne	SHORT $LN4@BB11ARxTry

; 466  : 				printf("can't open file! \n");

	lea	rcx, OFFSET FLAT:??_C@_0BD@OBAAEMJB@can?8t?5open?5file?$CB?5?6?$AA@
	call	printf
$LN4@BB11ARxTry:

; 467  : 			}
; 468  : 			
; 469  : 			for (int i=0; i<128; i++)
; 470  : 			fprintf(fp, "%5d  %5d\n", pRxContextA->SYNC_11a[i].re, pRxContextA->SYNC_11a[i].im);

	add	rsi, 76					; 0000004cH
	npad	3
$LL3@BB11ARxTry:
	movsx	r9d, WORD PTR [rsi+2]
	movsx	r8d, WORD PTR [rsi]
	lea	rdx, OFFSET FLAT:??_C@_09DGPCGLPK@?$CF5d?5?5?$CF5d?6?$AA@
	mov	rcx, rbx
	call	fprintf
	add	rsi, 4
	sub	r12, 1
	jne	SHORT $LL3@BB11ARxTry

; 471  : 			
; 472  : 			fputs("\n\n", fp);

	lea	rcx, OFFSET FLAT:??_C@_02PHMGELLB@?6?6?$AA@
	mov	rdx, rbx
	call	fputs

; 473  : 			fclose(fp);

	mov	rcx, rbx
	call	fclose
$LN390@BB11ARxTry:

; 474  : 		}	
; 475  : 
; 476  : 	
; 477  :             break;
; 478  :         } // expect more symbols 
; 479  :     } while (TRUE); //continue wait symbols
; 480  : 
; 481  :     return hr;

	mov	eax, edi

; 473  : 			fclose(fp);

	jmp	$LN26@BB11ARxTry
?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ENDP	; BB11ARxTryData
_TEXT	ENDS
PUBLIC	?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ; BB11ARxTryPreambleFFT
;	COMDAT pdata
; File c:\sorasdk1.7\src\inc\timing.h
pdata	SEGMENT
$pdata$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135
	DD	imagerel $LN135+58
	DD	imagerel $unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+58
	DD	imagerel $LN135+103
	DD	imagerel $chain$4$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+103
	DD	imagerel $LN135+385
	DD	imagerel $chain$6$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+385
	DD	imagerel $LN135+573
	DD	imagerel $chain$7$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+573
	DD	imagerel $LN135+842
	DD	imagerel $chain$8$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+842
	DD	imagerel $LN135+891
	DD	imagerel $chain$9$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+891
	DD	imagerel $LN135+1128
	DD	imagerel $chain$10$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+1128
	DD	imagerel $LN135+1158
	DD	imagerel $chain$11$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN135+1158
	DD	imagerel $LN135+1300
	DD	imagerel $chain$12$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 020021H
	DD	0d7400H
	DD	imagerel $LN135
	DD	imagerel $LN135+58
	DD	imagerel $unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 040021H
	DD	07c400H
	DD	0d7400H
	DD	imagerel $LN135
	DD	imagerel $LN135+58
	DD	imagerel $unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 060021H
	DD	07c400H
	DD	0d7400H
	DD	0c6400H
	DD	imagerel $LN135
	DD	imagerel $LN135+58
	DD	imagerel $unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 0a0021H
	DD	06d400H
	DD	07c400H
	DD	0d7400H
	DD	0c6400H
	DD	0b5400H
	DD	imagerel $LN135
	DD	imagerel $LN135+58
	DD	imagerel $unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 060021H
	DD	07c400H
	DD	0d7400H
	DD	0c6400H
	DD	imagerel $LN135
	DD	imagerel $LN135+58
	DD	imagerel $unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 021H
	DD	imagerel $LN135+58
	DD	imagerel $LN135+103
	DD	imagerel $chain$4$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 041421H
	DD	04f414H
	DD	05e405H
	DD	imagerel $LN135+58
	DD	imagerel $LN135+103
	DD	imagerel $chain$4$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 0a2a21H
	DD	06d42aH
	DD	07c421H
	DD	0d740fH
	DD	0c640aH
	DD	0b5405H
	DD	imagerel $LN135
	DD	imagerel $LN135+58
	DD	imagerel $unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 020601H
	DD	030027206H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_fd.c
xdata	ENDS
;	COMDAT ?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
_TEXT	SEGMENT
pRxContextA$ = 80
?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z PROC ; BB11ARxTryPreambleFFT, COMDAT

; 91   : {

$LN135:
	push	rbx
	sub	rsp, 64					; 00000040H

; 92   :     HRESULT hr;
; 93   :     do
; 94   :     {
; 95   :         // wait for 160 complexes, __pcTemp will point to the first one
; 96   :         char __bRet;
; 97   :         vcs *__pcTemp;
; 98   :         // Note: tatal 40 vcs for preamble, the first 4 is consumed by BB11ARxTrySync
; 99   :         __bRet = pRxContextA->rxFifos->g11a_lbSync.RCheck(36); 

	mov	rdx, QWORD PTR [rcx+792]
	mov	rbx, rcx
	mov	eax, DWORD PTR [rdx+43076]
	mov	edx, DWORD PTR [rdx+43072]
	sub	edx, eax
	cmp	edx, 36					; 00000024H
	setae	al

; 100  :         if (!__bRet)

	test	al, al
	jne	SHORT $LN4@BB11ARxTry@2

; 143  : #endif
; 144  :         hr = __BB11A_RX_MODE_SWITCH;
; 145  :     } while(FALSE);
; 146  : 
; 147  :     return hr;

	mov	eax, 768				; 00000300H

; 148  : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN4@BB11ARxTry@2:

; 101  :         {
; 102  :             hr = __BB11A_RX_WAIT_DATA;
; 103  :             break;
; 104  :         }
; 105  :         __pcTemp = pRxContextA->rxFifos->g11a_lbSync.Peek();

	mov	rcx, QWORD PTR [rcx+792]
	mov	QWORD PTR [rsp+88], rbp
	mov	QWORD PTR [rsp+96], rsi
	mov	QWORD PTR [rsp+104], rdi
	mov	edi, DWORD PTR [rcx+43076]
	add	rcx, 41024				; 0000a040H
	mov	QWORD PTR [rsp+56], r12
	shl	rdi, 4
	mov	QWORD PTR [rsp+48], r13
	add	rdi, rcx
	mov	QWORD PTR [rsp+40], r14
	mov	r8d, 64					; 00000040H

; 106  : 
; 107  :         // this should be approximately start of long preamble
; 108  : 
; 109  :         // ignore the first 24 complexes, 
; 110  :         // we use no. 24 - 152 to estimate freqency offset
; 111  :         __pcTemp += LT_CP_SKIP - 4;

	add	rdi, 32					; 00000020H
	mov	QWORD PTR [rsp+32], r15
	lea	rcx, QWORD PTR [rbx+80]
	lea	rdx, QWORD PTR [rdi+36]
	npad	13
$LL3@BB11ARxTry@2:

; 112  : 		
; 113  : 	//11a long sync buffer
; 114  : 	COMPLEX16* Data = (COMPLEX16*)__pcTemp;
; 115  : 	for (int i = 0; i < 128; i++)
; 116  : 		pRxContextA->SYNC_11a[i] = Data[i+8];

	mov	eax, DWORD PTR [rdx-4]
	add	rcx, 8
	add	rdx, 8
	sub	r8, 1
	mov	DWORD PTR [rcx-12], eax
	mov	eax, DWORD PTR [rdx-8]
	mov	DWORD PTR [rcx-8], eax
	jne	SHORT $LL3@BB11ARxTry@2

; 117  : 	
; 118  :         // estimate frequency offset from 128 IQs
; 119  :         pRxContextA->freqEstimated = EstimateFreqOffset ( (COMPLEX16*)__pcTemp, 
; 120  :                                       pRxContextA->freqFactorCos, 
; 121  :                                       pRxContextA->freqFactorSin );

	xor	eax, eax
	lea	r11, QWORD PTR [rbx+2064]
	lea	r12, QWORD PTR [rdi+256]
	mov	esi, eax
	mov	ebp, eax

; 130  : 
; 131  :         // estimate channel compensation
; 132  :         EstimateChannel(pRxContextA->cFFTOut, pRxContextA->channelFactor);

	mov	r14d, eax
	mov	r15d, eax
	lea	r13d, QWORD PTR [r8+32]
	npad	8
$LL27@BB11ARxTry@2:
	movsx	edx, WORD PTR [r12-256]
	movsx	r8d, WORD PTR [r12-254]
	movsx	r9d, WORD PTR [r12]
	movsx	r10d, WORD PTR [r12+2]
	mov	eax, r9d
	add	r12, 8
	mov	ecx, r10d
	imul	r9d, r8d
	imul	eax, edx
	imul	r10d, edx
	movsx	edx, WORD PTR [r12-260]
	sub	r10d, r9d
	movsx	r9d, WORD PTR [r12-4]
	imul	ecx, r8d
	movsx	r8d, WORD PTR [r12-258]
	add	ecx, eax
	sar	r10d, 5
	sar	ecx, 5
	add	ebp, r10d
	movsx	r10d, WORD PTR [r12-2]
	add	esi, ecx
	mov	ecx, r10d
	mov	eax, r9d
	imul	r10d, edx
	imul	r9d, r8d
	sub	r10d, r9d
	sar	r10d, 5
	add	r15d, r10d
	imul	ecx, r8d
	imul	eax, edx
	add	ecx, eax
	sar	ecx, 5
	add	r14d, ecx
	sub	r13, 1
	jne	$LL27@BB11ARxTry@2
	add	esi, r14d
	mov	r14, QWORD PTR [rsp+40]
	add	ebp, r15d
	mov	r15, QWORD PTR [rsp+32]
	sar	esi, 10
	test	esi, esi
	jne	$LN24@BB11ARxTry@2

; 117  : 	
; 118  :         // estimate frequency offset from 128 IQs
; 119  :         pRxContextA->freqEstimated = EstimateFreqOffset ( (COMPLEX16*)__pcTemp, 
; 120  :                                       pRxContextA->freqFactorCos, 
; 121  :                                       pRxContextA->freqFactorSin );

	test	ebp, ebp
	jle	SHORT $LN23@BB11ARxTry@2
	mov	eax, 2048				; 00000800H
	xor	r12d, r12d
	jmp	$LN134@BB11ARxTry@2
$LN23@BB11ARxTry@2:
	test	ebp, ebp
	jns	$LN21@BB11ARxTry@2
	mov	eax, -2048				; fffffffffffff800H
$LN18@BB11ARxTry@2:
	neg	eax
	lea	rsi, OFFSET FLAT:__ImageBase
	and	eax, 2047				; 000007ffH
	movzx	ecx, WORD PTR ATAN64_LUT[rsi+rax*2]
	neg	ecx
	xor	r12d, r12d
$LN17@BB11ARxTry@2:
	lea	rbp, QWORD PTR [rbx+2384]
	movzx	r10d, cx
	movzx	r9d, r12w
	mov	r8, r12
	lea	rdx, QWORD PTR [r11+2]
	sub	rbp, r11
$LL16@BB11ARxTry@2:
	movzx	ecx, r9w
	add	r8, 2
	add	rdx, 4
	movzx	eax, WORD PTR COS0xFFFF_LUT[rsi+rcx*2]
	add	r9w, r10w
	mov	WORD PTR [rbx+r8*2+2380], ax
	movzx	eax, WORD PTR COS0xFFFF_LUT[rsi+rcx*2]
	mov	WORD PTR [rdx+rbp-4], ax
	movzx	eax, WORD PTR SIN0xFFFF_LUT[rsi+rcx*2]
	mov	WORD PTR [rdx-6], ax
	movzx	eax, WORD PTR SIN0xFFFF_LUT[rsi+rcx*2]
	neg	ax
	cmp	r8, 160					; 000000a0H
	mov	WORD PTR [rdx-4], ax
	jl	SHORT $LL16@BB11ARxTry@2
	mov	r13, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+88]
	mov	WORD PTR [rbx+2704], r10w

; 122  : 
; 123  :         // freqency offset is estimated, compensate 64 IQs immediately
; 124  :         FreqComp64(__pcTemp, pRxContextA->freqEstimated, 
; 125  :                     (vs*)pRxContextA->freqFactorCos, 
; 126  :                     (vs*)pRxContextA->freqFactorSin );

	test	r10w, r10w
	je	SHORT $LN30@BB11ARxTry@2
	mov	rax, rdi
	mov	ecx, 16
	npad	11
$LL32@BB11ARxTry@2:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	add	r11, 16
	sub	rcx, 1
	movdqa	xmm2, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pmulhw	xmm2, XMMWORD PTR [r11+304]
	pmulhw	xmm1, XMMWORD PTR [r11-16]
	paddw	xmm2, xmm1
	movdqa	XMMWORD PTR [rax-16], xmm2
	jne	SHORT $LL32@BB11ARxTry@2
$LN30@BB11ARxTry@2:

; 127  : 
; 128  :         // do fft, on 24 - 88 complex? 64 IQs
; 129  :         FFT<64>(__pcTemp, (vcs*)pRxContextA->cFFTOut);

	mov	rcx, rdi
	call	??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z		; FFTSSE<64>
	mov	rcx, rdi
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rdi+64]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rdi+128]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rdi+192]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	r11, OFFSET FLAT:?FFT64LUTMap@@3QBFB+2
	lea	rdx, QWORD PTR [rbx+2574132]
	lea	r8, OFFSET FLAT:?FFT64LUTMap@@3QBFB+130
	npad	2
$LL88@BB11ARxTry@2:
	movsx	rax, WORD PTR [r11-2]
	add	r11, 8
	add	rdx, 16
	cmp	r11, r8
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rdx-20], ecx
	movsx	rax, WORD PTR [r11-8]
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rdx-16], ecx
	movsx	rax, WORD PTR [r11-6]
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rdx-12], ecx
	movsx	rax, WORD PTR [r11-4]
	mov	ecx, DWORD PTR [rdi+rax*4]
	mov	DWORD PTR [rdx-8], ecx
	jl	SHORT $LL88@BB11ARxTry@2
	mov	r10d, 1
	npad	1

; 130  : 
; 131  :         // estimate channel compensation
; 132  :         EstimateChannel(pRxContextA->cFFTOut, pRxContextA->channelFactor);

$LL106@BB11ARxTry@2:
	movsx	ecx, WORD PTR [rbx+r10*4+2574128]
	movsx	r8d, WORD PTR [rbx+r10*4+2574130]
	mov	r9d, r8d
	mov	eax, ecx
	imul	r9d, r8d
	imul	eax, ecx
	add	r9d, eax
	sar	r9d, 5
	test	r9d, r9d
	je	SHORT $LN105@BB11ARxTry@2
	cmp	BYTE PTR rgbLongPrePositive[r10+rsi], 0
	je	SHORT $LN102@BB11ARxTry@2
	neg	r8d
	jmp	SHORT $LN101@BB11ARxTry@2

; 117  : 	
; 118  :         // estimate frequency offset from 128 IQs
; 119  :         pRxContextA->freqEstimated = EstimateFreqOffset ( (COMPLEX16*)__pcTemp, 
; 120  :                                       pRxContextA->freqFactorCos, 
; 121  :                                       pRxContextA->freqFactorSin );

$LN21@BB11ARxTry@2:
	xor	r12d, r12d
	mov	eax, r12d
	jmp	SHORT $LN134@BB11ARxTry@2
$LN24@BB11ARxTry@2:
	mov	eax, ebp
	cdq
	idiv	esi
	test	eax, eax
	js	$LN18@BB11ARxTry@2
	xor	r12d, r12d
$LN134@BB11ARxTry@2:
	lea	rsi, OFFSET FLAT:__ImageBase
	and	eax, 2047				; 000007ffH
	movzx	ecx, WORD PTR ATAN64_LUT[rsi+rax*2]
	jmp	$LN17@BB11ARxTry@2

; 130  : 
; 131  :         // estimate channel compensation
; 132  :         EstimateChannel(pRxContextA->cFFTOut, pRxContextA->channelFactor);

$LN102@BB11ARxTry@2:
	neg	ecx
$LN101@BB11ARxTry@2:
	imul	ecx, 1600				; 00000640H
	imul	r8d, 1600				; 00000640H
	mov	eax, ecx
	cdq
	idiv	r9d
	shl	eax, 3
	mov	DWORD PTR [rbx+r10*8+864], eax
	mov	eax, r8d
	cdq
	idiv	r9d
	shl	eax, 3
	mov	DWORD PTR [rbx+r10*8+868], eax
$LN105@BB11ARxTry@2:
	inc	r10
	cmp	r10, 26
	jle	$LL106@BB11ARxTry@2
	mov	r10d, 38				; 00000026H
$LL100@BB11ARxTry@2:
	movsx	ecx, WORD PTR [rbx+r10*4+2574128]
	movsx	r8d, WORD PTR [rbx+r10*4+2574130]
	mov	r9d, r8d
	mov	eax, ecx
	imul	r9d, r8d
	imul	eax, ecx
	add	r9d, eax
	sar	r9d, 5
	test	r9d, r9d
	je	SHORT $LN99@BB11ARxTry@2
	cmp	BYTE PTR rgbLongPrePositive[r10+rsi], 0
	je	SHORT $LN96@BB11ARxTry@2
	neg	r8d
	jmp	SHORT $LN95@BB11ARxTry@2
$LN96@BB11ARxTry@2:
	neg	ecx
$LN95@BB11ARxTry@2:
	imul	ecx, 1600				; 00000640H
	imul	r8d, 1600				; 00000640H
	mov	eax, ecx
	cdq
	idiv	r9d
	shl	eax, 3
	mov	DWORD PTR [rbx+r10*8+864], eax
	mov	eax, r8d
	cdq
	idiv	r9d
	shl	eax, 3
	mov	DWORD PTR [rbx+r10*8+868], eax
$LN99@BB11ARxTry@2:
	inc	r10
	cmp	r10, 64					; 00000040H
	jl	SHORT $LL100@BB11ARxTry@2

; 133  : 
; 134  :         pRxContextA->rxFifos->g11a_lbSync.Pop(36);

	mov	rdi, QWORD PTR [rbx+792]
	mov	rsi, QWORD PTR [rsp+96]
	mov	eax, DWORD PTR [rdi+43076]
	add	rdi, 41024				; 0000a040H
	add	rax, 36					; 00000024H
	mov	DWORD PTR [rdi+2052], eax
	mov	ecx, DWORD PTR [rdi+2052]
	mov	eax, DWORD PTR [rdi+2048]
	cmp	ecx, eax
	jne	SHORT $LN110@BB11ARxTry@2
	mov	DWORD PTR [rdi+2048], r12d
	mov	DWORD PTR [rdi+2052], r12d
$LN110@BB11ARxTry@2:
	mov	eax, DWORD PTR [rdi+2052]
	mov	r12, QWORD PTR [rsp+56]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN109@BB11ARxTry@2
	mov	r8d, DWORD PTR [rdi+2048]
	mov	eax, DWORD PTR [rdi+2052]
	mov	edx, DWORD PTR [rdi+2052]
	mov	ecx, DWORD PTR [rdi+2052]
	sub	r8d, eax
	shl	rdx, 4
	add	rcx, -64				; ffffffffffffffc0H
	shl	r8, 4
	add	rdx, rdi
	shl	rcx, 4
	add	rcx, rdi
	call	memcpy
	mov	r11d, DWORD PTR [rdi+2052]
	sub	r11, 64					; 00000040H
	mov	DWORD PTR [rdi+2052], r11d
	mov	eax, DWORD PTR [rdi+2048]
	sub	rax, 64					; 00000040H
	mov	DWORD PTR [rdi+2048], eax
$LN109@BB11ARxTry@2:

; 135  :         
; 136  :         pRxContextA->__bPilotCounter = 0;
; 137  :         
; 138  :         pRxContextA->__uRxMode = RM_HEADER;
; 139  :         
; 140  : #ifdef USER_MODE
; 141  :         TimerStop(&pRxContextA->ri_tOfflineTimings[0]);

	lea	rcx, QWORD PTR [rbx+608]
	mov	BYTE PTR [rbx+48], 0
	mov	DWORD PTR [rbx+20], 3
	call	QWORD PTR __imp_QueryPerformanceCounter

; 142  :         TimerStart(&pRxContextA->ri_tOfflineTimings[1]);

	lea	rcx, QWORD PTR [rbx+616]
	call	QWORD PTR __imp_QueryPerformanceCounter
	mov	rdi, QWORD PTR [rsp+104]

; 143  : #endif
; 144  :         hr = __BB11A_RX_MODE_SWITCH;
; 145  :     } while(FALSE);
; 146  : 
; 147  :     return hr;

	mov	eax, 769				; 00000301H

; 148  : }

	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ENDP ; BB11ARxTryPreambleFFT
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?CheckSync@@YA_NPEAUvi@@PEAUvcs@@HIAEAH@Z DD imagerel $LN9
	DD	imagerel $LN9+108
	DD	imagerel $unwind$?CheckSync@@YA_NPEAUvi@@PEAUvcs@@HIAEAH@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckSync@@YA_NPEAUvi@@PEAUvcs@@HIAEAH@Z DD 040a01H
	DD	08340aH
	DD	07006520aH
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\async.h
xdata	ENDS
;	COMDAT ?CheckSync@@YA_NPEAUvi@@PEAUvcs@@HIAEAH@Z
_TEXT	SEGMENT
$T45496 = 32
pcorrRe$ = 64
pc$ = 72
pos$ = 80
uiMax$ = 88
digitalAGC$ = 96
?CheckSync@@YA_NPEAUvi@@PEAUvcs@@HIAEAH@Z PROC		; CheckSync, COMDAT

; 97   : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H

; 98   :     vcs* pstdSPSF = (vcs*)g11a_stdSPSF + (pos << 3);

	lea	eax, DWORD PTR [r8*8]
	mov	rbx, rcx

; 99   : 
; 100  :     pcorrRe[0] = GetCrossCorrelation(pc, pstdSPSF);

	lea	rcx, QWORD PTR $T45496[rsp]
	movsxd	r8, eax
	lea	rax, OFFSET FLAT:?g11a_stdSPSF@@3QBFB	; g11a_stdSPSF
	mov	edi, r9d
	shl	r8, 4
	add	r8, rax
	call	?GetCrossCorrelation@@YA?AUvi@@PEBUvcs@@0@Z ; GetCrossCorrelation
	movdqa	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR [rbx], xmm0

; 101  : 
; 102  :     int corrRe = pcorrRe[0][0];

	mov	eax, DWORD PTR [rbx]

; 103  :     if ( corrRe < 0 ) corrRe = - corrRe;

	test	eax, eax
	jns	SHORT $LN2@CheckSync
	neg	eax
$LN2@CheckSync:

; 104  : 
; 105  : //    if ((unsigned int)pcorrRe[0][0] > uiMax)
; 106  :     if ( (unsigned int) corrRe > uiMax ) 

	cmp	eax, edi
	jbe	SHORT $LN1@CheckSync

; 107  :     {
; 108  :         // Kun: disable DigitalAGC
; 109  : 		digitalAGC = 0;

	mov	rax, QWORD PTR digitalAGC$[rsp]
	mov	DWORD PTR [rax], 0

; 110  :         // SetDigitalAGC ( corrRe, digitalAGC );
; 111  :         return 1;

	mov	al, 1

; 115  : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN1@CheckSync:

; 112  :     }
; 113  : 
; 114  :     return 0;

	xor	al, al

; 115  : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?CheckSync@@YA_NPEAUvi@@PEAUvcs@@HIAEAH@Z ENDP		; CheckSync
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z DD imagerel $LN323
	DD	imagerel $LN323+362
	DD	imagerel $unwind$?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z DD 051701H
	DD	07817H
	DD	016809H
	DD	04204H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\async.h
xdata	ENDS
;	COMDAT ?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z
_TEXT	SEGMENT
pcorrRe$ = 48
pc$ = 56
puiMax$ = 64
?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z PROC		; EstablishSync, COMDAT

; 43   : {

$LN323:
	sub	rsp, 40					; 00000028H
	movaps	XMMWORD PTR [rsp+16], xmm6
	mov	r11, r8

; 44   :     vcs* pstdSPSF = (vcs*)g11a_stdSPSF;
; 45   :     for (int i = 0; i < 16; i++)
; 46   :     {
; 47   :         pcorrRe[i] = GetCrossCorrelation(pc, pstdSPSF);
; 48   :         pstdSPSF += 8;

	lea	rax, OFFSET FLAT:?g11a_stdSPSF@@3QBFB+32
	movaps	XMMWORD PTR [rsp], xmm7
	mov	r8, rcx
	mov	r9d, 16
$LL14@EstablishS:
	movdqa	xmm6, XMMWORD PTR [rdx]
	movdqa	xmm5, XMMWORD PTR [rdx+16]
	movdqa	xmm4, XMMWORD PTR [rdx+32]
	add	r8, 16
	sub	rax, -128				; ffffffffffffff80H
	sub	r9, 1
	movdqa	xmm3, XMMWORD PTR [rdx+48]
	movdqa	xmm7, xmm6
	movdqa	xmm1, xmm4
	pmaddwd	xmm6, XMMWORD PTR [rax-96]
	pmaddwd	xmm4, XMMWORD PTR [rax-64]
	movdqa	xmm2, xmm5
	movdqa	xmm0, xmm3
	psrad	xmm6, 5
	psrad	xmm4, 5
	pmaddwd	xmm7, XMMWORD PTR [rax-160]
	pmaddwd	xmm0, XMMWORD PTR [rax-112]
	pmaddwd	xmm1, XMMWORD PTR [rax-128]
	psrad	xmm0, 5
	psrad	xmm7, 5
	psrad	xmm1, 5
	paddd	xmm1, xmm0
	pmaddwd	xmm2, XMMWORD PTR [rax-144]
	pmaddwd	xmm5, XMMWORD PTR [rax-80]
	pmaddwd	xmm3, XMMWORD PTR [rax-48]
	psrad	xmm2, 5
	psrad	xmm5, 5
	psrad	xmm3, 5
	paddd	xmm7, xmm2
	paddd	xmm6, xmm5
	paddd	xmm4, xmm3
	paddd	xmm7, xmm1
	paddd	xmm6, xmm4
	pshufd	xmm0, xmm7, 177				; 000000b1H
	paddd	xmm7, xmm0
	pshufd	xmm0, xmm7, 78				; 0000004eH
	paddd	xmm7, xmm0
	pshufd	xmm0, xmm6, 177				; 000000b1H
	paddd	xmm6, xmm0
	pshufd	xmm0, xmm6, 78				; 0000004eH
	paddd	xmm6, xmm0
	movdqa	xmm0, xmm7
	psrad	xmm0, 31
	movdqa	xmm1, xmm6
	psrad	xmm1, 31
	pxor	xmm7, xmm0
	pxor	xmm6, xmm1
	paddd	xmm7, xmm6
	movdqa	XMMWORD PTR [r8-16], xmm7
	jne	$LL14@EstablishS

; 49   :     }
; 50   : 
; 51   :     unsigned int uiMax = pcorrRe[0][0];

	mov	edx, DWORD PTR [rcx]

; 52   :     unsigned int uiSum = uiMax;
; 53   :     unsigned int iMaxInd = 0;

	xor	r10d, r10d
	lea	r8, QWORD PTR [rcx+16]
	mov	r9d, edx

; 54   : 
; 55   :     for (int i = 1; i < 16; i++)

	lea	eax, QWORD PTR [r10+1]
	npad	5
$LL5@EstablishS:

; 56   :     {
; 57   :         unsigned int uiThis = pcorrRe[i][0];

	mov	ecx, DWORD PTR [r8]

; 58   :         if (uiThis > uiMax)

	cmp	ecx, edx
	jbe	SHORT $LN2@EstablishS

; 59   :         {
; 60   :             uiMax = uiThis;

	mov	edx, ecx

; 61   :             iMaxInd = i;

	mov	r10d, eax
$LN2@EstablishS:
	inc	eax

; 62   :         }
; 63   :         uiSum += uiThis; 

	add	r9d, ecx
	add	r8, 16
	cmp	eax, 16
	jl	SHORT $LL5@EstablishS

; 64   :     }
; 65   : 
; 66   :     if ((uiSum >> 3) > uiMax) 

	shr	r9d, 3
	cmp	r9d, edx
	jbe	SHORT $LN1@EstablishS

; 67   :     {
; 68   :         // Note: if all noise, uiSum is 16 times of uiMax
; 69   :         return -1;  // error, no peak

	or	eax, -1

; 70   :     }
; 71   :         
; 72   :     *puiMax = uiMax >> 1;
; 73   :     return iMaxInd;
; 74   : }

	movaps	xmm6, XMMWORD PTR [rsp+16]
	movaps	xmm7, XMMWORD PTR [rsp]
	add	rsp, 40					; 00000028H
	ret	0
$LN1@EstablishS:
	movaps	xmm6, XMMWORD PTR [rsp+16]
	movaps	xmm7, XMMWORD PTR [rsp]
	shr	edx, 1
	mov	DWORD PTR [r11], edx
	mov	eax, r10d
	add	rsp, 40					; 00000028H
	ret	0
?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z ENDP		; EstablishSync
_TEXT	ENDS
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$?Viterbi_asig@@YAXPEAUvub@@PEAD1@Z DD imagerel $LN1557
	DD	imagerel $LN1557+1995
	DD	imagerel $unwind$?Viterbi_asig@@YAXPEAUvub@@PEAD1@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Viterbi_asig@@YAXPEAUvub@@PEAD1@Z DD 0e4901H
	DD	07849H
	DD	016827H
	DD	0d3414H
	DD	0f0103214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\viterbi.h
xdata	ENDS
;	COMDAT ?Viterbi_asig@@YAXPEAUvub@@PEAD1@Z
_TEXT	SEGMENT
pTrellis$ = 96
pbInput$ = 104
pbOutput$ = 112
?Viterbi_asig@@YAXPEAUvub@@PEAD1@Z PROC			; Viterbi_asig, COMDAT

; 40   : {

$LN1557:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 41   :     int i, j;
; 42   :     int ocnt = 0; // Counter for the output bits
; 43   : 
; 44   :     // Vector1 const used
; 45   :     vub ALLONE    (ALL_ONE);
; 46   :     vub ALLINVONE (ALL_INVERSE_ONE );
; 47   :     // __m128i xmm0 = ALLINVONE.raw; 
; 48   :     // vub ALLINE (ALL_INVERSE_ONE );
; 49   :     vub ALLINE (ALL_M128);
; 50   : 
; 51   :     A16 unsigned char outchar = 0;    // the output(decoded) char
; 52   : 
; 53   :     int i_trellis = 0;    // index of trellis
; 54   : 
; 55   :     // for trace back  
; 56   :     A16 vub * pTraceBk;       // trace back pointer in trellis
; 57   :     unsigned char i_minpos = 0;     // the minimal path position
; 58   :     unsigned char i_tpos   = 0;
; 59   : 
; 60   : 
; 61   :     char * psbit = pbInput;     // pointer to the s-bit stream;
; 62   : 
; 63   :     // temporal variables
; 64   :     A16 vub rub0, rub1, rub2, rub3;
; 65   :     A16 vus rus0, rus1, rus2, rus3;
; 66   :     A16 vus rus4, rus5, rus6, rus7;
; 67   : 
; 68   : 
; 69   :     unsigned int i_ma = 0; // index to the Branch Metric LUT table
; 70   :     unsigned int i_mb = 0;
; 71   : 
; 72   :     pTrellis[0] = ALL_INIT0; 

	movdqa	xmm0, XMMWORD PTR ?ALL_INIT0@@3QBEB

; 73   :     pTrellis[1] = ALL_INIT; 
; 74   :     pTrellis[2] = ALL_INIT; 
; 75   :     pTrellis[3] = ALL_INIT;

	mov	ebx, DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51
	movaps	XMMWORD PTR [rsp+16], xmm6
	xor	r12d, r12d
	mov	rsi, r8
	mov	r14, rdx
	mov	rdi, rcx
	lea	r15, OFFSET FLAT:__ImageBase
	mov	r13d, r12d
	movdqa	xmm6, XMMWORD PTR ?ALL_INVERSE_ONE@@3QBEB
	movaps	XMMWORD PTR [rsp], xmm7
	movdqa	xmm7, XMMWORD PTR ?ALL_ONE@@3QBEB
	movdqa	XMMWORD PTR [rcx], xmm0
	movdqa	xmm1, XMMWORD PTR ?ALL_INIT@@3QBEB
	movdqa	XMMWORD PTR [rcx+16], xmm1
	movdqa	xmm0, XMMWORD PTR ?ALL_INIT@@3QBEB
	movdqa	XMMWORD PTR [rcx+32], xmm0
	movdqa	xmm1, XMMWORD PTR ?ALL_INIT@@3QBEB
	movdqa	XMMWORD PTR [rcx+48], xmm1
	npad	4
$LL13@Viterbi_as:

; 78   :         // We have to decode 24 bits for Signal (PLCP Header)
; 79   : 
; 80   :         // Compute the bench metric
; 81   :         i_ma = (unsigned int)(unsigned char)(* psbit    ) << 3;

	movzx	eax, BYTE PTR [r14]

; 82   :         i_mb = (unsigned int)(unsigned char)(* (psbit+1)) << 3;
; 83   : 
; 84   :         psbit += 2;
; 85   : 
; 86   :         // Compute the new states
; 87   : 
; 88   :         rub0 = interleave_low (pTrellis[0], pTrellis[0]);
; 89   :         rub1 = interleave_low (pTrellis[2], pTrellis[2]);

	movdqa	xmm0, XMMWORD PTR [rdi+32]
	movdqa	xmm1, XMMWORD PTR [rdi]
	add	r14, 2
	lea	edx, DWORD PTR [rax*8]
	movzx	eax, BYTE PTR [r14-1]
	punpcklbw xmm0, xmm0
	punpcklbw xmm1, xmm1
	lea	r8d, DWORD PTR [rax*8]

; 90   : 
; 91   :         // branch 0
; 92   :         rub0 = add ( rub0, VIT_MA[i_ma] );
; 93   :         rub0 = add ( rub0, VIT_MB[i_mb] );  
; 94   :         rub0 = and ( rub0, ALLINVONE); // mark the path
; 95   : 
; 96   :         // branch 1
; 97   :         rub1 = add ( rub1, VIT_MA[i_ma+1] );
; 98   :         rub1 = add ( rub1, VIT_MB[i_mb+1] ); 
; 99   :         rub1 = or  ( rub1, ALLONE );
; 100  : 
; 101  :         // store the shortest path, state:[0-15]
; 102  :         pTrellis[4] = smin (rub0, rub1); 

	lea	ecx, DWORD PTR [rdx+1]
	mov	eax, edx
	add	rcx, rcx
	add	rax, rax
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rcx*8]
	paddb	xmm1, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rax*8]
	lea	ecx, DWORD PTR [r8+1]
	add	rcx, rcx
	mov	eax, r8d
	add	rax, rax
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rcx*8]

; 103  : 
; 104  :         rub0 = interleave_high (pTrellis[0], pTrellis[0]);
; 105  :         rub1 = interleave_high (pTrellis[2], pTrellis[2]);
; 106  : 
; 107  :         // branch 0
; 108  :         rub0 = add ( rub0, VIT_MA[i_ma+2] );
; 109  :         rub0 = add ( rub0, VIT_MB[i_mb+2] );  
; 110  :         rub0 = and ( rub0, ALLINVONE); // mark the path
; 111  : 
; 112  :         // branch 1
; 113  :         rub1 = add ( rub1, VIT_MA[i_ma+3] );
; 114  :         rub1 = add ( rub1, VIT_MB[i_mb+3] ); 
; 115  :         rub1 = or  ( rub1, ALLONE );
; 116  : 
; 117  :         // store the shortest path, state:[16-31]    
; 118  :         pTrellis[5] = smin (rub0, rub1); 

	lea	ecx, DWORD PTR [rdx+2]
	add	rcx, rcx
	paddb	xmm1, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rax*8]
	por	xmm0, xmm7
	pand	xmm1, xmm6
	pminub	xmm1, xmm0
	movdqa	XMMWORD PTR [rdi+64], xmm1
	movdqa	xmm2, XMMWORD PTR [rdi]
	movdqa	xmm0, XMMWORD PTR [rdi+32]
	punpckhbw xmm0, xmm0
	punpckhbw xmm2, xmm2
	paddb	xmm2, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [r8+2]
	add	rcx, rcx
	paddb	xmm2, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [rdx+3]
	add	rcx, rcx
	pand	xmm2, xmm6
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [r8+3]
	add	rcx, rcx
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rcx*8]

; 119  : 
; 120  :         rub0 = interleave_low (pTrellis[1], pTrellis[1]);
; 121  :         rub1 = interleave_low (pTrellis[3], pTrellis[3]);
; 122  : 
; 123  :         // branch 0
; 124  :         rub0 = add ( rub0, VIT_MA[i_ma+4] );
; 125  :         rub0 = add ( rub0, VIT_MB[i_mb+4] );  
; 126  :         rub0 = and ( rub0, ALLINVONE); // mark the path
; 127  : 
; 128  :         // branch 1
; 129  :         rub1 = add ( rub1, VIT_MA[i_ma+5] );
; 130  :         rub1 = add ( rub1, VIT_MB[i_mb+5] ); 
; 131  :         rub1 = or  ( rub1, ALLONE );
; 132  : 
; 133  :         // store the shortest path, state:[32-47]    
; 134  :         pTrellis[6] = smin (rub0, rub1); 

	lea	ecx, DWORD PTR [rdx+4]
	add	rcx, rcx
	por	xmm0, xmm7
	pminub	xmm2, xmm0
	movdqa	XMMWORD PTR [rdi+80], xmm2
	movdqa	xmm1, XMMWORD PTR [rdi+16]
	movdqa	xmm0, XMMWORD PTR [rdi+48]
	punpcklbw xmm1, xmm1
	punpcklbw xmm0, xmm0
	paddb	xmm1, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [r8+4]
	add	rcx, rcx
	paddb	xmm1, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [rdx+5]
	add	rcx, rcx
	pand	xmm1, xmm6
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [r8+5]
	add	rcx, rcx
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rcx*8]

; 135  : 
; 136  :         rub0 = interleave_high (pTrellis[1], pTrellis[1]);
; 137  :         rub1 = interleave_high (pTrellis[3], pTrellis[3]);
; 138  : 
; 139  :         // branch 0
; 140  :         rub0 = add ( rub0, VIT_MA[i_ma+6] );
; 141  :         rub0 = add ( rub0, VIT_MB[i_mb+6] );  
; 142  :         rub0 = and ( rub0, ALLINVONE); // mark the path
; 143  : 
; 144  :         // branch 1
; 145  :         rub1 = add ( rub1, VIT_MA[i_ma+7] );
; 146  :         rub1 = add ( rub1, VIT_MB[i_mb+7] ); 
; 147  :         rub1 = or  ( rub1, ALLONE );
; 148  : 
; 149  :         // store the shortest path, state:[48-63]        
; 150  :         pTrellis[7] = smin (rub0, rub1); 

	lea	ecx, DWORD PTR [rdx+6]
	add	rcx, rcx
	por	xmm0, xmm7
	pminub	xmm1, xmm0
	movdqa	XMMWORD PTR [rdi+96], xmm1
	movdqa	xmm1, XMMWORD PTR [rdi+16]
	movdqa	xmm0, XMMWORD PTR [rdi+48]
	punpckhbw xmm1, xmm1
	punpckhbw xmm0, xmm0
	paddb	xmm1, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [r8+6]
	add	rcx, rcx
	paddb	xmm1, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [rdx+7]
	add	rcx, rcx
	pand	xmm1, xmm6
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r15+rcx*8]
	lea	ecx, DWORD PTR [r8+7]
	add	rcx, rcx
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r15+rcx*8]

; 151  : 
; 152  :         // Move to next state
; 153  :         pTrellis += 4;  
; 154  :         i_trellis ++;

	inc	r13d
	add	rdi, 64					; 00000040H
	por	xmm0, xmm7
	pminub	xmm1, xmm0
	movdqa	XMMWORD PTR [rdi+48], xmm1

; 155  : 
; 156  :         // Normalize
; 157  :         if ((i_trellis & 7) == 0 ) {

	test	r13b, 7
	jne	SHORT $LN654@Viterbi_as

; 158  :             // normalization
; 159  :             // find the smallest component and extract it from all states
; 160  :             rub0 = smin (pTrellis[0], pTrellis[1] );

	movdqa	xmm3, XMMWORD PTR [rdi]
	movdqa	xmm4, XMMWORD PTR [rdi+16]

; 161  :             rub1 = smin (pTrellis[2], pTrellis[3] );

	movdqa	xmm0, XMMWORD PTR [rdi+32]
	pminub	xmm0, XMMWORD PTR [rdi+48]
	movdqa	xmm1, xmm3
	pminub	xmm1, xmm4

; 162  :             rub2 = smin (rub0, rub1);

	pminub	xmm1, xmm0

; 163  : 
; 164  :             rub3 = hmin (rub2);

	pshufd	xmm2, xmm1, 78				; 0000004eH
	pminub	xmm2, xmm1
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0
	punpcklbw xmm2, xmm2
	punpcklbw xmm2, xmm2
	pshufd	xmm0, xmm2, 78				; 0000004eH
	pminub	xmm2, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0

; 165  : 
; 166  :             // make sure to clear the marker bit
; 167  :             rub3 = and  (rub3, ALLINVONE );

	pand	xmm2, xmm6

; 168  : 
; 169  :             // normalize
; 170  :             pTrellis[0] = sub ( pTrellis[0], rub3);

	psubb	xmm3, xmm2

; 171  :             pTrellis[1] = sub ( pTrellis[1], rub3);

	psubb	xmm4, xmm2
	movdqa	XMMWORD PTR [rdi], xmm3
	movdqa	XMMWORD PTR [rdi+16], xmm4

; 172  :             pTrellis[2] = sub ( pTrellis[2], rub3);

	movdqa	xmm0, XMMWORD PTR [rdi+32]
	psubb	xmm0, xmm2
	movdqa	XMMWORD PTR [rdi+32], xmm0

; 173  :             pTrellis[3] = sub ( pTrellis[3], rub3);        

	movdqa	xmm1, XMMWORD PTR [rdi+48]
	psubb	xmm1, xmm2
	movdqa	XMMWORD PTR [rdi+48], xmm1
$LN654@Viterbi_as:

; 174  :         }
; 175  : 
; 176  :         // Traceback 
; 177  :         // We should first skip TB_DEPTH_VITAS bits and 
; 178  :         // TB_OUTPUT_VITAS is acutal bits we can output
; 179  :         if ( i_trellis >= TB_DEPTH_VITAS + TB_OUTPUT_VITAS + TB_PREFIX_VITAS ) {

	cmp	r13d, 42				; 0000002aH
	jl	$LN4@Viterbi_as

; 180  :             // track back
; 181  :             // we need to find the minimal state and index of the state
; 182  : 
; 183  :             // do normalization first
; 184  :             rub0 = smin (pTrellis[0], pTrellis[1] );

	movdqa	xmm3, XMMWORD PTR [rdi]
	movdqa	xmm4, XMMWORD PTR [rdi+16]

; 185  :             rub1 = smin (pTrellis[2], pTrellis[3] );

	movdqa	xmm0, XMMWORD PTR [rdi+32]
	pminub	xmm0, XMMWORD PTR [rdi+48]
	movdqa	xmm1, xmm3
	pminub	xmm1, xmm4

; 186  :             rub2 = smin (rub0, rub1);

	pminub	xmm1, xmm0

; 187  : 
; 188  :             rub3 = hmin (rub2);

	pshufd	xmm2, xmm1, 78				; 0000004eH
	pminub	xmm2, xmm1
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0
	punpcklbw xmm2, xmm2
	punpcklbw xmm2, xmm2
	pshufd	xmm0, xmm2, 78				; 0000004eH
	pminub	xmm2, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0

; 189  :             rub3 = and (rub3, ALLINVONE );

	pand	xmm2, xmm6

; 190  : 
; 191  :             // normalize
; 192  :             pTrellis[0] = sub ( pTrellis[0], rub3);

	psubb	xmm3, xmm2

; 193  :             pTrellis[1] = sub ( pTrellis[1], rub3);

	psubb	xmm4, xmm2
	movdqa	XMMWORD PTR [rdi], xmm3
	movdqa	XMMWORD PTR [rdi+16], xmm4

; 194  :             pTrellis[2] = sub ( pTrellis[2], rub3);

	movdqa	xmm0, XMMWORD PTR [rdi+32]
	psubb	xmm0, xmm2
	movdqa	XMMWORD PTR [rdi+32], xmm0

; 195  :             pTrellis[3] = sub ( pTrellis[3], rub3);        

	movdqa	xmm1, XMMWORD PTR [rdi+48]
	psubb	xmm1, xmm2
	movdqa	XMMWORD PTR [rdi+48], xmm1

; 196  : 
; 197  : 
; 198  :             // rub3 has the minimal value, we need to find the index
; 199  :             // the algorithm to find the right index is to embed the index at the least
; 200  :             // significant bits of state value, then we just find the minimal value
; 201  : 
; 202  :             // ensure to use pminsw - not needed
; 203  :             rub0 = INDEXES[0];

	movdqa	xmm3, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA

; 204  :             rub1 = pTrellis[0];

	movdqa	xmm0, XMMWORD PTR [rdi]

; 205  : 
; 206  :             rus2 = (vus)interleave_low  ( rub0, rub1 );
; 207  :             rus3 = (vus)interleave_high ( rub0, rub1 );
; 208  :             rus4 = smin ( rus2, rus3);

	movdqa	xmm4, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	movdqa	xmm2, xmm3
	punpcklbw xmm2, xmm0
	punpckhbw xmm3, xmm0
	test	bl, 1
	jne	SHORT $LN1556@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
	jmp	SHORT $LN905@Viterbi_as
$LN1556@Viterbi_as:
	movdqa	xmm1, XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
$LN905@Viterbi_as:

; 209  : 
; 210  :             rub0 = INDEXES[1];

	movdqa	xmm5, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA+16

; 211  :             rub1 = pTrellis[1];

	movdqa	xmm0, XMMWORD PTR [rdi+16]
	pxor	xmm3, xmm1
	pxor	xmm2, xmm1
	pminsw	xmm2, xmm3

; 212  :             rus2 = (vus)interleave_low  ( rub0, rub1 );

	movdqa	xmm3, xmm5

; 213  :             rus3 = (vus)interleave_high ( rub0, rub1 );

	punpckhbw xmm5, xmm0
	punpcklbw xmm3, xmm0
	pxor	xmm2, xmm1

; 214  : 
; 215  :             rus5 = smin (rus2, rus3);

	test	bl, 1
	jne	SHORT $LN986@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN986@Viterbi_as:
	pxor	xmm3, xmm1
	pxor	xmm5, xmm1
	pminsw	xmm3, xmm5
	pxor	xmm3, xmm1

; 216  :             rus4 = smin (rus4, rus5);

	test	bl, 1
	jne	SHORT $LN1035@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1035@Viterbi_as:

; 217  : 
; 218  :             rub0 = INDEXES[2];

	movdqa	xmm5, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA+32

; 219  :             rub1 = pTrellis[2];

	movdqa	xmm0, XMMWORD PTR [rdi+32]
	pxor	xmm3, xmm1
	pxor	xmm2, xmm1
	pminsw	xmm2, xmm3

; 220  :             rus2 = (vus)interleave_low  ( rub0, rub1 );

	movdqa	xmm3, xmm5

; 221  :             rus3 = (vus)interleave_high ( rub0, rub1 );

	punpckhbw xmm5, xmm0
	punpcklbw xmm3, xmm0
	pxor	xmm2, xmm1

; 222  : 
; 223  :             rus6 = smin (rus2, rus3);

	test	bl, 1
	jne	SHORT $LN1116@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1116@Viterbi_as:
	pxor	xmm3, xmm1
	pxor	xmm5, xmm1
	pminsw	xmm3, xmm5
	pxor	xmm3, xmm1

; 224  :             rus4 = smin (rus4, rus6);

	test	bl, 1
	jne	SHORT $LN1165@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1165@Viterbi_as:

; 225  : 
; 226  :             rub0 = INDEXES[3];

	movdqa	xmm5, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA+48

; 227  :             rub1 = pTrellis[3];

	movdqa	xmm0, XMMWORD PTR [rdi+48]
	pxor	xmm3, xmm1
	pxor	xmm2, xmm1
	pminsw	xmm2, xmm3

; 228  :             rus2 = (vus)interleave_low  ( rub0, rub1 );

	movdqa	xmm3, xmm5

; 229  :             rus3 = (vus)interleave_high ( rub0, rub1 );

	punpckhbw xmm5, xmm0
	punpcklbw xmm3, xmm0
	pxor	xmm2, xmm1

; 230  : 
; 231  :             rus7 = smin (rus2, rus3);

	test	bl, 1
	jne	SHORT $LN1246@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1246@Viterbi_as:
	pxor	xmm3, xmm1
	pxor	xmm5, xmm1
	pminsw	xmm3, xmm5
	pxor	xmm3, xmm1

; 232  :             rus4 = smin (rus4, rus7);

	test	bl, 1
	jne	SHORT $LN1295@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1295@Viterbi_as:
	pxor	xmm2, xmm1
	pxor	xmm3, xmm1
	pminsw	xmm2, xmm3
	pxor	xmm2, xmm1

; 233  : 
; 234  :             // now rus4 contains the minimal 8 
; 235  :             rus0 = hmin (rus4);

	pshufd	xmm0, xmm2, 78				; 0000004eH
	test	bl, 1
	jne	SHORT $LN1362@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1362@Viterbi_as:
	pxor	xmm2, xmm1
	pxor	xmm0, xmm1
	pminsw	xmm2, xmm0
	pxor	xmm2, xmm1
	pshufd	xmm0, xmm2, 177				; 000000b1H
	test	bl, 1
	jne	SHORT $LN1423@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1423@Viterbi_as:
	pxor	xmm2, xmm1
	pxor	xmm0, xmm1
	pminsw	xmm2, xmm0
	pxor	xmm2, xmm1
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pshufd	xmm3, xmm0, 17
	test	bl, 1
	jne	SHORT $LN1492@Viterbi_as
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1492@Viterbi_as:
	pxor	xmm2, xmm1
	pxor	xmm3, xmm1

; 236  : 
; 237  :             // now the first word contains the index and value
; 238  :             // index: bit [7:2]; 
; 239  :             // value: bit [15:8]
; 240  :             i_minpos = (unsigned char)extract<0>(rus0);
; 241  : 
; 242  :             // now we can trace back ...
; 243  :             pTraceBk = pTrellis;

	mov	r11, rdi
	mov	r8d, 2
	pminsw	xmm2, xmm3
	pxor	xmm2, xmm1
	pextrw	r10d, xmm2, 0

; 244  : 
; 245  :             // first part - trace back without output
; 246  :             i_minpos /= 2; // index 5:0

	shr	r10b, 1
	npad	6
$LL9@Viterbi_as:

; 247  :             for ( i = 0; i < TB_DEPTH_VITAS; i++) {
; 248  :                 pTraceBk -= 4;
; 249  :                 i_minpos = (i_minpos >> 1) & 0x3F;

	shr	r10b, 1

; 250  :                 i_tpos = ((char*) pTraceBk)[i_minpos];
; 251  :                 i_minpos |= (i_tpos & 1) << 6;  // now i_minpos 6:0 is the new index

	sub	r11, 384				; 00000180H
	and	r10b, 63				; 0000003fH
	movzx	eax, r10b
	shr	r10b, 1
	movzx	ecx, BYTE PTR [rax+r11+320]
	shl	cl, 5
	or	cl, r10b
	and	cl, 63					; 0000003fH
	movzx	eax, cl
	shr	cl, 1
	movzx	edx, BYTE PTR [rax+r11+256]
	shl	dl, 5
	or	dl, cl
	and	dl, 63					; 0000003fH
	movzx	eax, dl
	shr	dl, 1
	movzx	ecx, BYTE PTR [rax+r11+192]
	shl	cl, 5
	or	cl, dl
	and	cl, 63					; 0000003fH
	movzx	eax, cl
	shr	cl, 1
	movzx	edx, BYTE PTR [rax+r11+128]
	shl	dl, 5
	or	dl, cl
	and	dl, 63					; 0000003fH
	movzx	eax, dl
	shr	dl, 1
	movzx	ecx, BYTE PTR [rax+r11+64]
	shl	cl, 5
	or	cl, dl
	and	cl, 63					; 0000003fH
	movzx	r10d, cl
	movzx	ecx, BYTE PTR [r10+r11]
	and	cl, 1
	shl	cl, 6
	or	r10b, cl
	sub	r8, 1
	jne	$LL9@Viterbi_as

; 252  :             }
; 253  : 
; 254  :             // second part - trace back with output
; 255  :             pbOutput += (TB_OUTPUT_VITAS >> 3);

	add	rsi, 3
	lea	ebp, QWORD PTR [r8+3]

; 256  :             for ( i = 0; i < TB_OUTPUT_VITAS >> 3; i++) {

	add	r12d, 24
	npad	12
$LL6@Viterbi_as:

; 257  :                 for ( j = 0; j < 8; j++ ) {
; 258  :                     outchar = outchar << 1;
; 259  :                     outchar |= (i_minpos >> 6) & 1;

	movzx	edx, r10b

; 260  :                     ocnt ++;
; 261  : 
; 262  :                     // next bit
; 263  :                     pTraceBk -= 4;
; 264  :                     i_minpos = (i_minpos >> 1) & 0x3F;

	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	dl, 6

; 265  :                     i_tpos = ((char*) pTraceBk)[i_minpos] ;
; 266  :                     i_minpos |= (i_tpos & 1) << 6;  // now i_minpos 6:0 is the new index

	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11-64]
	add	dl, dl
	and	cl, 1
	shl	cl, 6
	or	r10b, cl
	movzx	r8d, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	r8b, 6
	movzx	eax, r10b
	and	r8b, 1
	movzx	ecx, BYTE PTR [rax+r11-128]
	or	r8b, dl
	and	cl, 1
	add	r8b, r8b
	shl	cl, 6
	or	r10b, cl
	movzx	edx, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	dl, 6
	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11-192]
	or	dl, r8b
	and	cl, 1
	add	dl, dl
	shl	cl, 6
	or	r10b, cl
	movzx	r8d, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	r8b, 6
	movzx	eax, r10b
	and	r8b, 1
	movzx	ecx, BYTE PTR [rax+r11-256]
	or	r8b, dl
	and	cl, 1
	add	r8b, r8b
	shl	cl, 6
	or	r10b, cl
	movzx	edx, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	dl, 6
	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11-320]
	or	dl, r8b
	and	cl, 1
	add	dl, dl
	shl	cl, 6
	or	r10b, cl
	movzx	r8d, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	r8b, 6
	movzx	eax, r10b
	and	r8b, 1
	movzx	ecx, BYTE PTR [rax+r11-384]
	or	r8b, dl
	and	cl, 1
	add	r8b, r8b
	shl	cl, 6
	or	r10b, cl
	movzx	r9d, r10b
	shr	r10b, 1
	shr	r9b, 6
	and	r10b, 63				; 0000003fH
	and	r9b, 1
	movzx	eax, r10b
	movzx	ecx, BYTE PTR [rax+r11-448]
	or	r9b, r8b
	and	cl, 1
	shl	cl, 6
	or	r10b, cl
	add	r9b, r9b

; 267  :                 }
; 268  : 
; 269  :                 pbOutput --;

	dec	rsi
	movzx	edx, r10b
	shr	r10b, 1
	sub	r11, 512				; 00000200H
	and	r10b, 63				; 0000003fH
	shr	dl, 6
	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11]
	or	dl, r9b
	and	cl, 1

; 270  :                 * pbOutput = outchar;

	mov	BYTE PTR [rsi], dl
	shl	cl, 6
	or	r10b, cl
	sub	rbp, 1
	jne	$LL6@Viterbi_as
$LN4@Viterbi_as:

; 76   : 
; 77   :     while (ocnt < 24) {

	cmp	r12d, 24
	jl	$LL13@Viterbi_as

; 271  :                 outchar = 0;
; 272  :             }
; 273  :         }
; 274  :     }
; 275  : }

	mov	rbx, QWORD PTR [rsp+104]
	movaps	xmm6, XMMWORD PTR [rsp+16]
	movaps	xmm7, XMMWORD PTR [rsp]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?Viterbi_asig@@YAXPEAUvub@@PEAD1@Z ENDP			; Viterbi_asig
PUBLIC	?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z	; BB11ARxTryHeader
;	COMDAT pdata
; File c:\sorasdk1.7\src\inc\timing.h
pdata	SEGMENT
$pdata$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN1849
	DD	imagerel $LN1849+68
	DD	imagerel $unwind$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN1849+68
	DD	imagerel $LN1849+4167
	DD	imagerel $chain$8$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN1849+4167
	DD	imagerel $LN1849+4858
	DD	imagerel $chain$9$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 040021H
	DD	0cd400H
	DD	0136400H
	DD	imagerel $LN1849
	DD	imagerel $LN1849+68
	DD	imagerel $unwind$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 0104221H
	DD	037842H
	DD	04683dH
	DD	0af435H
	DD	0be430H
	DD	0cd420H
	DD	0dc41bH
	DD	0136416H
	DD	0125408H
	DD	imagerel $LN1849
	DD	imagerel $LN1849+68
	DD	imagerel $unwind$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 044401H
	DD	0113444H
	DD	07002d206H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_fd.c
xdata	ENDS
;	COMDAT ?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
_TEXT	SEGMENT
uiSignal$ = 32
$T773595 = 40
pRxContextA$ = 128
?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z PROC	; BB11ARxTryHeader, COMDAT

; 151  : {

$LN1849:
	push	rdi
	sub	rsp, 112				; 00000070H

; 152  :     HRESULT hr;
; 153  :     BOOL __bRet;
; 154  :     vcs *__pcTemp;
; 155  :     unsigned int uiDBPS, uiSignal;
; 156  : 
; 157  :     do
; 158  :     {
; 159  :         // wait for 80 complexes, __pcTemp will point to the first one
; 160  :         __bRet = pRxContextA->rxFifos->g11a_lbSync.RCheck(20);

	mov	rdx, QWORD PTR [rcx+792]
	mov	rdi, rcx
	mov	eax, DWORD PTR [rdx+43076]
	mov	edx, DWORD PTR [rdx+43072]
	sub	edx, eax
	xor	eax, eax
	cmp	edx, 20
	setae	al

; 161  :         if (!__bRet)

	test	eax, eax
	jne	SHORT $LN11@BB11ARxTry@3

; 284  : #endif
; 285  :         hr = __BB11A_RX_MODE_SWITCH;
; 286  :     } while (FALSE);
; 287  : 
; 288  :     return hr;

	mov	eax, 768				; 00000300H

; 289  : }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
$LN11@BB11ARxTry@3:

; 162  :         {
; 163  :             hr = __BB11A_RX_WAIT_DATA;
; 164  :             break;
; 165  :         }
; 166  :         // this should be approximately the symbol for the header
; 167  :         __pcTemp = pRxContextA->rxFifos->g11a_lbSync.Peek();

	mov	rcx, QWORD PTR [rcx+792]
	mov	QWORD PTR [rsp+136], rbx
	mov	QWORD PTR [rsp+144], rbp
	mov	ebx, DWORD PTR [rcx+43076]
	mov	QWORD PTR [rsp+152], rsi
	mov	QWORD PTR [rsp+104], r12
	mov	QWORD PTR [rsp+96], r13
	add	rcx, 41024				; 0000a040H
	shl	rbx, 4
	mov	QWORD PTR [rsp+88], r14
	mov	QWORD PTR [rsp+80], r15
	add	rbx, rcx
	movaps	XMMWORD PTR [rsp+64], xmm6
	movaps	XMMWORD PTR [rsp+48], xmm7

; 168  : 
; 169  :         // ignore first 8 complexes,
; 170  :         // we use no. 8 - 72 to do fft,
; 171  :         // this has the same alignment for 24 - 84 complex in
; 172  :         // long preamble
; 173  :         __pcTemp += SYM_CP_SKIP;

	add	rbx, 32					; 00000020H

; 174  : 
; 175  :        
; 176  : #if BB_DBG        
; 177  :         dumpSymbol16(__pcTemp);
; 178  : #endif        
; 179  :         // do frequency compensation on 64 complexes
; 180  :         FreqComp64(__pcTemp, pRxContextA->freqEstimated, 
; 181  :                     (vs*)pRxContextA->freqFactorCos, 
; 182  :                     (vs*)pRxContextA->freqFactorSin);

	cmp	WORD PTR [rdi+2704], 0
	mov	r15d, 16
	je	SHORT $LN21@BB11ARxTry@3
	mov	rax, rbx
	lea	rcx, QWORD PTR [rdi+2064]
	mov	rdx, r15
	npad	9
$LL23@BB11ARxTry@3:
	movdqa	xmm0, XMMWORD PTR [rax]
	movdqa	xmm2, xmm0
	pshuflw	xmm0, xmm0, 177				; 000000b1H
	pshufhw	xmm1, xmm0, 177				; 000000b1H
	pmulhw	xmm2, XMMWORD PTR [rcx+320]
	pmulhw	xmm1, XMMWORD PTR [rcx]
	add	rcx, r15
	paddw	xmm2, xmm1
	movdqa	XMMWORD PTR [rax], xmm2
	add	rax, r15
	sub	rdx, 1
	jne	SHORT $LL23@BB11ARxTry@3
$LN21@BB11ARxTry@3:

; 183  : #if BB_DBG
; 184  :         dumpSymbol16(__pcTemp);
; 185  : #endif
; 186  : 
; 187  :         // do fft, on 8 - 72 complex
; 188  :         FFT<64>(__pcTemp, (vcs*)pRxContextA->cFFTOut);

	mov	rcx, rbx
	call	??$FFTSSE@$0EA@@@YAXPEAUvcs@@@Z		; FFTSSE<64>
	mov	rcx, rbx
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rbx+64]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rbx+128]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	rcx, QWORD PTR [rbx+192]
	call	??$FFTSSEEx@$0BA@@@YAXPEAUvcs@@@Z	; FFTSSEEx<16>
	lea	r11, OFFSET FLAT:?FFT64LUTMap@@3QBFB+2
	lea	rdx, QWORD PTR [rdi+2574132]
	lea	r8, OFFSET FLAT:?FFT64LUTMap@@3QBFB+130
	npad	8
$LL79@BB11ARxTry@3:
	movsx	rax, WORD PTR [r11-2]
	add	r11, 8
	mov	ecx, DWORD PTR [rbx+rax*4]
	mov	DWORD PTR [rdx-4], ecx
	movsx	rax, WORD PTR [r11-8]
	mov	ecx, DWORD PTR [rbx+rax*4]
	mov	DWORD PTR [rdx], ecx
	movsx	rax, WORD PTR [r11-6]
	mov	ecx, DWORD PTR [rbx+rax*4]
	mov	DWORD PTR [rdx+4], ecx
	movsx	rax, WORD PTR [r11-4]
	mov	ecx, DWORD PTR [rbx+rax*4]
	mov	DWORD PTR [rdx+8], ecx
	add	rdx, r15
	cmp	r11, r8
	jl	SHORT $LL79@BB11ARxTry@3

; 189  : 
; 190  : #if BB_DBG        
; 191  :         dumpSymbol16(pRxContextA->cFFTOut);
; 192  : #endif
; 193  : 
; 194  :         // channel compensation on 64 complexes
; 195  :         ChannelComp(pRxContextA->channelFactor, pRxContextA->cFFTOut);

	mov	ebp, 13
	lea	rbx, QWORD PTR [rdi+2574136]
	lea	rsi, QWORD PTR [rdi+884]
	mov	r12, rbp
	npad	3
$LL91@BB11ARxTry@3:
	mov	edx, DWORD PTR [rsi-8]
	mov	ecx, DWORD PTR [rsi-12]
	movsx	r10d, WORD PTR [rbx-4]
	movsx	r8d, WORD PTR [rbx-2]
	mov	eax, r10d
	add	rbx, 8
	imul	r10d, ecx
	mov	r9d, r8d
	imul	eax, edx
	imul	r8d, edx
	movsx	edx, WORD PTR [rbx-6]
	imul	r9d, ecx
	sub	r10d, r8d
	movsx	r8d, WORD PTR [rbx-8]
	add	r9d, eax
	sar	r10d, 11
	mov	WORD PTR [rbx-12], r10w
	sar	r9d, 11
	mov	r10d, edx
	mov	WORD PTR [rbx-10], r9w
	mov	ecx, DWORD PTR [rsi]
	mov	r9d, DWORD PTR [rsi-4]
	imul	r10d, r9d
	imul	r9d, r8d
	imul	edx, ecx
	sub	r9d, edx
	mov	eax, ecx
	add	rsi, r15
	sar	r9d, 11
	mov	WORD PTR [rbx-8], r9w
	imul	eax, r8d
	add	r10d, eax
	sar	r10d, 11
	sub	r12, 1
	mov	WORD PTR [rbx-6], r10w
	jne	$LL91@BB11ARxTry@3
	lea	rbx, QWORD PTR [rdi+2574284]
	lea	rsi, QWORD PTR [rdi+1180]
	npad	9
$LL88@BB11ARxTry@3:
	mov	edx, DWORD PTR [rsi-8]
	mov	ecx, DWORD PTR [rsi-12]
	movsx	r10d, WORD PTR [rbx-4]
	movsx	r8d, WORD PTR [rbx-2]
	mov	eax, r10d
	add	rbx, 8
	imul	r10d, ecx
	mov	r9d, r8d
	imul	eax, edx
	imul	r8d, edx
	movsx	edx, WORD PTR [rbx-6]
	imul	r9d, ecx
	sub	r10d, r8d
	movsx	r8d, WORD PTR [rbx-8]
	add	r9d, eax
	sar	r10d, 11
	mov	WORD PTR [rbx-12], r10w
	sar	r9d, 11
	mov	r10d, edx
	mov	WORD PTR [rbx-10], r9w
	mov	ecx, DWORD PTR [rsi]
	mov	r9d, DWORD PTR [rsi-4]
	imul	r10d, r9d
	imul	r9d, r8d
	imul	edx, ecx
	sub	r9d, edx
	mov	eax, ecx
	add	rsi, r15
	sar	r9d, 11
	mov	WORD PTR [rbx-8], r9w
	imul	eax, r8d
	add	r10d, eax
	sar	r10d, 11
	sub	rbp, 1
	mov	WORD PTR [rbx-6], r10w
	jne	$LL88@BB11ARxTry@3

; 196  : 
; 197  :         // pilot freq compensation on 64 complexes
; 198  :         Pilot(pRxContextA->cFFTOut, 
; 199  :               pRxContextA->channelFactor,
; 200  :               &pRxContextA->__bPilotCounter);

	movzx	eax, WORD PTR [rdi+2574300]
	lea	r13, OFFSET FLAT:__ImageBase
	mov	edx, -32768				; ffffffffffff8000H
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rdi+2574302]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rdi+2574356]
	movzx	ebx, WORD PTR ARG_LUT[r13+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rdi+2574358]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rdi+2574156]
	movzx	esi, WORD PTR ARG_LUT[r13+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rdi+2574158]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	eax, WORD PTR [rdi+2574212]
	movzx	r10d, WORD PTR ARG_LUT[r13+rcx*2]
	and	eax, 2040				; 000007f8H
	shl	eax, 5
	movsxd	rcx, eax
	movzx	eax, WORD PTR [rdi+2574214]
	sar	ax, 3
	movzx	eax, al
	xor	rcx, rax
	movzx	r8d, WORD PTR ARG_LUT[r13+rcx*2]
	movsx	rcx, BYTE PTR [rdi+48]
	add	r8w, dx
	cmp	BYTE PTR PILOTSGN_LUT[rcx+r13], bpl
	je	SHORT $LN103@BB11ARxTry@3
	add	bx, dx
	add	si, dx
	add	r10w, dx
	add	r8w, dx
$LN103@BB11ARxTry@3:
	inc	cl
	mov	BYTE PTR [rdi+48], cl
	cmp	cl, 127					; 0000007fH
	jne	SHORT $LN102@BB11ARxTry@3
	mov	BYTE PTR [rdi+48], 0
$LN102@BB11ARxTry@3:
	movsx	eax, r8w
	sub	r8w, si
	movsx	ecx, r10w
	add	eax, ecx
	sub	r10w, bx
	movsx	ecx, si
	add	eax, ecx
	movsx	ecx, bx
	mov	ebp, 38					; 00000026H
	add	eax, ecx
	movsx	ecx, r8w
	cdq
	and	edx, 3
	lea	r9d, DWORD PTR [rdx+rax]
	mov	eax, -1840700269			; ffffffff92492493H
	sar	r9d, 2
	imul	ecx
	lea	r8d, DWORD PTR [rcx+rdx]
	movzx	ebx, r9w
	sar	r8d, 4
	mov	eax, -1840700269			; ffffffff92492493H
	mov	ecx, r8d
	shr	ecx, 31
	add	r8d, ecx
	movsx	ecx, r10w
	mov	r10, rbp
	imul	ecx
	add	edx, ecx
	mov	ecx, 6554				; 0000199aH
	sar	edx, 4
	mov	r14d, edx
	add	edx, r8d
	shr	r14d, 31
	add	r14d, edx
	sar	r14d, 1
	movzx	eax, r14w
	imul	ax, 26
	sub	bx, ax
	mov	eax, 3277				; 00000ccdH
	add	r9w, ax
	xor	eax, eax
	cmp	r9w, cx
	seta	al
	movsxd	r9, eax
	mov	QWORD PTR $T773595[rsp], r9
	npad	2
$LL101@BB11ARxTry@3:
	movsx	edx, WORD PTR [rdi+r10*4+2574130]
	movsx	r8d, WORD PTR [rdi+r10*4+2574128]
	movzx	eax, bx
	movsx	r12d, WORD PTR COS0xFFFF_LUT[r13+rax*2]
	movsx	esi, WORD PTR SIN0xFFFF_LUT[r13+rax*2]
	mov	eax, r8d
	mov	ecx, edx
	imul	r8d, r12d
	imul	eax, esi
	imul	edx, esi
	imul	ecx, r12d
	add	r8d, edx
	sar	r8d, 16
	sub	ecx, eax
	mov	WORD PTR [rdi+r10*4+2574128], r8w
	sar	ecx, 16
	mov	WORD PTR [rdi+r10*4+2574130], cx
	test	r9, r9
	je	SHORT $LN98@BB11ARxTry@3
	mov	r9d, DWORD PTR [rdi+r10*8+864]
	mov	r8d, DWORD PTR [rdi+r10*8+868]
	mov	eax, r9d
	mov	ecx, r8d
	imul	r9d, r12d
	imul	r8d, esi
	imul	eax, esi
	imul	ecx, r12d
	sub	ecx, eax
	lea	eax, DWORD PTR [r8+r9]
	mov	r9, QWORD PTR $T773595[rsp]
	sar	ecx, 15
	sar	eax, 15
	cwde
	movsx	edx, cx
	mov	DWORD PTR [rdi+r10*8+864], eax
	mov	DWORD PTR [rdi+r10*8+868], edx
$LN98@BB11ARxTry@3:
	inc	r10
	add	bx, r14w
	cmp	r10, 64					; 00000040H
	jl	$LL101@BB11ARxTry@3
	mov	esi, 1
	add	bx, r14w
	mov	r10, rsi
$LL97@BB11ARxTry@3:
	movsx	edx, WORD PTR [rdi+r10*4+2574130]
	movsx	r8d, WORD PTR [rdi+r10*4+2574128]
	movzx	eax, bx
	movsx	r12d, WORD PTR SIN0xFFFF_LUT[r13+rax*2]
	movsx	r13d, WORD PTR COS0xFFFF_LUT[r13+rax*2]
	mov	eax, r8d
	mov	ecx, edx
	imul	r8d, r13d
	imul	eax, r12d
	imul	edx, r12d
	imul	ecx, r13d
	add	r8d, edx
	sar	r8d, 16
	sub	ecx, eax
	mov	WORD PTR [rdi+r10*4+2574128], r8w
	sar	ecx, 16
	mov	WORD PTR [rdi+r10*4+2574130], cx
	test	r9, r9
	je	SHORT $LN94@BB11ARxTry@3
	mov	r9d, DWORD PTR [rdi+r10*8+864]
	mov	r8d, DWORD PTR [rdi+r10*8+868]
	mov	eax, r9d
	mov	ecx, r8d
	imul	r9d, r13d
	imul	r8d, r12d
	imul	eax, r12d
	imul	ecx, r13d
	sub	ecx, eax
	lea	eax, DWORD PTR [r8+r9]
	mov	r9, QWORD PTR $T773595[rsp]
	sar	ecx, 15
	sar	eax, 15
	cwde
	movsx	edx, cx
	mov	DWORD PTR [rdi+r10*8+864], eax
	mov	DWORD PTR [rdi+r10*8+868], edx
$LN94@BB11ARxTry@3:
	inc	r10
	add	bx, r14w
	lea	r13, OFFSET FLAT:__ImageBase
	cmp	r10, 26
	jle	$LL97@BB11ARxTry@3

; 201  :         
; 202  :         // demap
; 203  :         Demap_11a(pRxContextA->cFFTOut, pRxContextA->bDemapped, 0x3);

	lea	rax, QWORD PTR [rdi+2574128]
	npad	3
$LL118@BB11ARxTry@3:
	movdqa	xmm0, XMMWORD PTR [rax]
	add	rax, 16
	sub	r15, rsi
	pmaxsw	xmm0, XMMWORD PTR ?rgbDemapMin@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	pminsw	xmm0, XMMWORD PTR ?rgbDemapMax@?1??DemapLimit_11a@@YAXPEAUvcs@@@Z@4QBU_COMPLEX16@@B
	movdqa	XMMWORD PTR [rax-16], xmm0
	jne	SHORT $LL118@BB11ARxTry@3
	lea	rdx, QWORD PTR [rdi+2574384]
	lea	rcx, OFFSET FLAT:__ImageBase
$LL152@BB11ARxTry@3:
	cmp	rbp, 43					; 0000002bH
	je	SHORT $LN151@BB11ARxTry@3
	cmp	rbp, 57					; 00000039H
	je	SHORT $LN151@BB11ARxTry@3
	movzx	eax, BYTE PTR [rdi+rbp*4+2574128]
	inc	rdx
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+rcx]
	mov	BYTE PTR [rdx-1], al
$LN151@BB11ARxTry@3:
	inc	rbp
	cmp	rbp, 64					; 00000040H
	jl	SHORT $LL152@BB11ARxTry@3
	npad	5
$LL147@BB11ARxTry@3:
	cmp	rsi, 7
	je	SHORT $LN1844@BB11ARxTry@3
	cmp	rsi, 21
	je	SHORT $LN1845@BB11ARxTry@3
	movzx	eax, BYTE PTR [rdi+rsi*4+2574128]
	lea	r13, OFFSET FLAT:__ImageBase
	inc	rdx
	movzx	eax, BYTE PTR ?g11a_rgbDemapBPSK@@3QBEB[rax+r13]
	mov	BYTE PTR [rdx-1], al
	jmp	SHORT $LN146@BB11ARxTry@3
$LN1844@BB11ARxTry@3:

; 196  : 
; 197  :         // pilot freq compensation on 64 complexes
; 198  :         Pilot(pRxContextA->cFFTOut, 
; 199  :               pRxContextA->channelFactor,
; 200  :               &pRxContextA->__bPilotCounter);

	lea	r13, OFFSET FLAT:__ImageBase
	jmp	SHORT $LN146@BB11ARxTry@3
$LN1845@BB11ARxTry@3:

; 201  :         
; 202  :         // demap
; 203  :         Demap_11a(pRxContextA->cFFTOut, pRxContextA->bDemapped, 0x3);

	lea	r13, OFFSET FLAT:__ImageBase
$LN146@BB11ARxTry@3:
	inc	rsi
	cmp	rsi, 26
	jle	SHORT $LL147@BB11ARxTry@3

; 204  : 
; 205  :         // deinterleave
; 206  :         Deinterleave(pRxContextA->bDemapped, pRxContextA->bDeinterleaved, 0x3);

	movzx	eax, BYTE PTR [rdi+2574384]
	lea	rbp, QWORD PTR [rdi+2574672]
	mov	BYTE PTR [rbp], al
	movzx	eax, BYTE PTR [rdi+2574387]
	mov	BYTE PTR [rbp+1], al
	movzx	eax, BYTE PTR [rdi+2574390]
	mov	BYTE PTR [rbp+2], al
	movzx	eax, BYTE PTR [rdi+2574393]
	mov	BYTE PTR [rbp+3], al
	movzx	eax, BYTE PTR [rdi+2574396]
	mov	BYTE PTR [rbp+4], al
	movzx	eax, BYTE PTR [rdi+2574399]
	mov	BYTE PTR [rbp+5], al
	movzx	eax, BYTE PTR [rdi+2574402]
	mov	BYTE PTR [rbp+6], al
	movzx	eax, BYTE PTR [rdi+2574405]
	mov	BYTE PTR [rbp+7], al
	movzx	eax, BYTE PTR [rdi+2574408]
	mov	BYTE PTR [rbp+8], al
	movzx	eax, BYTE PTR [rdi+2574411]
	mov	BYTE PTR [rbp+9], al
	movzx	eax, BYTE PTR [rdi+2574414]
	mov	BYTE PTR [rbp+10], al
	movzx	eax, BYTE PTR [rdi+2574417]
	mov	BYTE PTR [rbp+11], al
	movzx	eax, BYTE PTR [rdi+2574420]
	mov	BYTE PTR [rbp+12], al
	movzx	eax, BYTE PTR [rdi+2574423]
	mov	BYTE PTR [rbp+13], al
	movzx	eax, BYTE PTR [rdi+2574426]
	mov	BYTE PTR [rbp+14], al
	movzx	eax, BYTE PTR [rdi+2574429]
	mov	BYTE PTR [rbp+15], al
	movzx	eax, BYTE PTR [rdi+2574385]
	mov	BYTE PTR [rbp+16], al
	movzx	eax, BYTE PTR [rdi+2574388]
	mov	BYTE PTR [rbp+17], al
	movzx	eax, BYTE PTR [rdi+2574391]
	mov	BYTE PTR [rbp+18], al
	movzx	eax, BYTE PTR [rdi+2574394]
	mov	BYTE PTR [rbp+19], al
	movzx	eax, BYTE PTR [rdi+2574397]
	mov	BYTE PTR [rbp+20], al
	movzx	eax, BYTE PTR [rdi+2574400]
	mov	BYTE PTR [rbp+21], al
	movzx	eax, BYTE PTR [rdi+2574403]
	mov	BYTE PTR [rbp+22], al
	movzx	eax, BYTE PTR [rdi+2574406]
	mov	BYTE PTR [rbp+23], al
	movzx	eax, BYTE PTR [rdi+2574409]
	mov	BYTE PTR [rbp+24], al
	movzx	eax, BYTE PTR [rdi+2574412]
	mov	BYTE PTR [rbp+25], al
	movzx	eax, BYTE PTR [rdi+2574415]
	mov	BYTE PTR [rbp+26], al
	movzx	eax, BYTE PTR [rdi+2574418]
	mov	BYTE PTR [rbp+27], al
	movzx	eax, BYTE PTR [rdi+2574421]
	mov	BYTE PTR [rbp+28], al
	movzx	eax, BYTE PTR [rdi+2574424]
	mov	BYTE PTR [rbp+29], al
	movzx	eax, BYTE PTR [rdi+2574427]
	mov	BYTE PTR [rbp+30], al
	movzx	eax, BYTE PTR [rdi+2574430]
	mov	BYTE PTR [rbp+31], al
	movzx	eax, BYTE PTR [rdi+2574386]
	mov	BYTE PTR [rbp+32], al
	movzx	eax, BYTE PTR [rdi+2574389]
	mov	BYTE PTR [rbp+33], al
	movzx	eax, BYTE PTR [rdi+2574392]
	mov	BYTE PTR [rbp+34], al
	movzx	eax, BYTE PTR [rdi+2574395]
	mov	BYTE PTR [rbp+35], al
	movzx	eax, BYTE PTR [rdi+2574398]
	mov	BYTE PTR [rbp+36], al
	movzx	eax, BYTE PTR [rdi+2574401]
	mov	BYTE PTR [rbp+37], al
	movzx	eax, BYTE PTR [rdi+2574404]
	mov	BYTE PTR [rbp+38], al
	movzx	eax, BYTE PTR [rdi+2574407]
	mov	BYTE PTR [rbp+39], al
	movzx	eax, BYTE PTR [rdi+2574410]

; 207  :         
; 208  :         // viterbi decoder, specially for dot11a signal symbol
; 209  :         memset(pRxContextA->bDeinterleaved + 48, 0, 48);
; 210  : 
; 211  :         Viterbi_asig((vub *)pRxContextA->trellisAsig, (char *)pRxContextA->bDeinterleaved, (char *)(&uiSignal));

	mov	ebx, DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51
	lea	rsi, QWORD PTR [rdi+2976]
	mov	BYTE PTR [rbp+40], al
	movzx	eax, BYTE PTR [rdi+2574413]
	xor	r14d, r14d
	mov	BYTE PTR [rbp+41], al
	movzx	eax, BYTE PTR [rdi+2574416]
	lea	r12, QWORD PTR uiSignal$[rsp]
	mov	BYTE PTR [rbp+42], al
	movzx	eax, BYTE PTR [rdi+2574419]
	mov	BYTE PTR [rbp+43], al
	movzx	eax, BYTE PTR [rdi+2574422]
	mov	BYTE PTR [rbp+44], al
	movzx	eax, BYTE PTR [rdi+2574425]
	mov	BYTE PTR [rbp+45], al
	movzx	eax, BYTE PTR [rdi+2574428]
	mov	BYTE PTR [rbp+46], al
	movzx	eax, BYTE PTR [rdi+2574431]
	mov	BYTE PTR [rbp+47], al
	xor	eax, eax
	xor	r15d, r15d
	mov	QWORD PTR [rdi+2574720], rax
	mov	QWORD PTR [rdi+2574728], rax
	mov	QWORD PTR [rdi+2574736], rax
	mov	QWORD PTR [rdi+2574744], rax
	mov	QWORD PTR [rdi+2574752], rax
	mov	QWORD PTR [rdi+2574760], rax
	movdqa	xmm0, XMMWORD PTR ?ALL_INIT0@@3QBEB
	movdqa	xmm7, XMMWORD PTR ?ALL_ONE@@3QBEB
	movdqa	xmm6, XMMWORD PTR ?ALL_INVERSE_ONE@@3QBEB
	movdqa	XMMWORD PTR [rsi], xmm0
	movdqa	xmm1, XMMWORD PTR ?ALL_INIT@@3QBEB
	movdqa	XMMWORD PTR [rsi+16], xmm1
	movdqa	xmm0, XMMWORD PTR ?ALL_INIT@@3QBEB
	movdqa	XMMWORD PTR [rsi+32], xmm0
	movdqa	xmm1, XMMWORD PTR ?ALL_INIT@@3QBEB
	movdqa	XMMWORD PTR [rsi+48], xmm1
$LL219@BB11ARxTry@3:
	movzx	eax, BYTE PTR [rbp]
	movdqa	xmm0, XMMWORD PTR [rsi+32]
	movdqa	xmm1, XMMWORD PTR [rsi]
	add	rbp, 2
	lea	edx, DWORD PTR [rax*8]
	movzx	eax, BYTE PTR [rbp-1]
	punpcklbw xmm0, xmm0
	punpcklbw xmm1, xmm1
	lea	r8d, DWORD PTR [rax*8]
	lea	ecx, DWORD PTR [rdx+1]
	mov	eax, edx
	add	rcx, rcx
	add	rax, rax
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rcx*8]
	paddb	xmm1, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rax*8]
	lea	ecx, DWORD PTR [r8+1]
	add	rcx, rcx
	mov	eax, r8d
	add	rax, rax
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [rdx+2]
	add	rcx, rcx
	paddb	xmm1, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rax*8]
	por	xmm0, xmm7
	pand	xmm1, xmm6
	pminub	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi+64], xmm1
	movdqa	xmm2, XMMWORD PTR [rsi]
	movdqa	xmm0, XMMWORD PTR [rsi+32]
	punpckhbw xmm0, xmm0
	punpckhbw xmm2, xmm2
	paddb	xmm2, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [r8+2]
	add	rcx, rcx
	paddb	xmm2, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [rdx+3]
	add	rcx, rcx
	pand	xmm2, xmm6
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [r8+3]
	add	rcx, rcx
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [rdx+4]
	add	rcx, rcx
	por	xmm0, xmm7
	pminub	xmm2, xmm0
	movdqa	XMMWORD PTR [rsi+80], xmm2
	movdqa	xmm1, XMMWORD PTR [rsi+16]
	movdqa	xmm0, XMMWORD PTR [rsi+48]
	punpcklbw xmm1, xmm1
	punpcklbw xmm0, xmm0
	paddb	xmm1, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [r8+4]
	add	rcx, rcx
	paddb	xmm1, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [rdx+5]
	add	rcx, rcx
	pand	xmm1, xmm6
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [r8+5]
	add	rcx, rcx
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [rdx+6]
	add	rcx, rcx
	por	xmm0, xmm7
	pminub	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi+96], xmm1
	movdqa	xmm1, XMMWORD PTR [rsi+16]
	movdqa	xmm0, XMMWORD PTR [rsi+48]
	punpckhbw xmm1, xmm1
	punpckhbw xmm0, xmm0
	paddb	xmm1, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [r8+6]
	add	rcx, rcx
	paddb	xmm1, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [rdx+7]
	add	rcx, rcx
	pand	xmm1, xmm6
	paddb	xmm0, XMMWORD PTR ?VIT_MA@@3QAY0BA@$$CBEA[r13+rcx*8]
	lea	ecx, DWORD PTR [r8+7]
	add	rcx, rcx
	paddb	xmm0, XMMWORD PTR ?VIT_MB@@3QAY0BA@$$CBEA[r13+rcx*8]
	inc	r15d
	add	rsi, 64					; 00000040H
	por	xmm0, xmm7
	pminub	xmm1, xmm0
	movdqa	XMMWORD PTR [rsi+48], xmm1
	test	r15b, 7
	jne	SHORT $LN860@BB11ARxTry@3
	movdqa	xmm3, XMMWORD PTR [rsi]
	movdqa	xmm4, XMMWORD PTR [rsi+16]
	movdqa	xmm0, XMMWORD PTR [rsi+32]
	pminub	xmm0, XMMWORD PTR [rsi+48]
	movdqa	xmm1, xmm3
	pminub	xmm1, xmm4
	pminub	xmm1, xmm0
	pshufd	xmm2, xmm1, 78				; 0000004eH
	pminub	xmm2, xmm1
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0
	punpcklbw xmm2, xmm2
	punpcklbw xmm2, xmm2
	pshufd	xmm0, xmm2, 78				; 0000004eH
	pminub	xmm2, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0
	pand	xmm2, xmm6
	psubb	xmm3, xmm2
	psubb	xmm4, xmm2
	movdqa	XMMWORD PTR [rsi], xmm3
	movdqa	XMMWORD PTR [rsi+16], xmm4
	movdqa	xmm0, XMMWORD PTR [rsi+32]
	psubb	xmm0, xmm2
	movdqa	XMMWORD PTR [rsi+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rsi+48]
	psubb	xmm1, xmm2
	movdqa	XMMWORD PTR [rsi+48], xmm1
$LN860@BB11ARxTry@3:
	cmp	r15d, 42				; 0000002aH
	jl	$LN210@BB11ARxTry@3
	movdqa	xmm3, XMMWORD PTR [rsi]
	movdqa	xmm4, XMMWORD PTR [rsi+16]
	movdqa	xmm0, XMMWORD PTR [rsi+32]
	pminub	xmm0, XMMWORD PTR [rsi+48]
	movdqa	xmm1, xmm3
	pminub	xmm1, xmm4
	pminub	xmm1, xmm0
	pshufd	xmm2, xmm1, 78				; 0000004eH
	pminub	xmm2, xmm1
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0
	punpcklbw xmm2, xmm2
	punpcklbw xmm2, xmm2
	pshufd	xmm0, xmm2, 78				; 0000004eH
	pminub	xmm2, xmm0
	pshufd	xmm0, xmm2, 177				; 000000b1H
	pminub	xmm2, xmm0
	pand	xmm2, xmm6
	psubb	xmm3, xmm2
	psubb	xmm4, xmm2
	movdqa	XMMWORD PTR [rsi], xmm3
	movdqa	XMMWORD PTR [rsi+16], xmm4
	movdqa	xmm0, XMMWORD PTR [rsi+32]
	psubb	xmm0, xmm2
	movdqa	XMMWORD PTR [rsi+32], xmm0
	movdqa	xmm1, XMMWORD PTR [rsi+48]
	psubb	xmm1, xmm2
	movdqa	XMMWORD PTR [rsi+48], xmm1
	movdqa	xmm3, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA
	movdqa	xmm0, XMMWORD PTR [rsi]
	movdqa	xmm4, XMMWORD PTR ?mid@?1???$middle@Uvs@@@vector128_consts@@SA?BUvs@@XZ@4QBGB
	movdqa	xmm2, xmm3
	punpcklbw xmm2, xmm0
	punpckhbw xmm3, xmm0
	test	bl, 1
	jne	SHORT $LN1843@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
	jmp	SHORT $LN1111@BB11ARxTry@3
$LN1843@BB11ARxTry@3:
	movdqa	xmm1, XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B
$LN1111@BB11ARxTry@3:
	movdqa	xmm5, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA+16
	movdqa	xmm0, XMMWORD PTR [rsi+16]
	pxor	xmm3, xmm1
	pxor	xmm2, xmm1
	pminsw	xmm2, xmm3
	movdqa	xmm3, xmm5
	punpckhbw xmm5, xmm0
	punpcklbw xmm3, xmm0
	pxor	xmm2, xmm1
	test	bl, 1
	jne	SHORT $LN1192@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1192@BB11ARxTry@3:
	pxor	xmm3, xmm1
	pxor	xmm5, xmm1
	pminsw	xmm3, xmm5
	pxor	xmm3, xmm1
	test	bl, 1
	jne	SHORT $LN1241@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1241@BB11ARxTry@3:
	movdqa	xmm5, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA+32
	movdqa	xmm0, XMMWORD PTR [rsi+32]
	pxor	xmm3, xmm1
	pxor	xmm2, xmm1
	pminsw	xmm2, xmm3
	movdqa	xmm3, xmm5
	punpckhbw xmm5, xmm0
	punpcklbw xmm3, xmm0
	pxor	xmm2, xmm1
	test	bl, 1
	jne	SHORT $LN1322@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1322@BB11ARxTry@3:
	pxor	xmm3, xmm1
	pxor	xmm5, xmm1
	pminsw	xmm3, xmm5
	pxor	xmm3, xmm1
	test	bl, 1
	jne	SHORT $LN1371@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1371@BB11ARxTry@3:
	movdqa	xmm5, XMMWORD PTR ?INDEXES@@3QAY0BA@$$CBEA+48
	movdqa	xmm0, XMMWORD PTR [rsi+48]
	pxor	xmm3, xmm1
	pxor	xmm2, xmm1
	pminsw	xmm2, xmm3
	movdqa	xmm3, xmm5
	punpckhbw xmm5, xmm0
	punpcklbw xmm3, xmm0
	pxor	xmm2, xmm1
	test	bl, 1
	jne	SHORT $LN1452@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1452@BB11ARxTry@3:
	pxor	xmm3, xmm1
	pxor	xmm5, xmm1
	pminsw	xmm3, xmm5
	pxor	xmm3, xmm1
	test	bl, 1
	jne	SHORT $LN1501@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1501@BB11ARxTry@3:
	pxor	xmm2, xmm1
	pxor	xmm3, xmm1
	pminsw	xmm2, xmm3
	pxor	xmm2, xmm1
	pshufd	xmm0, xmm2, 78				; 0000004eH
	test	bl, 1
	jne	SHORT $LN1568@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1568@BB11ARxTry@3:
	pxor	xmm2, xmm1
	pxor	xmm0, xmm1
	pminsw	xmm2, xmm0
	pxor	xmm2, xmm1
	pshufd	xmm0, xmm2, 177				; 000000b1H
	test	bl, 1
	jne	SHORT $LN1629@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1629@BB11ARxTry@3:
	pxor	xmm2, xmm1
	pxor	xmm0, xmm1
	pminsw	xmm2, xmm0
	pxor	xmm2, xmm1
	pshuflw	xmm0, xmm2, 177				; 000000b1H
	pshufd	xmm3, xmm0, 17
	test	bl, 1
	jne	SHORT $LN1698@BB11ARxTry@3
	movdqa	xmm1, xmm4
	or	ebx, 1
	movdqa	XMMWORD PTR ?mid@?1??smin@@YA?AUvus@@AEBU2@0@Z@4Uvs@@B, xmm1
	mov	DWORD PTR ??_B?1??smin@@YA?AUvus@@AEBU1@0@Z@51, ebx
$LN1698@BB11ARxTry@3:
	pxor	xmm2, xmm1
	pxor	xmm3, xmm1
	mov	r11, rsi
	mov	r8d, 2
	pminsw	xmm2, xmm3
	pxor	xmm2, xmm1
	pextrw	r10d, xmm2, 0
	shr	r10b, 1
	npad	4
$LL215@BB11ARxTry@3:
	shr	r10b, 1
	sub	r11, 384				; 00000180H
	and	r10b, 63				; 0000003fH
	movzx	eax, r10b
	shr	r10b, 1
	movzx	ecx, BYTE PTR [rax+r11+320]
	shl	cl, 5
	or	cl, r10b
	and	cl, 63					; 0000003fH
	movzx	eax, cl
	shr	cl, 1
	movzx	edx, BYTE PTR [rax+r11+256]
	shl	dl, 5
	or	dl, cl
	and	dl, 63					; 0000003fH
	movzx	eax, dl
	shr	dl, 1
	movzx	ecx, BYTE PTR [rax+r11+192]
	shl	cl, 5
	or	cl, dl
	and	cl, 63					; 0000003fH
	movzx	eax, cl
	shr	cl, 1
	movzx	edx, BYTE PTR [rax+r11+128]
	shl	dl, 5
	or	dl, cl
	and	dl, 63					; 0000003fH
	movzx	eax, dl
	shr	dl, 1
	movzx	ecx, BYTE PTR [rax+r11+64]
	shl	cl, 5
	or	cl, dl
	and	cl, 63					; 0000003fH
	movzx	r10d, cl
	movzx	ecx, BYTE PTR [r10+r11]
	and	cl, 1
	shl	cl, 6
	or	r10b, cl
	sub	r8, 1
	jne	$LL215@BB11ARxTry@3
	add	r12, 3
	lea	r13d, QWORD PTR [r8+3]
	add	r14d, 24
	npad	12
$LL212@BB11ARxTry@3:
	movzx	edx, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	dl, 6
	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11-64]
	add	dl, dl
	and	cl, 1
	shl	cl, 6
	or	r10b, cl
	movzx	r8d, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	r8b, 6
	movzx	eax, r10b
	and	r8b, 1
	movzx	ecx, BYTE PTR [rax+r11-128]
	or	r8b, dl
	and	cl, 1
	add	r8b, r8b
	shl	cl, 6
	or	r10b, cl
	movzx	edx, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	dl, 6
	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11-192]
	or	dl, r8b
	and	cl, 1
	add	dl, dl
	shl	cl, 6
	or	r10b, cl
	movzx	r8d, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	r8b, 6
	movzx	eax, r10b
	and	r8b, 1
	movzx	ecx, BYTE PTR [rax+r11-256]
	or	r8b, dl
	and	cl, 1
	add	r8b, r8b
	shl	cl, 6
	or	r10b, cl
	movzx	edx, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	dl, 6
	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11-320]
	or	dl, r8b
	and	cl, 1
	add	dl, dl
	shl	cl, 6
	or	r10b, cl
	movzx	r8d, r10b
	shr	r10b, 1
	and	r10b, 63				; 0000003fH
	shr	r8b, 6
	movzx	eax, r10b
	and	r8b, 1
	movzx	ecx, BYTE PTR [rax+r11-384]
	or	r8b, dl
	and	cl, 1
	add	r8b, r8b
	shl	cl, 6
	or	r10b, cl
	movzx	r9d, r10b
	shr	r10b, 1
	shr	r9b, 6
	and	r10b, 63				; 0000003fH
	and	r9b, 1
	movzx	eax, r10b
	movzx	ecx, BYTE PTR [rax+r11-448]
	or	r9b, r8b
	and	cl, 1
	shl	cl, 6
	or	r10b, cl
	add	r9b, r9b
	dec	r12
	movzx	edx, r10b
	shr	r10b, 1
	sub	r11, 512				; 00000200H
	and	r10b, 63				; 0000003fH
	shr	dl, 6
	movzx	eax, r10b
	and	dl, 1
	movzx	ecx, BYTE PTR [rax+r11]
	or	dl, r9b
	and	cl, 1
	mov	BYTE PTR [r12], dl
	shl	cl, 6
	or	r10b, cl
	sub	r13, 1
	jne	$LL212@BB11ARxTry@3
	lea	r13, OFFSET FLAT:__ImageBase
$LN210@BB11ARxTry@3:
	cmp	r14d, 24
	jl	$LL219@BB11ARxTry@3

; 212  :         //KdPrint(("Signal: 0x%06x\n", (uiSignal & 0xFFFFFF)));
; 213  : 
; 214  :         // header check
; 215  : #ifdef USER_MODE
; 216  :         QueryPerformanceCounter(&pRxContextA->ullSignalFindTimeStamp);

	lea	rcx, QWORD PTR [rdi+40]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 217  : #else
; 218  :         pRxContextA->ullSignalFindTimeStamp = KeQueryPerformanceCounter(NULL);
; 219  : #endif
; 220  :         __bRet = ParseSignal(uiSignal, &pRxContextA->__usLength, (PUCHAR)&pRxContextA->bRate, &uiDBPS);

	mov	edx, DWORD PTR uiSignal$[rsp]
	mov	r15, QWORD PTR [rsp+80]
	movaps	xmm7, XMMWORD PTR [rsp+48]
	movaps	xmm6, XMMWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+88]
	mov	r12, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+144]
	and	edx, 16777215				; 00ffffffH
	test	edx, 16515088				; 00fc0010H
	jne	$LN1842@BB11ARxTry@3
	mov	ecx, edx
	shr	ecx, 16
	xor	ecx, edx
	mov	eax, ecx
	shr	eax, 8
	xor	ecx, eax
	mov	eax, ecx
	shr	eax, 4
	xor	ecx, eax
	mov	eax, ecx
	shr	eax, 2
	xor	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	xor	eax, ecx
	test	al, 1
	jne	$LN1842@BB11ARxTry@3
	movzx	eax, dl
	and	al, 15
	mov	BYTE PTR [rdi+768], al
	test	al, 8
	je	$LN1842@BB11ARxTry@3
	shr	edx, 5
	mov	eax, 4095				; 00000fffH
	and	dx, ax
	mov	WORD PTR [rdi+32], dx
	movzx	eax, BYTE PTR [rdi+768]
	mov	esi, DWORD PTR ?g11a_rguiDBPSLookUp@?1??ParseSignal@@YAHIPEAGPEAEPEAI@Z@4QBIB[r13+rax*4]

; 221  :         //KdPrint(("Frame length: %d\n", usLength));
; 222  : 
; 223  :         if (!__bRet)
; 224  :         {
; 225  :             hr = BB11A_E_INVALID_SIG;
; 226  :             KdPrint(("FD_NEGATIVE: Invalid signal: 0x%06x\n", 
; 227  :                         (uiSignal & 0xFFFFFF)));
; 228  :             break;
; 229  :         }
; 230  : 
; 231  :         if (pRxContextA->__usLength > pRxContextA->ri_uiFrameMaxSize || pRxContextA->__usLength < 4)

	movzx	eax, dx
	cmp	eax, DWORD PTR [rdi+72]
	ja	$LN8@BB11ARxTry@3
	cmp	dx, 4
	jb	$LN8@BB11ARxTry@3

; 232  :         {
; 233  :             hr = BB11A_E_FRAME_SIZE;
; 234  :             KdPrint(("FD_NEGATIVE: frame size(%db) "
; 235  :                         "larger than max size(%db), or less than 4\n",
; 236  :                         pRxContextA->__usLength, pRxContextA->ri_uiFrameMaxSize));
; 237  :             break;
; 238  :         }
; 239  : 
; 240  :         // pop it out, header symbol done
; 241  :         pRxContextA->rxFifos->g11a_lbSync.Pop(20);

	mov	rbx, QWORD PTR [rdi+792]
	mov	eax, DWORD PTR [rbx+43076]
	add	rbx, 41024				; 0000a040H
	add	rax, 20
	mov	DWORD PTR [rbx+2052], eax
	mov	ecx, DWORD PTR [rbx+2052]
	mov	eax, DWORD PTR [rbx+2048]
	cmp	ecx, eax
	jne	SHORT $LN1752@BB11ARxTry@3
	xor	eax, eax
	mov	DWORD PTR [rbx+2048], eax
	mov	DWORD PTR [rbx+2052], eax
$LN1752@BB11ARxTry@3:
	mov	eax, DWORD PTR [rbx+2052]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN1751@BB11ARxTry@3
	mov	r8d, DWORD PTR [rbx+2048]
	mov	eax, DWORD PTR [rbx+2052]
	mov	edx, DWORD PTR [rbx+2052]
	mov	ecx, DWORD PTR [rbx+2052]
	sub	r8d, eax
	shl	rdx, 4
	add	rcx, -64				; ffffffffffffffc0H
	shl	r8, 4
	add	rdx, rbx
	shl	rcx, 4
	add	rcx, rbx
	call	memcpy
	mov	r11d, DWORD PTR [rbx+2052]
	sub	r11, 64					; 00000040H
	mov	DWORD PTR [rbx+2052], r11d
	mov	eax, DWORD PTR [rbx+2048]
	sub	rax, 64					; 00000040H
	mov	DWORD PTR [rbx+2048], eax
$LN1751@BB11ARxTry@3:

; 242  : 
; 243  :         pRxContextA->__uRxMode = RM_DATA;
; 244  :         pRxContextA->__uiSymbolCount = (((pRxContextA->__usLength << 3) + (22 - 1 + uiDBPS)) / uiDBPS);

	movzx	eax, WORD PTR [rdi+32]
	xor	edx, edx
	mov	DWORD PTR [rdi+20], 4
	lea	eax, DWORD PTR [rsi+rax*8+21]
	div	esi
	mov	DWORD PTR [rdi+36], eax

; 245  :         if (pRxContextA->bRate == 0xF && (pRxContextA->__uiSymbolCount & 0x1))

	movzx	eax, BYTE PTR [rdi+768]
	cmp	al, 15
	jne	SHORT $LN7@BB11ARxTry@3
	mov	eax, DWORD PTR [rdi+36]
	test	al, 1
	je	SHORT $LN7@BB11ARxTry@3

; 246  :         {
; 247  :             // pad one symbol so that it 
; 248  :             // will not produce haft byte
; 249  :             pRxContextA->__uiSymbolCount++;

	inc	eax
	mov	DWORD PTR [rdi+36], eax
$LN7@BB11ARxTry@3:

; 250  :         }
; 251  :         // KdPrint(("Symbol Count:%d\n", uiSymbolCount));
; 252  :          
; 253  :         pRxContextA->uiVitSymbolCount   = pRxContextA->__uiSymbolCount;

	mov	eax, DWORD PTR [rdi+36]
	mov	DWORD PTR [rdi+772], eax

; 254  :         pRxContextA->uiVitFrameLen      = pRxContextA->__usLength;

	movzx	eax, WORD PTR [rdi+32]
	mov	DWORD PTR [rdi+776], eax

; 255  :         pRxContextA->ri_uiFrameSize     = pRxContextA->__usLength;

	movzx	eax, WORD PTR [rdi+32]

; 256  :         pRxContextA->pbVitFrameOutput   = pRxContextA->ri_pbFrame;
; 257  : 
; 258  :         switch (pRxContextA->bRate & 0x3)

	mov	cl, BYTE PTR [rdi+768]
	and	ecx, 3
	mov	DWORD PTR [rdi+588], eax
	mov	rax, QWORD PTR [rdi+64]
	mov	QWORD PTR [rdi+784], rax
	je	$LN1@BB11ARxTry@3
	sub	ecx, 1
	je	SHORT $LN2@BB11ARxTry@3
	sub	ecx, 1
	je	SHORT $LN3@BB11ARxTry@3
	cmp	ecx, 1
	jne	$LN1770@BB11ARxTry@3

; 259  :         {
; 260  :             case 0x3:
; 261  :                 pRxContextA->rxFifos->vb1.Clear();

	mov	rax, QWORD PTR [rdi+792]
	lea	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax], rcx
	mov	eax, 128				; 00000080H
	npad	10
$LL1757@BB11ARxTry@3:
	mov	BYTE PTR [rcx], 0
	add	rcx, 64					; 00000040H
	sub	rax, 1
	jne	SHORT $LL1757@BB11ARxTry@3

; 262  :                 break;

	jmp	$LN1770@BB11ARxTry@3
$LN3@BB11ARxTry@3:

; 263  :             case 0x2:
; 264  :                 pRxContextA->rxFifos->vb2.Clear();

	mov	rax, QWORD PTR [rdi+792]
	lea	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax], rcx
	mov	eax, 128				; 00000080H
	mov	rdx, rax
	npad	4
$LL1762@BB11ARxTry@3:
	mov	BYTE PTR [rcx], 0
	add	rcx, rax
	sub	rdx, 1
	jne	SHORT $LL1762@BB11ARxTry@3

; 265  :                 break;

	jmp	SHORT $LN1770@BB11ARxTry@3
$LN2@BB11ARxTry@3:

; 266  :             case 0x1:
; 267  :                 pRxContextA->rxFifos->vb3.Clear();

	mov	rax, QWORD PTR [rdi+792]
	lea	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax], rcx
	mov	eax, 128				; 00000080H
	npad	11
$LL1767@BB11ARxTry@3:
	mov	BYTE PTR [rcx], 0
	add	rcx, 256				; 00000100H
	sub	rax, 1
	jne	SHORT $LL1767@BB11ARxTry@3

; 268  :                 break;

	jmp	SHORT $LN1770@BB11ARxTry@3
$LN1@BB11ARxTry@3:

; 269  :             case 0x0:
; 270  :                 pRxContextA->rxFifos->vb4.Clear();

	mov	rax, QWORD PTR [rdi+792]
	lea	rcx, QWORD PTR [rax+64]
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax], rcx
	mov	eax, 128				; 00000080H
	npad	7
$LL1772@BB11ARxTry@3:
	mov	BYTE PTR [rcx], 0
	add	rcx, 320				; 00000140H
	sub	rax, 1
	jne	SHORT $LL1772@BB11ARxTry@3
$LN1770@BB11ARxTry@3:

; 271  :                 break;
; 272  :         }
; 273  : 
; 274  :         BB11A_VITERBIDONE_CLEAR_EVENT(pRxContextA);

	mov	BYTE PTR [rdi+761], 0

; 275  :         _mm_mfence(); // guarantee viterbi parameters are prepared.

	mfence

; 276  :         BB11A_VITERBIRUN_SET_EVENT(pRxContextA); //start viterbi processing.
; 277  : 
; 278  :         pRxContextA->__bPilotCounter = 0;
; 279  : 
; 280  : #ifdef USER_MODE
; 281  :         TimerStop(&pRxContextA->ri_tOfflineTimings[1]);

	lea	rcx, QWORD PTR [rdi+624]
	mov	BYTE PTR [rdi+760], 1
	mov	BYTE PTR [rdi+48], 0
	call	QWORD PTR __imp_QueryPerformanceCounter

; 282  :         TimerStart(&pRxContextA->ri_tOfflineTimings[2]);

	lea	rcx, QWORD PTR [rdi+632]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 283  :         TimerStart(&pRxContextA->ri_tOfflineTimings[4]);

	lea	rcx, QWORD PTR [rdi+664]
	call	QWORD PTR __imp_QueryPerformanceCounter

; 284  : #endif
; 285  :         hr = __BB11A_RX_MODE_SWITCH;
; 286  :     } while (FALSE);
; 287  : 
; 288  :     return hr;

	mov	eax, 769				; 00000301H
	jmp	SHORT $LN1848@BB11ARxTry@3
$LN8@BB11ARxTry@3:
	mov	eax, -2147459069			; ffffffff80006003H
	jmp	SHORT $LN1848@BB11ARxTry@3
$LN1842@BB11ARxTry@3:
	mov	eax, -2147459070			; ffffffff80006002H
$LN1848@BB11ARxTry@3:
	mov	rsi, QWORD PTR [rsp+152]
	mov	rbx, QWORD PTR [rsp+136]
	mov	r13, QWORD PTR [rsp+96]

; 289  : }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ENDP	; BB11ARxTryHeader
_TEXT	ENDS
PUBLIC	?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z	; BB11ARxTrySync
;	COMDAT pdata
; File c:\sorasdk1.7\src\bb\dot11a\inc\bb\mod\lbuf1.h
pdata	SEGMENT
$pdata$?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD imagerel $LN348
	DD	imagerel $LN348+951
	DD	imagerel $unwind$?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z DD 0d1e01H
	DD	0a781eH
	DD	0b681aH
	DD	01e6416H
	DD	01d3412H
	DD	018010eH
	DD	07005c007H
	DD	05004H
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_fd.c
xdata	ENDS
;	COMDAT ?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z
_TEXT	SEGMENT
re$775605 = 32
im$775606 = 96
pRxContextA$ = 224
?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z PROC	; BB11ARxTrySync, COMDAT

; 26   : {

$LN348:
	mov	rax, rsp
	push	rbp
	push	rdi
	push	r12
	sub	rsp, 192				; 000000c0H
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+24], rsi
	movaps	XMMWORD PTR [rax-40], xmm6
	movaps	XMMWORD PTR [rax-56], xmm7
	mov	rdi, rcx

; 27   :     HRESULT hr = __BB11A_RX_WAIT_DATA;

	xor	ebp, ebp
	lea	r12, OFFSET FLAT:?g11a_stdSPSF@@3QBFB	; g11a_stdSPSF
	npad	6
$LL10@BB11ARxTry@4:

; 28   :     
; 29   :     while (1)
; 30   :     {
; 31   :         vcs *pcTemp;
; 32   :         char bRet;
; 33   :         if (pRxContextA->__iSyncPeakPos < 0) // not sync yet

	cmp	DWORD PTR [rdi+24], ebp
	jge	$LN8@BB11ARxTry@4

; 34   :         {
; 35   :             bRet = pRxContextA->rxFifos->g11a_lbSync.RCheck(4);

	mov	rcx, QWORD PTR [rdi+792]
	mov	eax, DWORD PTR [rcx+43076]
	mov	ecx, DWORD PTR [rcx+43072]
	sub	ecx, eax
	cmp	ecx, 4
	setae	al

; 36   :             if (!bRet)

	test	al, al
	je	$LN346@BB11ARxTry@4

; 37   :                 break;
; 38   : 
; 39   :             pcTemp = pRxContextA->rxFifos->g11a_lbSync.Peek(); //get IQ Sync fifo head

	mov	rcx, QWORD PTR [rdi+792]

; 40   : 
; 41   :             // Kun: I assume EstablishSync is okay. May revisit later
; 42   :             pRxContextA->__iSyncPeakPos = EstablishSync((vi*)pRxContextA->corrRe, pcTemp, 
; 43   :                                                   (int*)&pRxContextA->__uiSyncMax);

	lea	r8, QWORD PTR [rdi+28]
	mov	edx, DWORD PTR [rcx+43076]
	add	rcx, 41024				; 0000a040H
	shl	rdx, 4
	add	rdx, rcx
	lea	rcx, QWORD PTR [rdi+2720]
	call	?EstablishSync@@YAHPEAUvi@@PEBUvcs@@PEAH@Z ; EstablishSync
	mov	DWORD PTR [rdi+24], eax

; 44   : 
; 45   :             if (pRxContextA->__iSyncPeakPos < 0) // sync failed

	test	eax, eax
	js	$LN340@BB11ARxTry@4

; 46   :             {
; 47   :                 hr = BB11A_E_SYNC_FAIL;
; 48   :                 KdPrint(("FD_NEGATIVE: Symbol sync failed.\n"));
; 49   :                 break;
; 50   :             }
; 51   :             else // sync succeed
; 52   :             {
; 53   :                 int iLo2bits    = pRxContextA->__iSyncPeakPos & 0x3;

	mov	esi, eax
	and	esi, 3

; 54   :                 int iHi30bits   = pRxContextA->__iSyncPeakPos & ~0x3;

	and	eax, -4

; 55   : 
; 56   :                 if (iHi30bits > 0)

	jle	$LN17@BB11ARxTry@4

; 57   :                 {
; 58   :                     pRxContextA->rxFifos->g11a_lbSync.Pop(iHi30bits / 4 ); //trim redundant old IQ in Fifo

	mov	rbx, QWORD PTR [rdi+792]
	cdq
	add	rbx, 41024				; 0000a040H
	and	edx, 3
	lea	ecx, DWORD PTR [rdx+rax]
	mov	eax, DWORD PTR [rbx+2052]
	sar	ecx, 2
	add	rcx, rax
	mov	DWORD PTR [rbx+2052], ecx
	mov	ecx, DWORD PTR [rbx+2052]
	mov	eax, DWORD PTR [rbx+2048]
	cmp	ecx, eax
	jne	SHORT $LN18@BB11ARxTry@4
	mov	DWORD PTR [rbx+2048], ebp
	mov	DWORD PTR [rbx+2052], ebp
$LN18@BB11ARxTry@4:
	mov	eax, DWORD PTR [rbx+2052]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN17@BB11ARxTry@4
	mov	eax, DWORD PTR [rbx+2052]
	mov	r8d, DWORD PTR [rbx+2048]
	mov	edx, DWORD PTR [rbx+2052]
	mov	ecx, DWORD PTR [rbx+2052]
	sub	r8d, eax
	shl	rdx, 4
	add	rcx, -64				; ffffffffffffffc0H
	shl	r8, 4
	add	rdx, rbx
	shl	rcx, 4
	add	rcx, rbx
	call	memcpy
	mov	r11d, DWORD PTR [rbx+2052]
	sub	r11, 64					; 00000040H
	mov	DWORD PTR [rbx+2052], r11d
	mov	eax, DWORD PTR [rbx+2048]
	sub	rax, 64					; 00000040H
	mov	DWORD PTR [rbx+2048], eax
$LN17@BB11ARxTry@4:

; 59   :                 }
; 60   :                 pRxContextA->__iSyncPeakPos = iLo2bits;

	mov	DWORD PTR [rdi+24], esi

; 61   :             }
; 62   :         }
; 63   :         else // synced already

	jmp	$LL10@BB11ARxTry@4
$LN8@BB11ARxTry@4:

; 64   :         {
; 65   :             bRet = pRxContextA->rxFifos->g11a_lbSync.RCheck(4);

	mov	rcx, QWORD PTR [rdi+792]
	mov	eax, DWORD PTR [rcx+43076]
	mov	ecx, DWORD PTR [rcx+43072]
	sub	ecx, eax
	cmp	ecx, 4
	setae	al

; 66   :             if (!bRet)

	test	al, al
	je	$LN346@BB11ARxTry@4

; 67   :                 break;
; 68   : 
; 69   :             pcTemp = pRxContextA->rxFifos->g11a_lbSync.Peek();

	mov	rcx, QWORD PTR [rdi+792]
	mov	edx, DWORD PTR [rcx+43076]

; 70   :             bRet = CheckSync ( (vi*)pRxContextA->corrRe, pcTemp, 
; 71   :                                pRxContextA->__iSyncPeakPos,
; 72   :                                pRxContextA->__uiSyncMax,
; 73   :                                pRxContextA->digitalAGC);

	mov	eax, DWORD PTR [rdi+24]
	mov	r8d, DWORD PTR [rdi+28]
	add	rcx, 41024				; 0000a040H
	shl	eax, 3
	shl	rdx, 4
	add	rdx, rcx
	movsxd	rcx, eax
	shl	rcx, 4
	add	rcx, r12
	movdqa	xmm6, XMMWORD PTR [rdx]
	movdqa	xmm4, XMMWORD PTR [rdx+32]
	movdqa	xmm5, XMMWORD PTR [rdx+16]
	movdqa	xmm3, XMMWORD PTR [rdx+48]
	movdqa	xmm7, xmm6
	movdqa	xmm1, xmm4
	pmaddwd	xmm6, XMMWORD PTR [rcx+64]
	pmaddwd	xmm4, XMMWORD PTR [rcx+96]
	movdqa	xmm2, xmm5
	movdqa	xmm0, xmm3
	psrad	xmm6, 5
	psrad	xmm4, 5
	pmaddwd	xmm7, XMMWORD PTR [rcx]
	pmaddwd	xmm0, XMMWORD PTR [rcx+48]
	pmaddwd	xmm1, XMMWORD PTR [rcx+32]
	movdqa	XMMWORD PTR im$775606[rsp], xmm6
	movdqa	XMMWORD PTR im$775606[rsp+32], xmm4
	psrad	xmm0, 5
	psrad	xmm7, 5
	psrad	xmm1, 5
	movdqa	XMMWORD PTR re$775605[rsp], xmm7
	movdqa	XMMWORD PTR re$775605[rsp+48], xmm0
	movdqa	XMMWORD PTR re$775605[rsp+32], xmm1
	paddd	xmm1, xmm0
	pmaddwd	xmm2, XMMWORD PTR [rcx+16]
	pmaddwd	xmm5, XMMWORD PTR [rcx+80]
	pmaddwd	xmm3, XMMWORD PTR [rcx+112]
	psrad	xmm2, 5
	psrad	xmm5, 5
	psrad	xmm3, 5
	movdqa	XMMWORD PTR re$775605[rsp+16], xmm2
	movdqa	XMMWORD PTR im$775606[rsp+16], xmm5
	movdqa	XMMWORD PTR im$775606[rsp+48], xmm3
	paddd	xmm7, xmm2
	paddd	xmm6, xmm5
	paddd	xmm4, xmm3
	paddd	xmm7, xmm1
	paddd	xmm6, xmm4
	pshufd	xmm0, xmm7, 177				; 000000b1H
	paddd	xmm7, xmm0
	pshufd	xmm0, xmm7, 78				; 0000004eH
	paddd	xmm7, xmm0
	pshufd	xmm0, xmm6, 177				; 000000b1H
	paddd	xmm6, xmm0
	pshufd	xmm0, xmm6, 78				; 0000004eH
	paddd	xmm6, xmm0
	movdqa	xmm0, xmm7
	psrad	xmm0, 31
	movdqa	xmm1, xmm6
	psrad	xmm1, 31
	pxor	xmm7, xmm0
	pxor	xmm6, xmm1
	paddd	xmm7, xmm6
	movdqa	XMMWORD PTR [rdi+2720], xmm7
	mov	eax, DWORD PTR [rdi+2720]
	test	eax, eax
	jns	SHORT $LN26@BB11ARxTry@4
	neg	eax
$LN26@BB11ARxTry@4:
	cmp	eax, r8d
	jbe	SHORT $LN25@BB11ARxTry@4
	mov	DWORD PTR [rdi+1952], ebp
	mov	sil, 1
	jmp	SHORT $LN27@BB11ARxTry@4
$LN25@BB11ARxTry@4:
	xor	sil, sil
$LN27@BB11ARxTry@4:

; 74   :             pRxContextA->rxFifos->g11a_lbSync.Pop(4);

	mov	rbx, QWORD PTR [rdi+792]
	mov	eax, DWORD PTR [rbx+43076]
	add	rbx, 41024				; 0000a040H
	add	rax, 4
	mov	DWORD PTR [rbx+2052], eax
	mov	ecx, DWORD PTR [rbx+2052]
	mov	eax, DWORD PTR [rbx+2048]
	cmp	ecx, eax
	jne	SHORT $LN332@BB11ARxTry@4
	mov	DWORD PTR [rbx+2048], ebp
	mov	DWORD PTR [rbx+2052], ebp
$LN332@BB11ARxTry@4:
	mov	eax, DWORD PTR [rbx+2052]
	cmp	eax, 64					; 00000040H
	jbe	SHORT $LN331@BB11ARxTry@4
	mov	r8d, DWORD PTR [rbx+2048]
	mov	eax, DWORD PTR [rbx+2052]
	mov	edx, DWORD PTR [rbx+2052]
	mov	ecx, DWORD PTR [rbx+2052]
	sub	r8d, eax
	shl	rdx, 4
	add	rcx, -64				; ffffffffffffffc0H
	shl	r8, 4
	add	rdx, rbx
	shl	rcx, 4
	add	rcx, rbx
	call	memcpy
	mov	r11d, DWORD PTR [rbx+2052]
	sub	r11, 64					; 00000040H
	mov	DWORD PTR [rbx+2052], r11d
	mov	eax, DWORD PTR [rbx+2048]
	sub	rax, 64					; 00000040H
	mov	DWORD PTR [rbx+2048], eax
$LN331@BB11ARxTry@4:

; 75   : 
; 76   :             if (!bRet) // sync end, long preamble now

	test	sil, sil
	jne	$LL10@BB11ARxTry@4

; 77   :             {
; 78   :                 pRxContextA->__uRxMode = RM_PRE;

	mov	DWORD PTR [rdi+20], 2

; 79   :                 hr = __BB11A_RX_MODE_SWITCH;
; 80   :                 
; 81   :                 // will branch mode
; 82   :                 break;
; 83   :             }
; 84   :             // else sync continues
; 85   :         }   
; 86   :     }
; 87   :     return hr;

	mov	eax, 769				; 00000301H
	jmp	SHORT $LN9@BB11ARxTry@4
$LN340@BB11ARxTry@4:
	mov	eax, -2147459071			; ffffffff80006001H
	jmp	SHORT $LN9@BB11ARxTry@4
$LN346@BB11ARxTry@4:
	mov	eax, 768				; 00000300H
$LN9@BB11ARxTry@4:
	movaps	xmm7, XMMWORD PTR [rsp+160]
	movaps	xmm6, XMMWORD PTR [rsp+176]
	mov	rsi, QWORD PTR [rsp+240]
	mov	rbx, QWORD PTR [rsp+232]

; 88   : }

	add	rsp, 192				; 000000c0H
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ENDP	; BB11ARxTrySync
PUBLIC	BB11ARxFrameDemod
;	COMDAT pdata
; File c:\sorasdk1.7\inc\vector128.h
pdata	SEGMENT
$pdata$BB11ARxFrameDemod DD imagerel $LN928
	DD	imagerel $LN928+1614
	DD	imagerel $unwind$BB11ARxFrameDemod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$BB11ARxFrameDemod DD 0137e01H
	DD	018987eH
	DD	0198860H
	DD	01a7857H
	DD	01b684fH
	DD	03d543dH
	DD	03f6416H
	DD	03e3416H
	DD	0380116H
	DD	0c00dd00fH
	DD	0700bH
; Function compile flags: /Ogtpy
; File c:\sorasdk1.7\src\bb\dot11a\dot11\arx_fd.c
xdata	ENDS
;	COMDAT BB11ARxFrameDemod
_TEXT	SEGMENT
fReachEnd$ = 32
hr$1048663 = 36
block$46399 = 48
block40M$1046272 = 160
block44M$1048665 = 272
pRxContextA$ = 480
pRxStream$ = 488
BB11ARxFrameDemod PROC					; COMDAT

; 488  : {

$LN928:
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	sub	rsp, 448				; 000001c0H

; 489  :     volatile FLAG *pbWorkIndicator = pRxContextA->ri_pbWorkIndicator;   

	mov	r12, QWORD PTR [rcx+56]
	mov	rsi, rcx

; 490  :     FLAG fReachEnd;
; 491  :     HRESULT hr = E_FAIL;
; 492  : 
; 493  : #ifdef USER_MODE
; 494  :     TimerStart(&pRxContextA->ri_tOfflineTimings[0]);

	add	rcx, 600				; 00000258H
	call	QWORD PTR __imp_QueryPerformanceCounter

; 495  : #endif
; 496  :     pRxContextA->__uRxMode = RM_SYNC;
; 497  :     pRxContextA->__iSyncPeakPos = -1;
; 498  : 
; 499  :     pRxContextA->rxFifos->g11a_lbSync.Clear();

	mov	rax, QWORD PTR [rsi+792]
	mov	edi, DWORD PTR hr$1048663[rsp]
	mov	QWORD PTR [rsp+488], rbp
	xor	r13d, r13d
	mov	DWORD PTR [rsi+20], 1
	movaps	XMMWORD PTR [rsp+432], xmm6
	movaps	XMMWORD PTR [rsp+416], xmm7
	movaps	XMMWORD PTR [rsp+400], xmm8
	mov	DWORD PTR [rsi+24], -1
	mov	DWORD PTR [rax+43076], r13d
	mov	DWORD PTR [rax+43072], r13d
	movaps	XMMWORD PTR [rsp+384], xmm9
	npad	2
$LL20@BB11ARxFra:

; 500  : 
; 501  :     do
; 502  :     {
; 503  :         // KdPrint(("%08x: fetch restart\n", pbScanPoint));
; 504  :         SignalBlock block;
; 505  : 
; 506  :         if (pRxContextA->SampleRate == 40)

	mov	eax, DWORD PTR [rsi]
	cmp	eax, 40					; 00000028H
	jne	$LN17@BB11ARxFra

; 507  :             hr = FetchDMADataTouchDownSampled40(pRxStream, &fReachEnd, block);

	mov	rbp, QWORD PTR RxStream+24
	mov	edx, DWORD PTR RxStream+32
	lea	r9, QWORD PTR fReachEnd$[rsp]
	mov	rcx, rbp
	mov	r8d, 1024				; 00000400H
	call	SoraCheckSignalBlock
	mov	ebx, eax
	test	eax, eax
	js	$LN455@BB11ARxFra
	movdqa	xmm0, XMMWORD PTR [rbp+16]
	movdqa	xmm2, XMMWORD PTR [rbp+32]
	movdqa	xmm3, XMMWORD PTR [rbp+48]
	mov	edx, DWORD PTR RxStream+32
	lea	r9, QWORD PTR fReachEnd$[rsp]
	mov	r8d, 1024				; 00000400H
	pshufd	xmm1, xmm0, 8
	movdqa	xmm5, XMMWORD PTR [rbp+64]
	movdqa	xmm6, XMMWORD PTR [rbp+80]
	movdqa	xmm8, XMMWORD PTR [rbp+96]
	movdqa	xmm9, XMMWORD PTR [rbp+112]
	movdqa	xmm7, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm4, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	mov	rbp, QWORD PTR RxStream+24
	sub	rbp, -128				; ffffffffffffff80H
	cmp	rbp, QWORD PTR RxStream+16
	cmove	rbp, QWORD PTR RxStream
	pand	xmm1, xmm7
	movdqa	XMMWORD PTR block40M$1046272[rsp], xmm0
	movdqa	XMMWORD PTR block40M$1046272[rsp+16], xmm2
	movdqa	XMMWORD PTR block40M$1046272[rsp+96], xmm9
	mov	rcx, rbp
	mov	QWORD PTR RxStream+24, rbp
	pshufd	xmm0, xmm2, 128				; 00000080H
	pshufd	xmm2, xmm3, 8
	pshufd	xmm9, xmm9, 8
	movdqa	XMMWORD PTR block40M$1046272[rsp+32], xmm3
	movdqa	XMMWORD PTR block40M$1046272[rsp+48], xmm5
	movdqa	XMMWORD PTR block40M$1046272[rsp+64], xmm6
	pand	xmm0, xmm4
	pand	xmm2, xmm7
	pand	xmm9, xmm7
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm5, 128				; 00000080H
	movdqa	XMMWORD PTR block40M$1046272[rsp+80], xmm8
	movdqa	XMMWORD PTR block$46399[rsp], xmm1
	movdqa	XMMWORD PTR block$46399[rsp+48], xmm9
	pand	xmm0, xmm4
	pshufd	xmm1, xmm6, 8
	pxor	xmm2, xmm0
	pand	xmm1, xmm7
	pshufd	xmm0, xmm8, 128				; 00000080H
	movdqa	XMMWORD PTR block$46399[rsp+16], xmm2
	pand	xmm0, xmm4
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR block$46399[rsp+32], xmm1
	call	SoraCheckSignalBlock
	mov	ebx, eax
	test	eax, eax
	js	$LN455@BB11ARxFra
	movdqa	xmm6, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm2, XMMWORD PTR [rbp+48]
	movdqa	xmm0, XMMWORD PTR [rbp+16]
	mov	rax, QWORD PTR RxStream+24
	sub	rax, -128				; ffffffffffffff80H
	cmp	rax, QWORD PTR RxStream+16
	cmove	rax, QWORD PTR RxStream
	movdqa	xmm1, XMMWORD PTR [rbp+32]
	movdqa	xmm4, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR [rbp+64]
	movdqa	xmm5, XMMWORD PTR [rbp+80]
	movdqa	xmm7, XMMWORD PTR [rbp+96]
	movdqa	xmm8, XMMWORD PTR [rbp+112]
	mov	QWORD PTR RxStream+24, rax
	movdqa	XMMWORD PTR block40M$1046272[rsp], xmm0
	movdqa	XMMWORD PTR block40M$1046272[rsp+16], xmm1
	movdqa	XMMWORD PTR block40M$1046272[rsp+32], xmm2
	pshufd	xmm0, xmm0, 128				; 00000080H
	pshufd	xmm1, xmm1, 8
	pand	xmm0, xmm6
	pand	xmm1, xmm4
	movdqa	XMMWORD PTR block40M$1046272[rsp+48], xmm3
	movdqa	XMMWORD PTR block40M$1046272[rsp+64], xmm5
	movdqa	XMMWORD PTR block40M$1046272[rsp+80], xmm7
	pxor	xmm9, xmm0
	pshufd	xmm0, xmm2, 128				; 00000080H
	pshufd	xmm2, xmm3, 8
	movdqa	XMMWORD PTR block40M$1046272[rsp+96], xmm8
	movdqa	XMMWORD PTR block$46399[rsp+48], xmm9
	pand	xmm0, xmm6
	pand	xmm2, xmm4
	pxor	xmm1, xmm0
	pshufd	xmm0, xmm5, 128				; 00000080H
	movdqa	XMMWORD PTR block$46399[rsp+64], xmm1
	pand	xmm0, xmm6
	pshufd	xmm1, xmm7, 8
	pxor	xmm2, xmm0
	pshufd	xmm0, xmm8, 128				; 00000080H
	pand	xmm1, xmm4
	movdqa	XMMWORD PTR block$46399[rsp+80], xmm2
	pand	xmm0, xmm6
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR block$46399[rsp+96], xmm1
	jmp	$LN455@BB11ARxFra
$LN17@BB11ARxFra:

; 508  :         else if (pRxContextA->SampleRate == 44)

	cmp	eax, 44					; 0000002cH
	jne	$LN15@BB11ARxFra

; 509  :             hr = FetchDMADataTouchDownSampled44(pRxStream, &fReachEnd, block);

	mov	eax, DWORD PTR ??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51
	test	al, 1
	jne	SHORT $LN922@BB11ARxFra
	or	eax, 1
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+344, -1
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+348, r13d
	mov	DWORD PTR ??_B?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@51, eax
	mov	eax, r13d
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+340, r13d
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352, eax
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+336, r13d
	jmp	SHORT $LL453@BB11ARxFra
$LN922@BB11ARxFra:
	mov	eax, DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352
	npad	4
$LL453@BB11ARxFra:
	cmp	eax, 56					; 00000038H
	jge	$LN915@BB11ARxFra
	mov	rdi, QWORD PTR RxStream+24
	mov	edx, DWORD PTR RxStream+32
	lea	r9, QWORD PTR fReachEnd$[rsp]
	mov	rcx, rdi
	mov	r8d, 1024				; 00000400H
	call	SoraCheckSignalBlock
	mov	ebx, eax
	test	eax, eax
	jns	SHORT $LN463@BB11ARxFra
	mov	edi, eax
	jmp	$LN464@BB11ARxFra
$LN463@BB11ARxFra:
	movdqa	xmm0, XMMWORD PTR [rdi+16]
	movdqa	xmm1, XMMWORD PTR [rdi+32]
	mov	rax, QWORD PTR RxStream+24
	sub	rax, -128				; ffffffffffffff80H
	cmp	rax, QWORD PTR RxStream+16
	movdqa	XMMWORD PTR block44M$1048665[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR [rdi+48]
	cmove	rax, QWORD PTR RxStream
	movdqa	XMMWORD PTR block44M$1048665[rsp+16], xmm1
	movdqa	xmm1, XMMWORD PTR [rdi+64]
	movdqa	XMMWORD PTR block44M$1048665[rsp+32], xmm0
	movdqa	xmm0, XMMWORD PTR [rdi+80]
	movdqa	XMMWORD PTR block44M$1048665[rsp+48], xmm1
	movdqa	xmm1, XMMWORD PTR [rdi+96]
	movdqa	XMMWORD PTR block44M$1048665[rsp+64], xmm0
	movdqa	xmm0, XMMWORD PTR [rdi+112]
	movdqa	XMMWORD PTR block44M$1048665[rsp+80], xmm1
	mov	QWORD PTR RxStream+24, rax
	mov	edi, ebx
	movdqa	XMMWORD PTR block44M$1048665[rsp+96], xmm0
$LN464@BB11ARxFra:
	test	ebx, ebx
	js	$LN455@BB11ARxFra
	lea	rdx, QWORD PTR block44M$1048665[rsp]
	lea	rcx, OFFSET FLAT:?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A
	call	?Resample@CDown44MTo40M@@QEAAXAEBUSignalBlock@@@Z ; CDown44MTo40M::Resample
	mov	eax, DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352
	jmp	$LL453@BB11ARxFra
$LN915@BB11ARxFra:
	movdqa	xmm4, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	xmm3, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsL@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A, 8
	add	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+348, 56 ; 00000038H
	sub	eax, 56					; 00000038H
	mov	ebx, edi
	mov	DWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+352, eax
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+16, 128 ; 00000080H
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+32, 8
	pand	xmm1, xmm4
	pand	xmm0, xmm3
	pand	xmm2, xmm4
	pxor	xmm1, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+48, 128 ; 00000080H
	movdqa	XMMWORD PTR block$46399[rsp], xmm1
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+64, 8
	pand	xmm0, xmm3
	pxor	xmm2, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+80, 128 ; 00000080H
	pand	xmm1, xmm4
	movdqa	XMMWORD PTR block$46399[rsp+16], xmm2
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+96, 8
	pand	xmm0, xmm3
	movdqa	xmm3, XMMWORD PTR ?m128FirstHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	pxor	xmm1, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+112, 128 ; 00000080H
	pand	xmm2, xmm4
	movdqa	xmm4, XMMWORD PTR ?m128SecondHalfMask@?1??Mem2VcsH@@YAXAEBUSignalBlock@@AEAUvcs@@111@Z@4QBU_COMPLEX16@@B
	movdqa	XMMWORD PTR block$46399[rsp+32], xmm1
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+128, 8
	pand	xmm0, xmm4
	pxor	xmm2, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+144, 128 ; 00000080H
	pand	xmm1, xmm3
	movdqa	XMMWORD PTR block$46399[rsp+48], xmm2
	pshufd	xmm2, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+160, 8
	pand	xmm0, xmm4
	pxor	xmm1, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+176, 128 ; 00000080H
	pand	xmm2, xmm3
	movdqa	XMMWORD PTR block$46399[rsp+64], xmm1
	pshufd	xmm1, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+192, 8
	pand	xmm0, xmm4
	pxor	xmm2, xmm0
	pshufd	xmm0, XMMWORD PTR ?Resampler@?1??FetchDMADataTouchDownSampled44@@YAJPEAU__SORA_RADIO_RX_STREAM@@PEADAEAUSignalBlock@@@Z@4VCDown44MTo40M@@A+208, 128 ; 00000080H
	pand	xmm1, xmm3
	movdqa	XMMWORD PTR block$46399[rsp+80], xmm2
	pand	xmm0, xmm4
	pxor	xmm1, xmm0
	movdqa	XMMWORD PTR block$46399[rsp+96], xmm1
$LN455@BB11ARxFra:

; 514  :         }
; 515  : 
; 516  :         if (FAILED(hr))

	test	ebx, ebx
	js	$LN18@BB11ARxFra

; 517  :         {
; 518  :             KdPrint(("too long waiting.\n"));
; 519  :             break;
; 520  :         }
; 521  : 
; 522  :         // Check whether force stopped
; 523  :         if (*pbWorkIndicator == 0)

	movzx	eax, BYTE PTR [r12]
	test	al, al
	je	$LN882@BB11ARxFra

; 526  :             break;
; 527  :         }
; 528  :         
; 529  :         // xmmAdjustSignBit();     // adjust sign bit from 14 to 16
; 530  :         // ShiftRight2(block);     // Kun: consider harmful!
; 531  :         // RemoveDC(block);        // Kun: remove dc offset consider harmful
; 532  :                                    //      don't know why - revisit later
; 533  : 
; 534  :         __BB11APushSignalBlockToSyncFiFo(pRxContextA, block);

	mov	rdx, QWORD PTR [rsi+792]
	mov	r8d, 112				; 00000070H
	mov	ecx, DWORD PTR [rdx+43072]
	mov	eax, DWORD PTR [rdx+43072]
	add	rdx, 41024				; 0000a040H
	add	rax, 7
	shl	rcx, 4
	mov	DWORD PTR [rdx+2048], eax
	add	rcx, rdx
	lea	rdx, QWORD PTR block$46399[rsp]
	call	memcpy
$LL11@BB11ARxFra:

; 535  : 
; 536  :         do
; 537  :         {
; 538  :             switch (pRxContextA->__uRxMode)

	mov	eax, DWORD PTR [rsi+20]
	sub	eax, 1
	je	SHORT $LN6@BB11ARxFra
	sub	eax, 1
	je	SHORT $LN5@BB11ARxFra
	sub	eax, 1
	je	SHORT $LN4@BB11ARxFra
	cmp	eax, 1
	jne	SHORT $LN10@BB11ARxFra

; 549  :                 case RM_DATA:
; 550  :                     hr = BB11ARxTryData(pRxContextA);

	mov	rcx, rsi
	call	?BB11ARxTryData@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ; BB11ARxTryData
	mov	ebx, eax

; 551  :                     if (hr == BB11A_OK_FRAME || hr == BB11A_E_CRC32)

	cmp	eax, 514				; 00000202H
	je	SHORT $LN21@BB11ARxFra
	cmp	eax, -2147459068			; ffffffff80006004H
	je	SHORT $LN21@BB11ARxFra

; 552  : 					{
; 553  : 						return hr;
; 554  : 					}
; 555  :                     break;

	jmp	SHORT $LN10@BB11ARxFra
$LN4@BB11ARxFra:

; 546  :                 case RM_HEADER:
; 547  :                     hr = BB11ARxTryHeader(pRxContextA);

	mov	rcx, rsi
	call	?BB11ARxTryHeader@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ; BB11ARxTryHeader
	mov	ebx, eax

; 548  :                     break;

	jmp	SHORT $LN10@BB11ARxFra
$LN5@BB11ARxFra:

; 542  :                     break;
; 543  :                 case RM_PRE:
; 544  :                     hr = BB11ARxTryPreambleFFT(pRxContextA);

	mov	rcx, rsi
	call	?BB11ARxTryPreambleFFT@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ; BB11ARxTryPreambleFFT
	mov	ebx, eax

; 545  :                     break;

	jmp	SHORT $LN10@BB11ARxFra
$LN6@BB11ARxFra:

; 539  :             {
; 540  :                 case RM_SYNC:
; 541  :                     hr = BB11ARxTrySync(pRxContextA);

	mov	rcx, rsi
	call	?BB11ARxTrySync@@YAJPEAU_BB11A_RX_CONTEXT@@@Z ; BB11ARxTrySync
	mov	ebx, eax
$LN10@BB11ARxFra:

; 556  :             }
; 557  :         } while (hr == __BB11A_RX_MODE_SWITCH);

	cmp	ebx, 769				; 00000301H
	je	SHORT $LL11@BB11ARxFra

; 558  :             
; 559  :     } while (SUCCEEDED(hr));

	test	ebx, ebx
	jns	$LL20@BB11ARxFra

; 560  : 
; 561  :     return hr;

	mov	eax, ebx
	jmp	SHORT $LN21@BB11ARxFra
$LN882@BB11ARxFra:

; 524  :         {
; 525  :             hr = BB11A_E_FORCE_STOP;

	mov	ebx, -2147459067			; ffffffff80006005H
$LN18@BB11ARxFra:

; 560  : 
; 561  :     return hr;

	mov	eax, ebx
	jmp	SHORT $LN21@BB11ARxFra
$LN15@BB11ARxFra:

; 510  :         else
; 511  :         {
; 512  :             KdPrint(("SampleRate is wrong\n"));
; 513  :             return E_INVALIDARG;

	mov	eax, -2147024809			; ffffffff80070057H
$LN21@BB11ARxFra:
	movaps	xmm9, XMMWORD PTR [rsp+384]
	movaps	xmm8, XMMWORD PTR [rsp+400]
	movaps	xmm7, XMMWORD PTR [rsp+416]
	mov	rbp, QWORD PTR [rsp+488]

; 562  : }

	lea	r11, QWORD PTR [rsp+448]
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	movaps	xmm6, XMMWORD PTR [rsp+432]
	mov	rsp, r11
	pop	r13
	pop	r12
	pop	rdi
	ret	0
BB11ARxFrameDemod ENDP
END
